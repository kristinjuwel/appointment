[{"D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\index.js":"1","D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\reportWebVitals.js":"2","D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\pages\\FAQ.js":"3","D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\pages\\AdminLogin.jsx":"4","D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\pages\\AboutUs.jsx":"5","D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\pages\\FAQs.jsx":"6","D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\App.jsx":"7","D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\pages\\Home.jsx":"8","D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\components\\DoctorFooter.jsx":"9","D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\components\\PatientNavBar.jsx":"10","D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\components\\PatientFooter.jsx":"11","D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\components\\DoctorNavbar.jsx":"12","D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\components\\Doctors.jsx":"13","D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\components\\Popup.jsx":"14","D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\pages\\DoctorPages\\DoctorProfile.jsx":"15","D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\pages\\DoctorPages\\DoctorSearch.jsx":"16","D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\pages\\DoctorPages\\DoctorLogin.jsx":"17","D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\pages\\DoctorPages\\DoctorRegister.jsx":"18","D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\pages\\DoctorPages\\EditDoctorProfile.jsx":"19","D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\pages\\PatientPages\\PatientLogin.jsx":"20","D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\pages\\PatientPages\\PatientRegister.jsx":"21","D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\pages\\PatientPages\\PatientProfile.jsx":"22","D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\pages\\PatientPages\\PatientAppointment.jsx":"23","D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\pages\\DoctorPages\\DoctorAppointment.jsx":"24","D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\pages\\PatientPages\\EditPatientProfile.jsx":"25","D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\pages\\AppointmentPages\\AddClinic.jsx":"26","D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\pages\\AdminHome.jsx":"27","D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\pages\\DoctorPages\\DoctorClinics.jsx":"28","D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\pages\\AppointmentPages\\DoctorResched.jsx":"29","D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\pages\\AppointmentPages\\PatientResched.jsx":"30","D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\pages\\AppointmentPages\\ManageAppointments.jsx":"31","D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\pages\\AppointmentPages\\ViewProfile.jsx":"32","D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\pages\\AppointmentPages\\AddRemoveSlots.jsx":"33","D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\pages\\DoctorPages\\DoctorEditClinic.jsx":"34","D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\pages\\DoctorPages\\DoctorAddClinic.jsx":"35","D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\pages\\AppointmentPages\\SetAppointment.jsx":"36","D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\components\\HomeNavbar.jsx":"37","D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\components\\HomeFooter.jsx":"38","D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\components\\DoctorCalendar.jsx":"39","D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\components\\DoctorsForApproval.jsx":"40","D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\components\\Clinics.jsx":"41","D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\components\\AvatarSelection.jsx":"42"},{"size":535,"mtime":1702109561385,"results":"43","hashOfConfig":"44"},{"size":362,"mtime":1702109561322,"results":"45","hashOfConfig":"44"},{"size":479,"mtime":1702109563900,"results":"46","hashOfConfig":"44"},{"size":2847,"mtime":1702109563948,"results":"47","hashOfConfig":"44"},{"size":2579,"mtime":1702109563858,"results":"48","hashOfConfig":"44"},{"size":4271,"mtime":1702273629314,"results":"49","hashOfConfig":"44"},{"size":3602,"mtime":1702275306616,"results":"50","hashOfConfig":"44"},{"size":5190,"mtime":1702272756226,"results":"51","hashOfConfig":"44"},{"size":470,"mtime":1702263566142,"results":"52","hashOfConfig":"44"},{"size":2445,"mtime":1702263596237,"results":"53","hashOfConfig":"44"},{"size":584,"mtime":1702263590207,"results":"54","hashOfConfig":"44"},{"size":2588,"mtime":1702268441716,"results":"55","hashOfConfig":"44"},{"size":6332,"mtime":1702221419031,"results":"56","hashOfConfig":"44"},{"size":256,"mtime":1702109562218,"results":"57","hashOfConfig":"44"},{"size":18869,"mtime":1702274272295,"results":"58","hashOfConfig":"44"},{"size":5435,"mtime":1702274031257,"results":"59","hashOfConfig":"44"},{"size":3236,"mtime":1702109564789,"results":"60","hashOfConfig":"44"},{"size":14448,"mtime":1702109564902,"results":"61","hashOfConfig":"44"},{"size":20729,"mtime":1702274315912,"results":"62","hashOfConfig":"44"},{"size":3091,"mtime":1702109564413,"results":"63","hashOfConfig":"44"},{"size":13136,"mtime":1702109564326,"results":"64","hashOfConfig":"44"},{"size":16741,"mtime":1702274081628,"results":"65","hashOfConfig":"44"},{"size":10878,"mtime":1702274491735,"results":"66","hashOfConfig":"44"},{"size":7640,"mtime":1702276932106,"results":"67","hashOfConfig":"44"},{"size":19108,"mtime":1702274394236,"results":"68","hashOfConfig":"44"},{"size":30357,"mtime":1702109564580,"results":"69","hashOfConfig":"44"},{"size":15600,"mtime":1702109564096,"results":"70","hashOfConfig":"44"},{"size":5323,"mtime":1702263353730,"results":"71","hashOfConfig":"44"},{"size":11669,"mtime":1702277309751,"results":"72","hashOfConfig":"44"},{"size":11702,"mtime":1702275482978,"results":"73","hashOfConfig":"44"},{"size":10142,"mtime":1702277093327,"results":"74","hashOfConfig":"44"},{"size":3457,"mtime":1702109564610,"results":"75","hashOfConfig":"44"},{"size":1648,"mtime":1702109564504,"results":"76","hashOfConfig":"44"},{"size":26297,"mtime":1702109564830,"results":"77","hashOfConfig":"44"},{"size":31703,"mtime":1702109564973,"results":"78","hashOfConfig":"44"},{"size":20875,"mtime":1702274622865,"results":"79","hashOfConfig":"44"},{"size":817,"mtime":1702109562121,"results":"80","hashOfConfig":"44"},{"size":602,"mtime":1702236516177,"results":"81","hashOfConfig":"44"},{"size":1040,"mtime":1702109562307,"results":"82","hashOfConfig":"44"},{"size":2986,"mtime":1702109561991,"results":"83","hashOfConfig":"44"},{"size":965,"mtime":1702263467873,"results":"84","hashOfConfig":"44"},{"size":1064,"mtime":1702109562284,"results":"85","hashOfConfig":"44"},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"riso1e",{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95"},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99"},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103"},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107"},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","suppressedMessages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126"},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130"},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","suppressedMessages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137"},{"filePath":"138","messages":"139","suppressedMessages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141"},{"filePath":"142","messages":"143","suppressedMessages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145"},{"filePath":"146","messages":"147","suppressedMessages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149"},{"filePath":"150","messages":"151","suppressedMessages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153"},{"filePath":"154","messages":"155","suppressedMessages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","suppressedMessages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160"},{"filePath":"161","messages":"162","suppressedMessages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164"},{"filePath":"165","messages":"166","suppressedMessages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"168","messages":"169","suppressedMessages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171"},{"filePath":"172","messages":"173","suppressedMessages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175"},{"filePath":"176","messages":"177","suppressedMessages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179"},{"filePath":"180","messages":"181","suppressedMessages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183"},{"filePath":"184","messages":"185","suppressedMessages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187"},{"filePath":"188","messages":"189","suppressedMessages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191"},{"filePath":"192","messages":"193","suppressedMessages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"195","messages":"196","suppressedMessages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198"},{"filePath":"199","messages":"200","suppressedMessages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"202","messages":"203","suppressedMessages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"205","messages":"206","suppressedMessages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208"},{"filePath":"209","messages":"210","suppressedMessages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212"},{"filePath":"213","messages":"214","suppressedMessages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"216","messages":"217","suppressedMessages":"218","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"219","messages":"220","suppressedMessages":"221","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"222","messages":"223","suppressedMessages":"224","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"225","messages":"226","suppressedMessages":"227","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"228","messages":"229","suppressedMessages":"230","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"231","messages":"232","suppressedMessages":"233","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\index.js",[],[],"D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\reportWebVitals.js",[],[],"D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\pages\\FAQ.js",["234"],[],"import React, { useState } from 'react';\r\nimport \"../styles/Faqs.css\";\r\n\r\nfunction FAQ({faq, index, toggleFAQ}) {\r\n   \r\n    return (\r\n        <div\r\n        className={\"faq \" + (faq.open ? 'open' : '')}\r\n        key={index}\r\n        onClick={() => toggleFAQ(index)}\r\n    >\r\n        <div className=\"faq-question\">\r\n            {faq.question}\r\n        </div>\r\n        <div className=\"faq-answer\">\r\n            {faq.answer}\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FAQ;","D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\pages\\AdminLogin.jsx",["235","236"],[],"import React, { useState, useEffect } from 'react';\nimport \"../styles/Login.css\";\nimport { Link } from 'react-router-dom';\n\nconst AdminLogin = () => {\n    const h1Style = { color: '#0094d4' };\n    const overlayH1Style = { color: '#ffffff' };\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n    const [loginError, setLoginError] = useState('');\n    \n    const handleLogin = async () => {\n        try {\n        const url = new URL('http://localhost:8080/adminlogin');\n        url.searchParams.append('username', username);\n        url.searchParams.append('password', password);\n\n        const response = await fetch(url, {\n            method: 'POST',\n        });\n\n        if (response.ok) {\n            // Login successful\n            setLoginError('');\n            console.log('Login successful');\n            window.location.href = '/adminhome'; // Redirect to the profile page\n        } else {\n            // Login failed\n            const errorMessage = await response.text();\n            setLoginError(errorMessage);\n            console.log('Login failed:', errorMessage);\n        }\n        } catch (error) {\n        console.error('Error during login:', error);\n        setLoginError('An error occurred during login');\n        }\n    };\n\n    return (\n      <div className=\"container\" id=\"container\">\n          <div className=\"form-container sign-in-container\">\n              <form action=\"#\" id=\"signin-form\">\n                  <h1 style={h1Style}>Admin Login</h1>\n                  <div className=\"infield\">\n                    <input\n                    type=\"text\"\n                    placeholder=\"Username\"\n                    value={username}\n                    onChange={(e) => setUsername(e.target.value)}\n                    />\n                    </div>\n                    <div className=\"infield\">\n                        <input\n                        type=\"password\"\n                        placeholder=\"Password\"\n                        value={password}\n                        onChange={(e) => setPassword(e.target.value)}\n                        />\n                    </div>\n                    <button type=\"button\" onClick={handleLogin}>\n                        Login\n                    </button>\n                    {loginError && <p className=\"verification-message\">{loginError}</p>}\n              </form>\n          </div>\n          <div className=\"overlay-container\" id=\"overlayCon\">\n              <div className=\"overlay\">\n                  <div className=\"overlay-panel overlay-right\">\n                      <h1 style={overlayH1Style}>Hello there!</h1>\n                      <p>Request an Admin Account? <br />Contact us at support@docclickconnect.com</p>\n                  </div>\n              </div>\n          </div>\n      </div>\n  );\n};\n\nexport default AdminLogin;","D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\pages\\AboutUs.jsx",["237"],[],"import React from 'react';\r\nimport \"../styles/Profile.css\";\r\nimport {Link} from \"react-router-dom\";\r\nimport HomeNavbar from '../components/HomeNavbar';\r\nimport HomeFooter from '../components/HomeFooter';\r\n\r\nfunction AboutUs() {\r\n\r\n  return (\r\n    <div >\r\n        <HomeNavbar />\r\n        <div className=\"info-container\">\r\n            <div style={{marginTop:'10%'}}>\r\n                <h1 style={{ color: '#ffffff', background: '#0094d4', width: '100vw', height: '50px', textAlign: 'center', margin: 0, padding: '10px'}}>ABOUT US</h1>\r\n                <p style={{ color: '#ffffff', background: '#0094d4', padding: '10px', textAlign: 'center', margin: 0 }}>Welcome to Doc Click Connect, an innovative platform designed to simplify the appointment scheduling process for both patients and doctors.</p>\r\n                </div>\r\n            <div className=\"steps\">\r\n                <div className=\"step-card\">\r\n                    <br />\r\n                    <br />\r\n                    <br />\r\n                    <h3>OUR MISSION</h3>\r\n                     <p>We aim to bridge the gap between patients and doctors, <br/>making it easier to schedule and coordinate medical appointments.  </p>\r\n                </div>\r\n                <div className=\"step-card\">\r\n                        <img\r\n                            src={require('../images/mission.png')}\r\n                            alt=\"mission\"\r\n                            style={{ maxWidth: '100%', maxHeight: '100hw', margin: 0}}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className=\"steps\"  style={{marginTop:'-10px'}}>\r\n                    <div className=\"step-card\">\r\n                        <img\r\n                            src={require('../images/vision.png')}\r\n                            alt='vision'\r\n                            style={{ maxWidth: '100%', maxHeight: '100hw', margin: 0}}\r\n                        />\r\n                    </div>\r\n                    <div className=\"step-card\">\r\n                        <br />\r\n                        <br />\r\n                        <br />\r\n                        <h3>OUR VISION</h3>\r\n                        <p>We envision a world where scheduling medical appointments is convenient and <br/>accessible for everyone. We aim to optimize this process by providing a seamless <br/>and intuitive platform that empowers patients to take control of their health.</p>\r\n                    </div>\r\n                </div>\r\n        </div>\r\n    \r\n        <HomeFooter />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AboutUs;","D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\pages\\FAQs.jsx",["238"],[],"import React, { useState } from 'react';\r\nimport \"../styles/Faqs.css\";\r\nimport FAQ from \"../pages/FAQ\";\r\nimport {Link} from \"react-router-dom\";\r\nimport HomeNavbar from '../components/HomeNavbar';\r\nimport HomeFooter from '../components/HomeFooter';\r\n\r\nfunction FAQs() {\r\n    const [faqs, setfaqs] = useState([\r\n        {\r\n          question: 'How do I register on Doc Click Connect?',\r\n          answer: 'To register, simply click on the \"Register\" button on the homepage. Follow the prompts to create your account. Fill in the required information and verify your account using the phone number or email address you have provided to get started.',\r\n          open: true\r\n        },\r\n        {\r\n          question: 'Is Doc Click Connect a free service?',\r\n          answer: 'Yes, Doc Click Connect is entirely free for patients. All you need to register and access our services is a working internet connection and a valid email address.',\r\n          open: false\r\n        },\r\n        {\r\n          question: 'How can I search for doctors?',\r\n          answer: 'Once you have successfully logged in, click on the \"Search Doctors\" button to input the name, specialty, clinic, or clinic schedule of the doctor you are looking for. Browse through the list of doctors that match your criteria and view their profiles to make an informed decision.',\r\n          open: false\r\n        },\r\n        {\r\n            question: 'How do I set an appointment with a doctor?',\r\n            answer: 'Once you have found a doctor, select the preferred clinic and available day and time slot from the calendar. Click \"Set Appointment\" and you and your doctor will receive a notification on your email address that your appointment is confirmed.',\r\n            open: false\r\n        },\r\n        {\r\n            question: 'What if I need to cancel or reschedule an appointment?',\r\n            answer: 'You can cancel or reschedule appointments through your account on Doc Click Connect as long as it’s more than 24 hours before the scheduled appointment. Click on the “My Appointments” button and choose any confirmed appointment that you want to reschedule or cancel.',\r\n            open: false\r\n        },\r\n        {\r\n            question: 'What if I need to cancel or reschedule an appointment within 24 hours of the appointment schedule?',\r\n            answer: 'You can inform your doctor by contacting them on the phone number they have provided on their profile.',\r\n            open: false\r\n        },\r\n        {\r\n            question: 'What if my doctor cancels or reschedules my appointment?',\r\n            answer: 'You will be informed through the email address you have provided, depending on the notification preference that you have set.',\r\n            open: false\r\n        },\r\n        {\r\n            question: 'Can doctors see my profile? What information can they access?',\r\n            answer: 'Doctors can only view your profile once you have scheduled an appointment with them. Aside from your basic information and contact details, doctors can also see your health insurance information, senior citizen ID, and PWD ID if available.',\r\n            open: false\r\n        },\r\n        {\r\n            question: 'Can doctors set an appointment on my behalf?',\r\n            answer: 'Doctors can log in to their dedicated portal, where they can manage their registered clinics and set appointments for new patients and patients for follow-up consultations.',\r\n            open: false\r\n        }\r\n      ]);\r\n    \r\n      const toggleFAQ = index => {\r\n        setfaqs(faqs.map((faq, i) => {\r\n          if (i === index) {\r\n            faq.open = !faq.open\r\n          } else {\r\n            faq.open = false;\r\n          }\r\n    \r\n          return faq;\r\n        }))\r\n      }\r\n  \r\n    return (\r\n      <div className=\"faq-container\" id=\"container\" >\r\n        <HomeNavbar />\r\n        <div style={{overflowY: \"auto\", maxHeight: \"100vh\",width: \"100vw\", margin: 0}}>\r\n          <div className=\"faqs\" style={{marginTop: \"0px\", marginBottom: 0}}>\r\n          {faqs.map((faq, i) => (\r\n            <FAQ faq={faq} index={i} toggleFAQ={toggleFAQ} />\r\n              ))}\r\n          </div>\r\n        </div>\r\n       \r\n        <HomeFooter className=\"home-footer\" />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FAQs;","D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\App.jsx",[],[],"D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\pages\\Home.jsx",[],[],"D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\components\\DoctorFooter.jsx",[],[],"D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\components\\PatientNavBar.jsx",[],[],"D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\components\\PatientFooter.jsx",[],[],"D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\components\\DoctorNavbar.jsx",["239"],[],"import React, { useEffect, useState } from 'react';\nimport \"../styles/Profile.css\";\nimport { Link } from 'react-router-dom';\n\nconst DoctorNavbar = () => {\n  const [message, setMessage] = useState('');\n  const [user, setUser] = useState(null);\n  const [isError, setIsError] = useState(false);\n\n  useEffect(() => {\n        fetchUser();\n      }, []);\n\n  const fetchUser = async () => {\n      try {\n        const response = await fetch(\"http://localhost:8080/doctorprofile\");\n        if (response.ok) {\n          const data = await response.json();\n          setUser(data);\n        } else {\n          setIsError(true);\n        }\n      } catch (error) {\n        console.error('Error fetching user:', error);\n        setIsError(true);\n      }\n  };\n  \n  \n  const handleLogout = async () => {\n    try {\n        const response = await fetch(\"http://localhost:8080/doctorlogout\", {\n        method: 'POST',\n        });\n\n        if (response.status === 200) {\n        setMessage('Logged out successfully');\n        window.location.href = '/doclogin';\n        } else if (response.status === 401) {\n        setMessage('No user is currently logged in');\n        } else {\n        setMessage('An error occurred');\n        }\n    } catch (error) {\n        setMessage('An error occurred');\n    }\n  };\n  return (\n    <div id=\"navbar\">\n        <nav>\n            <ul>\n                <li style={{ float: 'left' }}>\n                    <Link to=\"/docprofile\">\n                    <img\n                    src={require('../images/DOC LOGO.png')}\n                    alt=\"Doc Click Connect\"\n                    style={{ maxWidth: '100px', maxHeight: '40px', marginRight: '20px', marginLeft: '-50px' }}\n                    /></Link>\n                </li>\n            </ul>\n            <ul>\n                <li><Link to=\"/docprofile\">My Profile</Link></li>\n                <li><Link to=\"/editdocprofile\">Edit Profile</Link></li>\n                <li><Link to=\"/docappointments\">My Appointments</Link></li>\n                <li><Link to=\"/docaddclinic\">Add Clinic</Link></li>\n                <li><Link to=\"/docclinic\">My Clinics</Link></li>\n                <li style={{ float: 'right' }}>\n                {user ? (\n                <li style={{color: \"white\", fontSize: \"15px\"}}>Hello, {user.user.firstName}! </li>\n                ) : (\n                  (\n                    <p></p>\n                  )\n                )}\n                <button onClick={handleLogout}>Log Out</button>\n                <p>{message}</p>\n              </li>\n            </ul>\n        </nav>\n    </div>\n  )\n}\n\nexport default DoctorNavbar\n","D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\components\\Doctors.jsx",["240","241"],[],"import React, { useState, useEffect } from 'react';\r\nimport avatar00 from '../images/defaultIcon.png';\r\nimport avatar01 from '../assets/DoctorIcons/Icon01.png';\r\nimport avatar02 from '../assets/DoctorIcons/Icon02.png';\r\nimport avatar03 from '../assets/DoctorIcons/Icon03.png';\r\nimport avatar04 from '../assets/DoctorIcons/Icon04.png';\r\nimport avatar05 from '../assets/DoctorIcons/Icon05.png';\r\nimport avatar06 from '../assets/DoctorIcons/Icon06.png';\r\nimport avatar07 from '../assets/DoctorIcons/Icon07.png';\r\nimport avatar08 from '../assets/DoctorIcons/Icon08.png';\r\nimport avatar09 from '../assets/DoctorIcons/Icon09.png';\r\nimport avatar10 from '../assets/DoctorIcons/Icon10.png';\r\nimport avatar11 from '../assets/DoctorIcons/Icon11.png';\r\nimport avatar12 from '../assets/DoctorIcons/Icon12.png';\r\nimport avatar13 from '../assets/DoctorIcons/Icon13.png';\r\nimport avatar14 from '../assets/DoctorIcons/Icon14.png';\r\n\r\nconst DoctorCard = ({ doctor }) => {\r\n  const [avatar, setAvatar] = useState('');\r\n  const [selectedAvatar, setSelectedAvatar] = useState('');\r\n  const [schedules, setSchedules] = useState([\r\n    {\r\n      doctorUserId: '',\r\n      clinicId: '',\r\n      clinicName: '',\r\n      clinicAddress: '',\r\n      clinicNumber: '',\r\n      scheduleDay: '',\r\n      slots: '',\r\n    }\r\n  ]);\r\n  \r\n\r\n  const setDisplayedAvatars = (avatar) => {\r\n    const avatarImports = {\r\n    'avatar01': avatar01,\r\n    'avatar02': avatar02,\r\n    'avatar03': avatar03,\r\n    'avatar04': avatar04,\r\n    'avatar05': avatar05,\r\n    'avatar06': avatar06,\r\n    'avatar07': avatar07,\r\n    'avatar08': avatar08,\r\n    'avatar09': avatar09,\r\n    'avatar10': avatar10,\r\n    'avatar11': avatar11,\r\n    'avatar12': avatar12,\r\n    'avatar13': avatar13,\r\n    'avatar14': avatar14,\r\n  };\r\n\r\n    // Set selectedAvatar using the corresponding import\r\n    setSelectedAvatar(avatarImports[avatar] || avatar00);\r\n  };\r\n\r\n\r\n  useEffect(() => {\r\n    // Set displayed avatars based on the doctor's avatar value\r\n    setDisplayedAvatars(doctor.avatar);\r\n  }, [doctor.avatar]);\r\n\r\n\r\n  useEffect(() => {\r\n    const fetchSchedules = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:8080/schedules');\r\n        \r\n        if (!response.ok) {\r\n          throw new Error('Failed to fetch schedules');\r\n        }\r\n\r\n        const schedulesData = await response.json();\r\n        const formattedSchedules = schedulesData.map((schedulesData) => ({\r\n          doctorUserId: schedulesData.doctorUserId,\r\n          clinicId: schedulesData.clinicId,\r\n          clinicName: schedulesData.clinic.name ,\r\n          clinicAddress: schedulesData.clinic.address,\r\n          clinicNumber: schedulesData.clinic.officeNumber,\r\n          scheduleDay: schedulesData.scheduleDay,\r\n          slots: schedulesData.slots,\r\n        }));\r\n\r\n        setSchedules(formattedSchedules);\r\n\r\n      } catch (error) {\r\n        console.error('Error fetching schedules:', error.message);\r\n      }\r\n    };\r\n\r\n    fetchSchedules();\r\n  }, []);\r\n\r\n  const [uniqueClinics, setUniqueClinics] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const getDoctorClinics = () => {\r\n      // Filter schedules based on the doctorId\r\n      const doctorSchedules = schedules.filter((schedule) => schedule.doctorUserId === doctor.doctorId);\r\n\r\n      // Extract unique clinic IDs\r\n      const uniqueClinicIds = Array.from(new Set(doctorSchedules.map((schedule) => schedule.clinicId)));\r\n\r\n      // Create an array of objects for each unique clinic ID\r\n      const uniqueClinicInfo = uniqueClinicIds.map((clinicId) => {\r\n        const clinicSchedules = doctorSchedules.filter((schedule) => schedule.clinicId === clinicId);\r\n        const clinicName = clinicSchedules[0]?.clinicName || ''; // Get the clinic name from the first schedule\r\n        const clinicAddress = clinicSchedules[0]?.clinicAddress || '';\r\n        const clinicNumber = clinicSchedules[0]?.clinicNumber || '';\r\n        const scheduleDays = Array.from(new Set(clinicSchedules.map((schedule) => schedule.scheduleDay)));\r\n\r\n        return {\r\n          clinicId,\r\n          clinicName,\r\n          clinicAddress,\r\n          clinicNumber,\r\n          scheduleDays,\r\n        };\r\n      });\r\n\r\n      // Set the extracted information in the component state\r\n      setUniqueClinics(uniqueClinicInfo);\r\n    };\r\n\r\n    getDoctorClinics();\r\n  }, [doctor, schedules]); \r\n\r\n  const handleGoToAppointment = async () => {\r\n    window.location.href = `/setappointment/${doctor.doctorId}`;\r\n  };\r\n  return (\r\n    <div className=\"doctor-card\">\r\n      <div className=\"doctor-info\">\r\n        <div style={{ display: 'flex', alignItems: 'center', height: '110px' }}>\r\n          {selectedAvatar && (\r\n            <img\r\n              src={selectedAvatar}\r\n              alt=\"Selected Avatar\"\r\n              style={{ width: '90px', height: 'auto', borderRadius: '50%', marginRight: '10px' }}\r\n            />\r\n          )}\r\n          <div>\r\n            <h2 style={{ lineHeight: 1, marginBottom: '5px', marginTop: '5px'}}>{doctor.firstName}</h2>\r\n            <h2 style={{ lineHeight: 1}}>{doctor.lastName}</h2>\r\n          </div>\r\n        </div>\r\n          <p style={{ margin: 0 }}>Contact Number: {doctor.contactNumber}</p>\r\n          <p style={{ margin: 0 }}>Specialization: {doctor.specialization}</p>\r\n          <p style={{ margin: 0 }}>Credentials: {doctor.credentials}</p>\r\n          <div className=\"doctor-card-clinic\">\r\n          <h4>Clinics</h4>\r\n              {uniqueClinics.map((clinic) => (\r\n              <ul key={clinic.clinicId} style={{ borderRadius: '8px', backgroundColor: '#BDEBFF', padding: '0px', marginBottom: '18px' }}>\r\n                <p style={{ margin: 0, marginLeft: 10}}>Clinic: {clinic.clinicName}</p>\r\n                <p style={{ margin: 0, marginLeft: 10}}>Address: {clinic.clinicAddress}</p>\r\n                <p style={{ margin: 0, marginLeft: 10}}>Schedule Day/s: {clinic.scheduleDays.join(', ')}</p>\r\n              </ul>\r\n              \r\n              ))}\r\n          </div>\r\n          <div style={{ display: 'flex', justifyContent: 'center', marginTop: '10px' }}>\r\n          \r\n    <button\r\n      style={{ padding: 5, borderRadius: 0, width: '250px', alignItems: 'center' }}\r\n      onClick={handleGoToAppointment}\r\n    >\r\n      Set Appointment\r\n    </button>\r\n  </div>\r\n      </div>\r\n  \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DoctorCard;","D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\components\\Popup.jsx",[],[],"D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\pages\\DoctorPages\\DoctorProfile.jsx",["242","243"],[],"import React, { useEffect, useState } from 'react';\r\nimport \"../../styles/Profile.css\";\r\nimport DoctorNavbar from '../../components/DoctorNavbar';\r\nimport DoctorFooter from '../../components/DoctorFooter';\r\nimport { Calendar, dateFnsLocalizer } from 'react-big-calendar';\r\nimport format from 'date-fns/format';\r\nimport parse from 'date-fns/parse';\r\nimport startOfWeek from 'date-fns/startOfWeek';\r\nimport getDay from 'date-fns/getDay';\r\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\r\nimport { Link } from 'react-router-dom';\r\nimport avatar00 from '../../images/defaultIcon.png';\r\nimport avatar01 from '../../assets/DoctorIcons/Icon01.png';\r\nimport avatar02 from '../../assets/DoctorIcons/Icon02.png';\r\nimport avatar03 from '../../assets/DoctorIcons/Icon03.png';\r\nimport avatar04 from '../../assets/DoctorIcons/Icon04.png';\r\nimport avatar05 from '../../assets/DoctorIcons/Icon05.png';\r\nimport avatar06 from '../../assets/DoctorIcons/Icon06.png';\r\nimport avatar07 from '../../assets/DoctorIcons/Icon07.png';\r\nimport avatar08 from '../../assets/DoctorIcons/Icon08.png';\r\nimport avatar09 from '../../assets/DoctorIcons/Icon09.png';\r\nimport avatar10 from '../../assets/DoctorIcons/Icon10.png';\r\nimport avatar11 from '../../assets/DoctorIcons/Icon11.png';\r\nimport avatar12 from '../../assets/DoctorIcons/Icon12.png';\r\nimport avatar13 from '../../assets/DoctorIcons/Icon13.png';\r\nimport avatar14 from '../../assets/DoctorIcons/Icon14.png';\r\nimport HomeNavbar from '../../components/HomeNavbar';\r\nimport HomeFooter from '../../components/HomeFooter';\r\n\r\n\r\nconst DoctorProfile = () => {\r\n  const [avatar, setAvatar] = useState('');\r\n  const [selectedAvatar, setSelectedAvatar] = useState('');\r\n  const [user, setUser] = useState(null);\r\n  const [isError, setIsError] = useState(false);\r\n  const [doctorUserId, setDoctorUserId] = useState('');\r\n  const [appointments, setAppointments] = useState([\r\n    {\r\n      title: '',\r\n      start: new Date(),\r\n      end: new Date(),  // 5:00 PM\r\n      appointmentId: '',\r\n      appointmentStatus: ''\r\n    },\r\n  ]);\r\n  const [isDoctorLoggedIn, setIsDoctorLoggedIn] = useState('');\r\n\r\n  useEffect(() => {\r\n    fetchUser();\r\n  }, []);\r\n\r\n  const fetchUser = async () => {\r\n    try {\r\n      const response = await fetch(\"http://localhost:8080/doctorprofile\");\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setUser(data);\r\n        setAvatar(data.user.avatar);\r\n        setIsDoctorLoggedIn(true);\r\n\r\n      } else {\r\n        setIsError(true);\r\n        setIsDoctorLoggedIn(false);\r\n\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching user:', error);\r\n      setIsError(true);\r\n      setIsDoctorLoggedIn(false);\r\n\r\n    }\r\n  };\r\n\r\n\r\n  const setDisplayedAvatars = (avatar) => {\r\n    const avatarImports = {\r\n      'avatar01': avatar01,\r\n      'avatar02': avatar02,\r\n      'avatar03': avatar03,\r\n      'avatar04': avatar04,\r\n      'avatar05': avatar05,\r\n      'avatar06': avatar06,\r\n      'avatar07': avatar07,\r\n      'avatar08': avatar08,\r\n      'avatar09': avatar09,\r\n      'avatar10': avatar10,\r\n      'avatar11': avatar11,\r\n      'avatar12': avatar12,\r\n      'avatar13': avatar13,\r\n      'avatar14': avatar14,\r\n    };\r\n\r\n    // Set selectedAvatar using the corresponding import\r\n    setSelectedAvatar(avatarImports[avatar] || avatar00);\r\n  };\r\n  useEffect(() => {\r\n    // Replace 'http://localhost:8080' with your actual API URL\r\n    fetch('http://localhost:8080/checkLoggedInDoctor')\r\n      .then((response) => {\r\n        if (response.ok) {\r\n          return response.json();\r\n        }\r\n        throw new Error('Network response was not ok');\r\n      })\r\n      .then((data) => {\r\n        setDoctorUserId(data);\r\n        // Once you have the patientUserId, make another request to get appointments\r\n        fetch(`http://localhost:8080/docappointments?doctorUserId=${data}`)\r\n          .then((appointmentsResponse) => {\r\n            if (appointmentsResponse.ok) {\r\n              return appointmentsResponse.json();\r\n            }\r\n            throw new Error('Network response was not ok');\r\n          })\r\n          .then((appointmentsData) => {\r\n            const formattedAppointments = appointmentsData.map((appointment) => {\r\n              // Extract date and time components\r\n              const [year, month, day] = appointment.scheduleDate.split('-').map(Number);\r\n              const [hours, minutes] = appointment.startTime.split(':').map(Number);\r\n              const [hours2, minutes2] = appointment.endTime.split(':').map(Number);\r\n\r\n              // Create Date objects for start and end times\r\n              const startDate = new Date(year, month - 1, day, hours, minutes);\r\n              const endDate = new Date(year, month - 1, day, hours2, minutes2);\r\n\r\n              // Create an appointment object\r\n              return {\r\n                title: appointment.patientName,\r\n                start: startDate,\r\n                end: endDate,\r\n                appointmentId: appointment.transactionNo,\r\n                appointmentStatus: appointment.status\r\n              };\r\n            });\r\n\r\n            setAppointments(formattedAppointments);\r\n          })\r\n          .catch((error) => {\r\n            // Handle errors\r\n            console.error(error);\r\n          });\r\n\r\n      })\r\n      .catch((error) => {\r\n        setIsError(true);\r\n        console.error('Error:', error);\r\n      });\r\n  }, []);\r\n\r\n  const locales = {\r\n    \"en-US\": require(\"date-fns/locale/en-US\")\r\n  }\r\n\r\n  const localizer = dateFnsLocalizer({\r\n    format,\r\n    parse,\r\n    startOfWeek,\r\n    getDay,\r\n    locales\r\n  })\r\n\r\n  const handleCancel = async (appointmentId) => {\r\n    try {\r\n      const response = await fetch(`http://localhost:8080/appointmentChange/${appointmentId}?newStatus=Cancelled`, {\r\n        method: 'PUT',\r\n      });\r\n\r\n      if (response.ok) {\r\n        // Handle success if needed\r\n        console.log('Appointment cancelled successfully');\r\n        window.location.reload();\r\n      } else {\r\n        setIsError(true);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error cancelling appointment:', error);\r\n      setIsError(true);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    setDisplayedAvatars(avatar);\r\n\r\n  }, [avatar]);  // Add the dependency array to avoid unnecessary re-renders\r\n  if (!isDoctorLoggedIn) {\r\n    return (\r\n      <div>\r\n        <HomeNavbar />\r\n        <div style={{ textAlign: 'center', marginTop: '50px' }}>\r\n          <h1>No doctor is logged in.</h1>\r\n          <Link to=\"/doclogin\"><button>Login</button></Link>\r\n        </div>\r\n        <HomeFooter />\r\n      </div>\r\n\r\n    );\r\n  }\r\n  const handleLinkClick = (event, targetId) => {\r\n    event.preventDefault();\r\n\r\n    const targetElement = document.getElementById(targetId);\r\n\r\n    if (targetElement) {\r\n      targetElement.scrollIntoView({ behavior: 'smooth' });\r\n\r\n      // Add the 'active' class to trigger the fadeIn animation\r\n      targetElement.classList.add('active');\r\n\r\n      // Remove the 'active' class after the animation completes\r\n      setTimeout(() => {\r\n        targetElement.classList.remove('active');\r\n      }, 500); // Adjust the timeout based on the animation duration\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <div className=\"profile-container\" id=\"container\">\r\n      <DoctorNavbar />\r\n      <div className=\"doctorprofilecontainer\" style={{marginTop: \"1%\", overflow: \"hidden\", height: \"100%\"}}>\r\n        {user ? (\r\n          <div className=\"parentelement\">\r\n            <div className=\"columns\" id=\"columnprofileicon\" style={{marginTop: '1%'}}>\r\n              <div className=\"backgroundpop\"></div>\r\n              <div className=\"doctorprofileicon\">\r\n                {selectedAvatar && <img src={selectedAvatar} alt=\"Selected Avatar\" />}\r\n              </div>\r\n              <div className=\"doctorprofilename\">\r\n                <p className=\"pn\">\r\n                  <b>{user.user.firstName} {user.user.middleName} {user.user.lastName}</b>\r\n                </p>\r\n              </div>\r\n              <div className=\"doctorprofiletitle\">\r\n                <p className=\"pt\">\r\n                  <i>{user.credentials}</i>\r\n                </p>\r\n              </div>\r\n              <div className=\"listofdocprofilecontent\">\r\n                <ul className=\"profile-list\">\r\n                <li><a href=\"#accountDetails\" onClick={(e) => handleLinkClick(e, 'columnprofileinformation')}>View Account</a></li>\r\n                <li><a href=\"#personalDetails\" onClick={(e) => handleLinkClick(e, 'personalDetails')}>View Personal Information</a></li>\r\n                <li><a href=\"#credDetails\" onClick={(e) => handleLinkClick(e, 'credDetails')}>View Credentials</a></li>\r\n                <li><a href=\"#secDetails\" onClick={(e) => handleLinkClick(e, 'secDetails')}>View Secretary</a></li>\r\n                </ul>\r\n              </div>\r\n            </div>\r\n            <div className=\"columns\" id=\"columnprofileinformation\" style={{marginTop: '0%', overflowY: 'auto', maxHeight: '900px' }} >\r\n              <div className=\"doctorprofilecontent\">\r\n                <div className=\"mydoctorprofileaccount\" id=\"accountDetails\">\r\n                  <div className=\"backgroundpop\">\r\n                    <div className=\"doctorprofilecontenttitles\" >\r\n                      <p><b>ACCOUNT</b></p>\r\n                    </div>\r\n                    <div className=\"contentcolumn\">\r\n                      <div className=\"contentcolumn1\">\r\n                        <div className=\"contentrow\">\r\n                          <div className=\"dataname\">\r\n                            <p>Username: </p>\r\n                          </div>\r\n                          <div className=\"datainfo\">\r\n                            {user.user.username}\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"contentcolumn2\">\r\n                        <div className=\"contentrow\">\r\n                          <div className=\"dataname\">\r\n                            <p>Email: </p>\r\n                          </div>\r\n                          <div className=\"datainfo\">\r\n                            {user.user.email}\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"mydoctorprofilepersonal\"  id=\"personalDetails\">\r\n                  <div className=\"backgroundpop\">\r\n                    <div className=\"doctorprofilecontenttitles \">\r\n                      <p><b>PERSONAL INFORMATION</b></p>\r\n                    </div>\r\n                    <div className=\"contentcolumn\">\r\n                      <div className=\"contentcolumn1\">\r\n                        <div className=\"contentrow\">\r\n                          <div className=\"dataname\">\r\n                            <p>Sex: </p>\r\n                          </div>\r\n                          <div className=\"datainfo\">\r\n                            {user.user.sex}\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"contentcolumn2\">\r\n                        <div className=\"contentrow\">\r\n                          <div className=\"dataname\">\r\n                            <p>Age: </p>\r\n                          </div>\r\n                          <div className=\"datainfo\">\r\n                            {user.user.age}\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"contentcolumn2\">\r\n                        <div className=\"contentrow\">\r\n                          <div className=\"dataname\">\r\n                            <p>Birthday: </p>\r\n                          </div>\r\n                          <div className=\"datainfo\">\r\n                            {user.user.birthday}\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"contentcolumn2\">\r\n                        <div className=\"contentrow\">\r\n                          <div className=\"dataname\">\r\n                            <p>Contact Number: </p>\r\n                          </div>\r\n                          <div className=\"datainfo\">\r\n                            {user.user.contactNumber}\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"contentcolumn2\">\r\n                        <div className=\"contentrow\">\r\n                          <div className=\"dataname\">\r\n                            <p>Address: </p>\r\n                          </div>\r\n                          <div className=\"datainfo\">\r\n                            {user.user.address}\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"mydoctorprofilecredentials\"  id=\"credDetails\">\r\n                  <div className=\"backgroundpop\">\r\n                    <div className=\"doctorprofilecontenttitles\">\r\n                      <p><b>CREDENTIALS</b></p>\r\n                    </div>\r\n                    <div className=\"contentcolumn\">\r\n                      <div className=\"contentcolumn1\">\r\n                        <div className=\"contentrow\">\r\n                          <div className=\"dataname\">\r\n                            <p>Credentials: </p>\r\n                          </div>\r\n                          <div className=\"datainfo\">\r\n                            {user.credentials}\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"contentcolumn2\">\r\n                        <div className=\"contentrow\">\r\n                          <div className=\"dataname\">\r\n                            <p>Specialization: </p>\r\n                          </div>\r\n                          <div className=\"datainfo\">\r\n                            {user.specialization}\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"contentcolumn2\">\r\n                        <div className=\"contentrow\">\r\n                          <div className=\"dataname\">\r\n                            <p>PRC ID No: </p>\r\n                          </div>\r\n                          <div className=\"datainfo\">\r\n                            {user.prcId}\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"mydoctorprofilesecretary\"  id=\"secDetails\">\r\n                  <div className=\"backgroundpop\">\r\n                    <div className=\"doctorprofilecontenttitles\">\r\n                      <p><b>SECRETARY</b></p>\r\n                    </div>\r\n                    <div className=\"contentcolumn\">\r\n                      {user.secretary ? (\r\n                        <>\r\n                          <div className=\"contentcolumn1\">\r\n                            <div className=\"contentrow\">\r\n                              <div className=\"dataname\">\r\n                                <p>Name: </p>\r\n                              </div>\r\n                              <div className=\"datainfo\">\r\n                                {user.secretary.split(' - ')[0].replace('Secretary - ', '')}\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                          <div className=\"contentcolumn2\">\r\n                            <div className=\"contentrow\">\r\n                              <div className=\"dataname\">\r\n                                <p>Contact Number: </p>\r\n                              </div>\r\n                              <div className=\"datainfo\">\r\n                                {user.secretary.split(' - ')[1]}\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                          <div className=\"contentcolumn2\">\r\n                            <div className=\"contentrow\">\r\n                              <div className=\"dataname\">\r\n                                <p>Email: </p>\r\n                              </div>\r\n                              <div className=\"datainfo\">\r\n                                {user.secretary.split(' - ')[2]}\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                          <div className=\"contentcolumn2\">\r\n                            <div className=\"contentrow\">\r\n                              <div className=\"dataname\">\r\n                                <p>Clinic Information: </p>\r\n                              </div>\r\n                              <div className=\"datainfo\">\r\n                                {user.secretary.split(' - ')[3]}\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        </>\r\n                      ) : (\r\n                        <p>No secretary information available</p>\r\n                      )}\r\n                    </div>\r\n\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"columns\" id=\"columnprofileappointments\" style={{\r\n                    marginTop: \"1%\",\r\n                    position: \"sticky\", /* Set the position to sticky */\r\n                    top: \"20px\", /* Adjust the top value as needed */\r\n                    zIndex: \"100\", /* Set a z-index to control stacking with other elements */\r\n                    backgroundColor: \"white\", /* Background color if needed */\r\n                  }}>\r\n              <div className=\"futureappointments\">\r\n                <div className=\"doctorappoinmentcard\">\r\n                  <div className=\"backgroundpop\">\r\n                    <div className=\"titleappointment\">\r\n                      <p><b>CALENDAR</b></p>\r\n                    </div>\r\n                    <div className=\"doctorcalendar\">\r\n                      <Calendar\r\n                        localizer={localizer}\r\n                        events={appointments}\r\n                        startAccessor=\"start\"\r\n                        endAccessor=\"end\"\r\n                        style={{ height: 300, width: \"84%\" }}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          isError ? (\r\n            <p>Error fetching user profile</p>\r\n          ) : (\r\n            <p>Loading user profile...</p>\r\n          )\r\n        )}\r\n      </div>\r\n      <DoctorFooter />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DoctorProfile;","D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\pages\\DoctorPages\\DoctorSearch.jsx",["244","245"],[],"import React, { useState, useEffect } from 'react';\r\nimport \"../../styles/Search.css\";\r\nimport PatientNavBar from '../../components/PatientNavBar';\r\nimport PatientFooter from '../../components/PatientFooter';\r\nimport DoctorCard from '../../components/Doctors'; // Import the DoctorCard component\r\n\r\n\r\nconst DoctorSearch = () => {\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [doctors, setDoctors] = useState([\r\n    {\r\n      doctorId: '',\r\n      firstName: '',\r\n      lastName: '',\r\n      contactNumber: '',\r\n      specialization: '',\r\n      credentials: '',\r\n      avatar:'',\r\n      clinicName:'',\r\n    }\r\n  ]);\r\n  const [schedules, setSchedules] = useState([\r\n    {\r\n      doctorUserId: '',\r\n      clinicName: ''\r\n    }\r\n  ]);\r\n  const [searchDoctors, setSearchDoctors] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchSchedules = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:8080/schedules');\r\n        \r\n        if (!response.ok) {\r\n          throw new Error('Failed to fetch schedules');\r\n        }\r\n\r\n        const schedulesData = await response.json();\r\n        const formattedSchedules = schedulesData.map((schedulesData) => ({\r\n          doctorUserId: schedulesData.doctorUserId,\r\n          clinicName: schedulesData.clinic.name ,\r\n        }));\r\n\r\n        setSchedules(formattedSchedules);\r\n      } catch (error) {\r\n        console.error('Error fetching schedules:', error.message);\r\n      }\r\n    };\r\n\r\n    fetchSchedules();\r\n  }, [schedules]);\r\n\r\n  useEffect(() => {\r\n    const fetchAllDoctors = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:8080/allusers');\r\n\r\n        if (response.ok) {\r\n          const data = await response.json();\r\n          const formattedDoctors = data.map((doctorData) => {\r\n            const doctorId = doctorData.userId;\r\n          \r\n            // Find the corresponding schedules for this doctorId\r\n            const matchingSchedules = schedules.filter((schedule) => schedule.doctorUserId === doctorId);\r\n          \r\n            // Extract unique clinic names from the matching schedules\r\n            const uniqueClinicNames = Array.from(new Set(matchingSchedules.map((schedule) => schedule.clinicName)));\r\n          \r\n            // Set the clinicName property in the formatted doctor object\r\n            const formattedDoctor = {\r\n              doctorId: doctorId,\r\n              firstName: `Dr. ${doctorData.user.firstName}`,\r\n              lastName: doctorData.user.lastName,\r\n              contactNumber: doctorData.user.contactNumber,\r\n              specialization: doctorData.specialization,\r\n              credentials: doctorData.credentials,\r\n              avatar: doctorData.user.avatar,\r\n              clinicName: uniqueClinicNames.length > 0 ? uniqueClinicNames : [],\r\n            };\r\n          \r\n            return formattedDoctor;\r\n          });\r\n\r\n          setDoctors(formattedDoctors);\r\n          console.log(formattedDoctors);\r\n          setSearchDoctors(formattedDoctors);\r\n        } else {\r\n          setError('Failed to fetch doctors');\r\n        }\r\n      } catch (error) {\r\n        setError('Error while fetching doctors');\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchAllDoctors();\r\n  }, []);\r\n\r\n \r\n\r\n  if (isLoading) {\r\n    return <p>Loading...</p>;\r\n  }\r\n\r\n  if (error) {\r\n    return <p>Error: {error}</p>;\r\n  }\r\n\r\n\r\n\r\n  const handleSearchChange = (e) => {\r\n    const inputValue = e.target.value.toLowerCase();\r\n    if (inputValue === \"\") {\r\n  setSearchDoctors(doctors);\r\n} else {\r\n  const normalizedInput = inputValue.toLowerCase();\r\n  const filteredDoctors = doctors.filter((doctor) => {\r\n    const fullName = `${doctor.firstName} ${doctor.lastName}`.toLowerCase();\r\n    const specialization = doctor.specialization.toLowerCase();\r\n    const clinicNames = doctor.clinicName.map(name => name.toLowerCase()).join(' ');\r\n\r\n    return (\r\n      fullName.includes(normalizedInput) ||\r\n      specialization.includes(normalizedInput) ||\r\n      clinicNames.includes(normalizedInput)\r\n    );\r\n  });\r\n\r\n  setSearchDoctors(filteredDoctors);\r\n  console.log(searchDoctors);\r\n}\r\n\r\n  \r\n    setSearchQuery(inputValue);\r\n\r\n  };\r\n  \r\n  \r\n  return (\r\n    <div className='search-container' id=\"search-container\" style={{overflow: \"hidden\"}}>\r\n      <PatientNavBar />\r\n      <div className=\"info-container\" style={{overflow: \"hidden\"}}>\r\n        <div className=\"search-box\" style={{ position: 'sticky', marginTop: \"5%\" }}>\r\n        <input\r\n          type=\"text\"\r\n          className=\"search-input\"\r\n          placeholder=\"Find the doctor you need by name, specialization, clinic..\"\r\n          value={searchQuery}\r\n          onChange={handleSearchChange}\r\n        />\r\n        {/* Render the filtered list or handle it in your main component */}\r\n        <button className=\"search-button\" >\r\n          Search\r\n        </button>\r\n      </div>\r\n        <br />\r\n        <div style={{ display: \"block\", width: \"90%\", marginLeft: \"8%\", overflowX: \"hidden\", width: \"80vw\"}}>\r\n          <div className=\"doctor-grid\">\r\n            {searchDoctors.map((doctor, index) => (\r\n              <DoctorCard key={index} doctor={doctor} />\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <PatientFooter />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DoctorSearch;","D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\pages\\DoctorPages\\DoctorLogin.jsx",["246"],[],"import React, { useState, useEffect } from 'react';\nimport \"../../styles/Login.css\";\nimport HomeNavbar from '../../components/HomeNavbar';\nimport HomeFooter from '../../components/HomeFooter';\n\nfunction DoctorLogin() {\n    const h1Style = { color: '#0094d4' };\n    const overlayH1Style = { color: '#ffffff' };\n    \n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n    const [loginError, setLoginError] = useState('');\n\n  useEffect(() => {\n    // Check if the user is already logged in (you can implement your own logic)\n    const isLoggedIn = false; // Replace with your actual login check logic\n\n    if (isLoggedIn) {\n      // Redirect to the profile page if already logged in\n      window.location.href = '/profile';\n    }\n  }, []);\n\n  const handleLogin = async () => {\n    try {\n      const url = new URL('http://localhost:8080/doctorlogin');\n      url.searchParams.append('username', username);\n      url.searchParams.append('password', password);\n\n      const response = await fetch(url, {\n        method: 'POST',\n      });\n\n      if (response.ok) {\n        // Login successful\n        setLoginError('');\n        console.log('Login successful');\n        window.location.href = '/docprofile'; // Redirect to the profile page\n      } else {\n        // Login failed\n        const errorMessage = await response.text();\n        setLoginError(errorMessage);\n        console.log('Login failed:', errorMessage);\n      }\n    } catch (error) {\n      console.error('Error during login:', error);\n      setLoginError('An error occurred during login');\n    }\n  };\n\n  const handleToSignup = () => {\n    window.location.href = '/docreg';\n  };\n\n\n\n    return (\n      <div>\n      <div className=\"container\" id=\"container\">\n        <HomeNavbar />\n        <div className=\"form-container sign-in-container\">\n        <form action=\"#\" id=\"signin-form\">\n          <h1 style={{ color: '#0094d4' }}>Doctor Login</h1>\n          <div className=\"infield\">\n            <input\n              type=\"text\"\n              placeholder=\"Username\"\n              value={username}\n              onChange={(e) => setUsername(e.target.value)}\n            />\n          </div>\n          <div className=\"infield\">\n            <input\n              type=\"password\"\n              placeholder=\"Password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n            />\n          </div>\n          {/* <a href=\"#\" class=\"forgot\">Forgot your password?</a> */}\n          <button type=\"button\" onClick={handleLogin}>\n            Login\n          </button>\n          {loginError && <p className=\"verification-message\">{loginError}</p>}\n        </form>\n      </div>\n        <div className=\"overlay-container\" id=\"overlayCon\">\n              <div className=\"overlay\">\n                  <div className=\"overlay-panel overlay-right\">\n                      <h1 style={overlayH1Style}>Hello there!</h1>\n                      <p>Register a new doctor? <br />Enter your details now!</p>\n                      <button onClick={handleToSignup}>Register</button>\n                  </div>\n              </div>\n          </div>\n      </div>\n      <HomeFooter />\n      </div>\n  );\n}\n\nexport default DoctorLogin;","D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\pages\\DoctorPages\\DoctorRegister.jsx",["247","248","249","250","251"],[],"import React, { useState, useEffect } from 'react';\nimport \"../../styles/Register.css\";\nimport Popup from '../../components/Popup';\nimport HomeNavbar from '../../components/HomeNavbar';\nimport HomeFooter from '../../components/HomeFooter';\n\nconst DoctorRegister = () => {\n  const [username, setUsername] = useState('');\n  const [firstName, setFirstName] = useState('');\n  const [middleName, setMiddleName] = useState('');\n  const [lastName, setLastName] = useState('');\n  const [age, setAge] = useState('');\n  const [sex, setSex] = useState('');\n  const [birthday, setBirthday] = useState('');\n  const [address, setAddress] = useState('');\n  const [contactNumber, setContactNumber] = useState('');\n  const [email, setEmail] = useState('');\n  const [prcId, setPrcId] = useState('');\n  const [specialization, setSpecialization] = useState('');\n  const [credentials, setCredentials] = useState('');\n  const [approvalStatus] = useState('not yet verified');\n  const [password, setPassword] = useState('');\n  const [retypePassword, setRetypePassword] = useState('');\n  const [signupMessage, setSignupMessage] = useState('');\n  const [otp, setOtp] = useState('');\n  const [message, setMessage] = useState('');\n  const [userType] = useState('doctor');\n  const [registrationSuccessful, setRegistrationSuccessful] = useState(false);\n  const [doctorUserId, setDoctorUserId] = useState('');\n  \n  const handleSignup = async () => {\n    // Check if any of the fields are empty\n    if (\n      !username ||\n      !firstName ||\n      !lastName ||\n      !age ||\n      !sex ||\n      !birthday ||\n      !address ||\n      !contactNumber ||\n      !email ||\n      !prcId ||\n      !password ||\n      !retypePassword\n    ) {\n      setSignupMessage('Please fill in all required fields.');\n      return;\n    }\n    if (password !== retypePassword) {\n      setSignupMessage('Passwords do not match.');\n      return;\n    }\n\n    // Validate password length\n    if (password.length < 7 || !/\\d/.test(password)) {\n      setSignupMessage('Password should be at least 7 characters long and must contain at least 1 number.');\n      return;\n    }\n\n    const contactNumberRegex = /^\\d{11}$/;\n    if (!contactNumberRegex.test(contactNumber)) {\n      setSignupMessage('Contact number should be exactly 11 digits and contain only numbers (0-9).');\n      return;\n    }\n\n    // Validate email format using regular expression\n    const emailRegex = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/;\n    if (!emailRegex.test(email)) {\n      setSignupMessage('Invalid email format.');\n      return;\n    }\n\n    try {\n      const url = new URL('http://localhost:8080/doctors');\n      const userData = {\n        user: {\n        username,\n        firstName,\n        middleName,\n        lastName,\n        age,\n        sex,\n        birthday,\n        address,\n        contactNumber,\n        email,\n        password,\n        userType\n      },\n        doctor: {\n        prcId,\n        specialization,\n        credentials,\n        approvalStatus\n        }\n      };\n\n\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(userData),\n      });\n\n      if (response.ok) {\n        // Signup successful\n        setSignupMessage('User added successfully');\n        setRegistrationSuccessful(true);\n\n \n      } else {\n        // Signup failed\n        const errorMessage = await response.text();\n        setSignupMessage(`Signup failed`);\n        // Handle the error or display an error message to the user\n      }\n    } catch (error) {\n      console.error('Error during signup:', error);\n      setSignupMessage('Error during signup. Please try again later.');\n      // Handle the error or display an error message to the user\n    }\n  }\n\n  const handleVerification = async () => {\n    try {\n      const response = await fetch(`http://localhost:8080/doctorverify?email=${email}&otp=${otp}`, {\n        method: 'GET',\n      });\n\n      if (response.ok) {\n        const verificationResult = await response.text();\n        setMessage(verificationResult);\n        if (verificationResult === 'Successful verification.') {\n          // Now, get the doctor's user ID\n          const response = await fetch(`http://localhost:8080/getDoctorUserId?username=${username}`);\n          if (response.ok) {\n            const data = await response.json();\n            const doctorUserId = data;\n            window.location.href = `/addclinic/${doctorUserId}`; // Redirect to the /addclinic page with the doctor's user ID\n          } else {\n            setMessage('Doctor not found');\n          }\n        } else {\n          setMessage('Unsuccessful verification.');\n        }\n      } else {\n        setMessage('Unsuccessful verification.');\n      }\n    } catch (error) {\n      setMessage('An error occurred');\n    }\n  };\n  \n  const handleOtpChange = (e) => {\n    const inputOtp = e.target.value;\n    setOtp(inputOtp);\n  };\n\n\n\n  useEffect(() => {\n    calculateAge();\n  }, [birthday]);\n\n  const calculateAge = () => {\n    // Ensure the birthday is not empty\n    if (birthday) {\n      const birthDate = new Date(birthday);\n      const currentDate = new Date();\n\n      let calculatedAge = currentDate.getFullYear() - birthDate.getFullYear();\n\n      // Adjust age if birthday hasn't occurred yet this year\n      if (\n        currentDate.getMonth() < birthDate.getMonth() ||\n        (currentDate.getMonth() === birthDate.getMonth() &&\n          currentDate.getDate() < birthDate.getDate())\n      ) {\n        calculatedAge--;\n      }\n\n      setAge(calculatedAge);\n    }\n  };\n\n  const handleClick = () => {\n    if (!contactNumber.startsWith('+63 ')) {\n      setContactNumber('+63 ');\n    }\n  };\n\n  const handleChange = (e) => {\n    setContactNumber(e.target.value);\n  };\n\n  return (\n    <div>\n    <div className=\"reg-container\" id=\"reg-container\">\n      <HomeNavbar/>\n    <div className=\"register\">\n      <h1 style={{ color: '#0094d4' }}>Doctor Register</h1>\n      <form action=\"#\" id=\"register-form\">\n        <div className=\"reg-row\">\n          <div className=\"reg-infield\">\n            <input \n              type=\"text\"\n              id=\"username\"\n              placeholder=\"*Username\"\n              name=\"username\"\n              value={username}\n              onChange={(e) => setUsername(e.target.value)}\n            style={{ display: 'flex', flexDirection: 'row', justifyContent: 'space-between', width: '690px' }} />\n          </div>\n        </div>\n        <div className=\"reg-row\">\n          <div className=\"reg-infield\">\n            <input type=\"text\"\n              id=\"lastName\"\n              placeholder=\"*Last Name\"\n              name=\"lastName\"\n              value={lastName}\n              onChange={(e) => setLastName(e.target.value)}/>\n          </div>\n          <div className=\"reg-infield\">\n            <input  type=\"text\"\n              id=\"firstName\"\n              placeholder=\"*First Name\"\n              name=\"firstName\"\n              value={firstName}\n              onChange={(e) => setFirstName(e.target.value)} />\n          </div>\n          <div className=\"reg-infield\">\n            <input type=\"text\"\n              id=\"middleName\"\n              placeholder=\"Middle Name\"\n              name=\"middleName\"\n              value={middleName}\n              onChange={(e) => setMiddleName(e.target.value)} />\n          </div>\n        </div>\n          <div className=\"reg-row\">\n          <div className=\"reg-infield\" style={{ width: \"50px\", marginRight: \"-10\"}}> \n              <p style={{margin: \"0\", padding: \"10px 0\", color: \"grey\", fontSize: \"12px\"}}>*Age</p>\n            </div>\n            <div className=\"reg-infield\" style={{ width: \"275px\"}}>\n              <input\n                  readOnly=\"readOnly\"\n                  id=\"age\"\n                  placeholder={age}\n                  name=\"age\"\n                  min=\"1\"\n                  max=\"100\"\n                  value={age}\n                  onChange={(e) => setAge(e.target.value)}\n                />\n            </div>\n            <div className=\"reg-infield\">\n              <select \n                id=\"sex\"\n                placeholder=\"*Sex\"\n                name=\"sex\"\n                value={sex}\n                onChange={(e) => setSex(e.target.value)}>\n                  <option value=\"\" disabled>Sex</option>\n                  <option value=\"Female\">Female</option>\n                  <option value=\"Male\">Male</option>\n                  <option value=\"prefer not to say\">Prefer Not To Say</option>\n              </select>\n              </div>\n          </div>\n          <div className=\"reg-row\">\n            <div className=\"reg-infield\" style={{ width: \"50px\", marginRight: \"-10\"}}> \n              <p style={{margin: \"0\", padding: \"10px 0\", color: \"grey\", fontSize: \"12px\"}}>*Birthdate</p>\n            </div>\n            <div className=\"reg-infield\" style={{ width: \"150px\"}}>\n              <input\n                  type=\"date\"\n                  id=\"birthday\"\n                  name=\"birthday\"\n                  value={birthday}\n                  style={{padding: \"8px 8px\"}}\n                  onChange={(e) => setBirthday(e.target.value)}\n                />\n            </div>\n            <div className=\"reg-infield\" style={{ width: \"500px\"}}>\n              <input\n                  type=\"text\"\n                  id=\"address\"\n                  placeholder=\"*(House/Lot/Unit No., Street, Barangay, City/Town, Province)\"\n                  name=\"address\"\n                  value={address}\n                  onChange={(e) => setAddress(e.target.value)}\n                />\n            </div>\n          </div>\n          <div className=\"reg-row\">\n            <div className=\"reg-infield\">\n            <input\n              type=\"text\"\n              id=\"contactNumber\"\n              placeholder=\"+63 \"\n              name=\"contactNumber\"\n              value={contactNumber}\n              // onClick={handleClick}\n              onChange={handleChange}\n            />\n            </div>\n            <div className=\"reg-infield\">\n              <input\n                  type=\"email\"\n                  placeholder=\"Email\"\n                  id=\"email\"\n                  name=\"email\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                />\n            </div>\n          </div>\n          <div className=\"reg-row\">\n            <div className=\"reg-infield\">\n              <input\n                type=\"text\"\n                placeholder=\"*PRC ID Number\"\n                id=\"prcId\"\n                name=\"prcId\"\n                value={prcId}\n                onChange={(e) => setPrcId(e.target.value)}\n              />\n            </div>\n            <div className=\"reg-infield\">\n              <input\n                type=\"text\"\n                placeholder=\"Specialization\"\n                id=\"specialization\"\n                name=\"specialization\"\n                value={specialization}\n                onChange={(e) => setSpecialization(e.target.value)}\n              />\n            </div>\n          </div>\n          <div className=\"reg-row\">\n          <div className=\"reg-infield\" style={{ width: \"250px\", marginRight: \"-125px\"}}> \n              <p style={{margin: \"0\", padding: \"10px 0\", color: \"grey\", fontSize: \"12px\"}}>*License Number</p>\n            </div>\n            <div className=\"reg-infield\" style={{ width: \"200px\"}}>\n              <input\n                id=\"licenseNumber\"\n                placeholder=\"00000\"\n                name=\"licenseNumber\"\n                // value={licenseNumber}\n                // onChange={(e) => setAge(e.target.value)}\n              />\n            </div>\n            <div className=\"reg-infield\" style={{ width: \"250px\", marginRight: \"-155px\"}}> \n              <p style={{margin: \"0\", padding: \"10px 0\", color: \"grey\", fontSize: \"12px\"}}>*PTR Number</p>\n            </div>\n            <div className=\"reg-infield\" style={{ width: \"230px\"}}>\n              <input\n                id=\"ptrNumber\"\n                placeholder=\"0000000\"\n                name=\"ptrNumber\"\n                // value={ptrNumber}\n                // onChange={(e) => setAge(e.target.value)}\n              />\n            </div>\n          </div>\n          <div className=\"reg-row\">\n          <div className=\"reg-infield\">\n            <input \n              type=\"text\"\n              id=\"credentials\"\n              placeholder=\"Credentials\"\n              name=\"credentials\"\n              value={credentials}\n              onChange={(e) => setCredentials(e.target.value)}\n            style={{ display: 'flex', flexDirection: 'row', justifyContent: 'space-between', width: '690px' }} />\n          </div>\n        </div>\n          <div className=\"reg-row\">\n            <div className=\"reg-infield\">\n              <input\n                type=\"password\"\n                placeholder=\"*Password\"\n                id=\"password\"\n                name=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n              />\n            </div>\n            <div className=\"reg-infield\">\n              <input\n                type=\"password\"\n                placeholder=\"*Re-enter Password\"\n                id=\"retypePassword\"\n                name=\"retypePassword\"\n                value={retypePassword}\n                onChange={(e) => setRetypePassword(e.target.value)}\n              />\n            </div>\n          </div>\n        </form>\n        <button type=\"button\" onClick={handleSignup}>Add Clinic</button>\n        {signupMessage && <p className=\"signup-message\">{signupMessage}</p>}\n        {registrationSuccessful && (\n          <Popup trigger={true}>\n            <form action=\"#\" id=\"signin-form\">\n              <div className=\"infield\">\n                <h1 style={{ textAlign: 'center' }}>Verification</h1>\n                <input\n                  type=\"code\"\n                  placeholder=\"Verification Code\"\n                  id=\"otp\"\n                  value={otp}\n                  onChange={handleOtpChange}\n                />\n              </div>\n              <button type=\"button\" onClick={handleVerification}>Submit Code</button>\n              {message && <p>{message}</p>}\n              <p style={{ color: '#0094d4', marginTop: '0', marginBottom: '0' }}>Did not receive it? <a href='/'>Resend Code</a></p>\n            </form>\n          </Popup>\n          )} \n      </div>\n    </div>\n    <HomeFooter />\n    </div>\n  );\n};\n\nexport default DoctorRegister;","D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\pages\\DoctorPages\\EditDoctorProfile.jsx",["252","253","254","255","256","257","258","259"],[],"import React, { useState, useEffect } from 'react';\r\nimport \"../../styles/Profile.css\";\r\nimport DoctorNavbar from '../../components/DoctorNavbar';\r\nimport DoctorFooter from '../../components/DoctorFooter';\r\nimport Popup from '../../components/Popup';\r\nimport AvatarSelectionPopup from '../../components/AvatarSelection';\r\nimport avatar00 from '../../images/defaultIcon.png';\r\nimport avatar01 from '../../assets/DoctorIcons/Icon01.png';\r\nimport avatar02 from '../../assets/DoctorIcons/Icon02.png';\r\nimport avatar03 from '../../assets/DoctorIcons/Icon03.png';\r\nimport avatar04 from '../../assets/DoctorIcons/Icon04.png';\r\nimport avatar05 from '../../assets/DoctorIcons/Icon05.png';\r\nimport avatar06 from '../../assets/DoctorIcons/Icon06.png';\r\nimport avatar07 from '../../assets/DoctorIcons/Icon07.png';\r\nimport avatar08 from '../../assets/DoctorIcons/Icon08.png';\r\nimport avatar09 from '../../assets/DoctorIcons/Icon09.png';\r\nimport avatar10 from '../../assets/DoctorIcons/Icon10.png';\r\nimport avatar11 from '../../assets/DoctorIcons/Icon11.png';\r\nimport avatar12 from '../../assets/DoctorIcons/Icon12.png';\r\nimport avatar13 from '../../assets/DoctorIcons/Icon13.png';\r\nimport avatar14 from '../../assets/DoctorIcons/Icon14.png';\r\nimport HomeNavbar from '../../components/HomeNavbar';\r\nimport HomeFooter from '../../components/HomeFooter';\r\nimport { Link } from 'react-router-dom';\r\n  \r\nconst EditDoctorProfile = () => {\r\n    const [avatar, setAvatar] = useState('');\r\n    const [selectedAvatar, setSelectedAvatar] = useState('');\r\n    const [isAvatarSelectionOpen, setAvatarSelectionOpen] = useState(false);\r\n    const [user, setUser] = useState(null);\r\n    const [isError, setIsError] = useState(false);\r\n    const [username, setUsername] = useState('');\r\n    const [firstName, setFirstName] = useState('');\r\n    const [middleName, setMiddleName] = useState('');\r\n    const [lastName, setLastName] = useState('');\r\n    const [age, setAge] = useState('');\r\n    const [sex, setSex] = useState('');\r\n    const [birthday, setBirthday] = useState('');\r\n    const [address, setAddress] = useState('');\r\n    const [contactNumber, setContactNumber] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [credentials, setCredentials] = useState('');\r\n    const [specialization, setSpecialization] = useState('');\r\n    const [prcId, setPrcId] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [retypePassword, setRetypePassword] = useState('');\r\n    const [editMessage, setEditMessage] = useState('');\r\n    const [userType] = useState('doctor');\r\n    const [secretary, setSecretary] = useState('');\r\n    const [isDoctorLoggedIn, setIsDoctorLoggedIn] = useState('');\r\n    const [isPopupVisible, setPopupVisibility] = useState(false);\r\n        \r\n    const setDisplayedAvatars = (avatar) => {\r\n        const avatarImports = {\r\n          'avatar01': avatar01,\r\n          'avatar02': avatar02,\r\n          'avatar03': avatar03,\r\n          'avatar04': avatar04,\r\n          'avatar05': avatar05,\r\n          'avatar06': avatar06,\r\n          'avatar07': avatar07,\r\n          'avatar08': avatar08,\r\n          'avatar09': avatar09,\r\n          'avatar10': avatar10,\r\n          'avatar11': avatar11,\r\n          'avatar12': avatar12,\r\n          'avatar13': avatar13,\r\n          'avatar14': avatar14,\r\n        };\r\n    \r\n        // Set selectedAvatar using the corresponding import\r\n        setSelectedAvatar(avatarImports[avatar] || avatar00);\r\n      };\r\n\r\n    const handleAvatarSelection = (selectedAvatar) => {\r\n        setSelectedAvatar(selectedAvatar);\r\n        const match = selectedAvatar.match(/Icon(\\d+)/);\r\n\r\n        if (match) {\r\n            const numericPart = match[1];\r\n            setAvatar(`avatar${numericPart}`);\r\n            \r\n        console.log(`avatar${numericPart}`);\r\n        }\r\n        else {\r\n            setAvatar(`avatar00`);\r\n        }\r\n        \r\n        setAvatarSelectionOpen(false);\r\n      };\r\n\r\n    useEffect(() => {\r\n        fetchUser();\r\n      }, []);\r\n\r\n    const fetchUser = async () => {\r\n        try {\r\n          const response = await fetch(\"http://localhost:8080/doctorprofile\");\r\n          if (response.ok) {\r\n            const data = await response.json();\r\n            setUser(data);\r\n            setUsername(data.user.username);\r\n            setFirstName(data.user.firstName);\r\n            setMiddleName(data.user.middleName);\r\n            setLastName(data.user.lastName);\r\n            setAge(data.user.age);\r\n            setSex(data.user.sex);\r\n            setBirthday(data.user.birthday);\r\n            setAddress(data.user.address);\r\n            setContactNumber(data.user.contactNumber);\r\n            setEmail(data.user.email);\r\n            setCredentials(data.credentials);\r\n            setPrcId(data.prcId);\r\n            setSpecialization(data.specialization);\r\n            setSecretary(data.secretary);\r\n            setAvatar(data.user.avatar);\r\n            setIsDoctorLoggedIn(true);\r\n\r\n          } else {\r\n            setIsError(true);\r\n            setIsDoctorLoggedIn(false);\r\n          }\r\n        } catch (error) {\r\n          console.error('Error fetching user:', error);\r\n          setIsError(true);\r\n        }\r\n    };\r\n\r\n    const handleEdit = async () => {\r\n        // Check if any of the fields are empty\r\n        if (\r\n            !username ||\r\n            !firstName ||\r\n            !lastName ||\r\n            !age ||\r\n            !sex ||\r\n            !birthday ||\r\n            !address ||\r\n            !contactNumber ||\r\n            !email\r\n            ||\r\n            !prcId\r\n        ) {\r\n          setEditMessage('Please fill in all required fields.');\r\n          return;\r\n        }\r\n      \r\n        // Validate email format using regular expression\r\n        const emailRegex = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/;\r\n        if (!emailRegex.test(email)) {\r\n          setEditMessage('Invalid email format.');\r\n          return;\r\n        }\r\n        const validateSecretaryFormat = (secretary) => {\r\n            const secretaryRegex = /^([^ -]+) - (\\d{10}) - (\\S+@\\S+\\.\\S+)$/;\r\n            if (!validateSecretaryFormat(secretary)) {\r\n                // Handle invalid format\r\n                setEditMessage('Invalid secretary format.');              \r\n            } \r\n            return secretaryRegex.test(secretary);\r\n          };\r\n        try {\r\n          const url = new URL('http://localhost:8080/editdoctor');\r\n          const userData = {\r\n            user: {\r\n            username,\r\n            firstName,\r\n            middleName,\r\n            lastName,\r\n            age,\r\n            sex,\r\n            birthday,\r\n            address,\r\n            contactNumber,\r\n            email,\r\n            avatar\r\n          },\r\n            doctor: {\r\n            prcId,\r\n            specialization,\r\n            credentials,\r\n            secretary\r\n            }\r\n          };\r\n      \r\n          const response = await fetch(url, {\r\n            method: 'PUT', // Use PUT method for editing\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(userData),\r\n          });\r\n      \r\n          if (response.ok) {\r\n            // Edit successful\r\n            setEditMessage('User details updated successfully');\r\n            window.location.href = '/docprofile';\r\n\r\n          } else {\r\n            // Edit failed\r\n            const errorMessage = await response.text();\r\n            setEditMessage(errorMessage);\r\n            // Handle the error or display an error message to the user\r\n          }\r\n        } catch (error) {\r\n          console.error('Error during edit:', error);\r\n          setEditMessage('Error during edit. Please try again later.');\r\n          // Handle the error or display an error message to the user\r\n        }\r\n      };\r\n      useEffect(() => {\r\n        setDisplayedAvatars(avatar);\r\n    \r\n      }, [avatar]);  \r\n\r\n      if (!isDoctorLoggedIn) {\r\n        return (\r\n        <div>\r\n          <HomeNavbar/>\r\n          <div style={{ textAlign: 'center', marginTop: '50px' }}>\r\n            <h1>No doctor is logged in.</h1>\r\n            <Link to=\"/doclogin\"><button>Login</button></Link>\r\n          </div>\r\n          <HomeFooter/>\r\n        </div>\r\n          \r\n        );\r\n      }\r\n\r\n      const closePopup = () => {\r\n        // Close the popup\r\n        setPopupVisibility(false);\r\n      };\r\n      \r\n      const handleChangePassword = () => {\r\n        setPopupVisibility(true);\r\n      };\r\n\r\n  return (\r\n    <div className=\"profile-container\" id=\"container\" style={{overflow: \"hidden\"}}>\r\n        <DoctorNavbar />\r\n        <div className=\"editing-container\"> \r\n\r\n        { <Popup trigger={isPopupVisible}>\r\n                  <h3>Please enter your current password:</h3>\r\n                  <div className=\"profile-infield\">\r\n                      <input type=\"text\" placeholder=\"Enter password\" style={{width: \"550px\"}}/>\r\n                  </div>\r\n                  <h3>Please enter your new password: </h3>\r\n                  <div className=\"profile-infield\">\r\n                      <input type=\"text\" placeholder=\"Change Password\" style={{width: \"550px\"}}/>\r\n                  </div>\r\n                  <h3>Please re-enter your new password: </h3>\r\n                  <div className=\"profile-infield\">\r\n                      <input type=\"text\" placeholder=\"Confirm Password Change\" style={{width: \"550px\"}}/>\r\n                  </div>\r\n                  \r\n                <button style={{padding: 5, borderRadius: 0, width: \"48.5%\", textAlign: \"center\", marginTop: \"10px\", height: \"40px\", marginRight: \"10px\"}}>Submit Changes</button>\r\n                <button className='cancel' onClick={closePopup} style={{padding: 5, borderRadius: 0, width: \"48.5%\", textAlign: \"center\", marginTop: \"10px\", height: \"40px\"}}>Discard Changes</button>\r\n              </Popup>\r\n          } \r\n          <div className=\"edit-steps\">\r\n            <div className=\"edit-card\" style={{ marginTop: '-5%' }}>\r\n              <h1>Edit Doctor Profile</h1>\r\n              <div style={{ display: 'flex' }}>\r\n                <div className='container-card' style={{ marginRight: '20px' }}>\r\n                  <b>Profile Picture:</b>\r\n                  <div className=\"avatar-selection\">\r\n                    <div className=\"selected-avatar\" onClick={() => setAvatarSelectionOpen(true)}>\r\n                      {selectedAvatar && <img src={selectedAvatar} alt=\"Selected Avatar\" />}\r\n                      <br />\r\n                      <button type=\"submit\">Change Avatar</button>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div style={{ display: 'flex', flexDirection: 'column' }}>\r\n                  <div style={{display: \"flex\"}}>\r\n                  <div className='container-card' >\r\n                    <b style={{ marginRight: '10px' }}>Username:</b>\r\n                    <div className=\"profile-infield\" style={{width: \"23vw\", marginRight: \"-40px\"}}>\r\n                      <input\r\n                        type=\"text\"\r\n                        id=\"username\"\r\n                        placeholder=\"*Username\"\r\n                        name=\"username\"\r\n                        value={username}\r\n                        onChange={(e) => setUsername(e.target.value)}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div className='container-card' >\r\n                    <b style={{ marginRight: '10px' }}>Email: </b>\r\n                    <div className=\"profile-infield\" style={{width: \"22vw\"}}>\r\n                      <input type=\"text\"\r\n                      id=\"email\"\r\n                      placeholder=\"*Email\"\r\n                      name=\"email\"\r\n                      value={email}\r\n                      onChange={(e) => setEmail(e.target.value)}/>\r\n                    </div>\r\n                  </div>\r\n                  </div>\r\n                  \r\n\r\n                  <div style={{ display: 'flex' }}>\r\n                    <div className='container-card' style={{ marginRight: '-50px' }}>\r\n                      <b>First name:</b>\r\n                      <div className=\"profile-infield\">\r\n                        <input\r\n                          type=\"text\"\r\n                          id=\"firstName\"\r\n                          placeholder=\"*First Name\"\r\n                          name=\"firstName\"\r\n                          value={firstName}\r\n                          onChange={(e) => setFirstName(e.target.value)}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className='container-card' style={{ marginRight: '-50px' }}>\r\n                      <b>Middle name:</b>\r\n                      <div className=\"profile-infield\">\r\n                        <input\r\n                          type=\"text\"\r\n                          id=\"middleName\"\r\n                          placeholder=\"*Middle Name\"\r\n                          name=\"middleName\"\r\n                          value={middleName}\r\n                          onChange={(e) => setMiddleName(e.target.value)}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className='container-card'>\r\n                      <b>Last name:</b>\r\n                      <div className=\"profile-infield\">\r\n                        <input\r\n                          type=\"text\"\r\n                          id=\"lastName\"\r\n                          placeholder=\"*Last Name\"\r\n                          name=\"lastName\"\r\n                          value={lastName}\r\n                          onChange={(e) => setLastName(e.target.value)}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n\r\n                  <div style={{ display: 'flex' }}>\r\n                    <div className='container-card' style={{ marginRight: '-50px' }}>\r\n                          <b>Contact number:</b>\r\n                          <div className=\"profile-infield\">\r\n                              <input type=\"text\"\r\n                              id=\"contactNumber\"\r\n                              placeholder=\"*Contact Number\"\r\n                              name=\"contactNumber\"\r\n                              value={contactNumber}\r\n                              onChange={(e) => setContactNumber(e.target.value)}/>\r\n                          </div>\r\n                      </div>\r\n\r\n                    <div className='container-card' style={{ marginRight: '-50px' }}>\r\n                      <b>Birthday:</b>\r\n                        <div className=\"profile-infield\">\r\n                            <input type=\"text\"\r\n                            id=\"birthday\"\r\n                            placeholder=\"*Birthday\"\r\n                            name=\"birthday\"\r\n                            value={birthday}\r\n                            onChange={(e) => setBirthday(e.target.value)}/>\r\n                        </div>\r\n                      </div>\r\n\r\n                      <div className='container-card'>\r\n                        <b>Age:</b>\r\n                        <div className=\"profile-infield\">\r\n                            <input type=\"text\"\r\n                            id=\"age\"\r\n                            placeholder=\"*Age\"\r\n                            name=\"age\"\r\n                            value={age}\r\n                            onChange={(e) => setAge(e.target.value)}/>\r\n                        </div>\r\n                      </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div style={{display: \"flex\"}}>\r\n                <div className='container-card' style={{marginRight: \"-16px\"}}>\r\n                  <b>Sex:</b>\r\n                    <div className=\"profile-infield\">\r\n                      <input type=\"text\"\r\n                      id=\"sex\"\r\n                      placeholder=\"*Sex\"\r\n                      name=\"sex\"\r\n                      value={sex}\r\n                      onChange={(e) => setSex(e.target.value)}/>\r\n                    </div>\r\n                </div>\r\n                <div className='container-card'>\r\n                        <b>Address:</b>\r\n                        <div className=\"profile-infield\" style={{width: \"18vw\", marginRight: \"-40px\"}}>\r\n                            <input type=\"text\"\r\n                            id=\"address\"\r\n                            placeholder=\"*(House/Lot/Unit No., Street, Barangay, City/Town, Province)\"\r\n                            name=\"address\"\r\n                            value={address}\r\n                            onChange={(e) => setAddress(e.target.value)}/>\r\n                        </div>\r\n                      </div>\r\n                      <div className='container-card'>\r\n                            <b>Secretary: </b>\r\n                            <div className=\"profile-infield\" style={{width: \"25vw\"}}>\r\n                                <input type=\"text\"\r\n                                        id=\"secretary\"\r\n                                        placeholder=\"Secretary Name - Contact Number - Email - Clinic Information\"\r\n                                        name=\"secretary\"\r\n                                        value={secretary}\r\n                                        onChange={(e) => setSecretary(e.target.value)}/>\r\n                            </div>\r\n                        </div>\r\n              </div>\r\n  \r\n              <div style={{display: \"flex\"}}>\r\n              <div className='container-card' style={{marginRight: \"-16px\"}}>\r\n                            <b>PRC ID No: </b>\r\n                            <div className=\"profile-infield\" >\r\n                                <input type=\"text\"\r\n                                        id=\"prcId\"\r\n                                        placeholder=\"Change PRC ID No.\"\r\n                                        name=\"prcId\"\r\n                                        value={prcId}\r\n                                        onChange={(e) => setPrcId(e.target.value)}/>\r\n                            </div>\r\n                        </div>\r\n                        <br />\r\n                        <div className='container-card'>\r\n                            <b>Specialization: </b>\r\n                            <div className=\"profile-infield\" style={{width: \"18vw\", marginRight: \"-40px\"}}>\r\n                                <input type=\"text\"\r\n                                        id=\"specialization\"\r\n                                        placeholder=\"Change Specialization\"\r\n                                        name=\"specialization\"\r\n                                        value={specialization}\r\n                                        onChange={(e) => setSpecialization(e.target.value)}/>\r\n                            </div>\r\n                        </div>\r\n                        <br />\r\n                        <div className='container-card'>\r\n                            <b>Credentials: </b>\r\n                            <div className=\"profile-infield\" style={{width: \"25vw\"}}>\r\n                                <input type=\"text\"\r\n                                        id=\"credentials\"\r\n                                        placeholder=\"Change Credentials\"\r\n                                        name=\"credentials\"\r\n                                        value={credentials}\r\n                                        onChange={(e) => setCredentials(e.target.value)}/>\r\n                            </div>\r\n                        </div>\r\n                        <br />\r\n              </div>\r\n                      <br />\r\n                        <br />\r\n                        <button type=\"button\" onClick={handleEdit} style={{marginLeft: \"18%\", borderRadius: 0, width: \"300px\"}}>Save Changes</button>\r\n                        <button type=\"button\" onClick={handleChangePassword} style={{marginLeft: \"50px\",borderRadius: 0, width: \"300px\", backgroundColor: \"gray\"}}>Change Password</button>\r\n                        {editMessage && <p>{editMessage}</p>}\r\n                        <br />\r\n                        <br />\r\n                        <br />\r\n\r\n                    </div>\r\n            </div>\r\n        </div>\r\n        <DoctorFooter />\r\n        {isAvatarSelectionOpen && (\r\n         <AvatarSelectionPopup\r\n         avatars={[avatar01, avatar02, avatar03, avatar04, avatar05,\r\n           avatar06, avatar07, avatar08, avatar09, avatar10,\r\n           avatar11, avatar12, avatar13, avatar14]}\r\n         selectedAvatar={avatar}\r\n         onSelectAvatar={(selectedAvatar) => handleAvatarSelection(selectedAvatar)}\r\n         onClose={() => setAvatarSelectionOpen(false)}\r\n       />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditDoctorProfile;","D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\pages\\PatientPages\\PatientLogin.jsx",[],[],"D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\pages\\PatientPages\\PatientRegister.jsx",["260","261"],[],"import React, { useState, useEffect } from 'react';\nimport \"../../styles/Register.css\";\nimport Popup from '../../components/Popup';\nimport HomeNavbar from '../../components/HomeNavbar';\nimport HomeFooter from '../../components/HomeFooter';\n\n\nconst PatientRegister = () => {\n  const [username, setUsername] = useState('');\n  const [firstName, setFirstName] = useState('');\n  const [middleName, setMiddleName] = useState('');\n  const [lastName, setLastName] = useState('');\n  const [age, setAge] = useState('');\n  const [sex, setSex] = useState('');\n  const [birthday, setBirthday] = useState('');\n  const [address, setAddress] = useState('');\n  const [contactNumber, setContactNumber] = useState('');\n  const [email, setEmail] = useState('');\n  const [seniorId, setSeniorId] = useState('');\n  const [pwdId, setPwdId] = useState('');\n  const [philhealthId, setPhilhealthId] = useState('');\n  const [hmo, setHmo] = useState('');\n  const [password, setPassword] = useState('');\n  const [retypePassword, setRetypePassword] = useState('');\n  const [signupMessage, setSignupMessage] = useState('');\n  const [otp, setOtp] = useState('');\n  const [message, setMessage] = useState('');\n  const [userType] = useState('patient');\n  const [registrationSuccessful, setRegistrationSuccessful] = useState(false);\n  \n\n\n  const handleSignup = async () => {\n    // Check if any of the fields are empty\n    if (\n      !username ||\n      !firstName ||\n      !lastName ||\n      !age ||\n      !sex ||\n      !birthday ||\n      !address ||\n      !contactNumber ||\n      !email ||\n      !password ||\n      !retypePassword\n    ) {\n      setSignupMessage('Please fill in all required fields.');\n      return;\n    }\n    if (password !== retypePassword) {\n      setSignupMessage('Passwords do not match.');\n      return;\n    }\n\n    // Validate password length\n    if (password.length < 7 || !/\\d/.test(password)) {\n      setSignupMessage('Password should be at least 7 characters long and must contain at least 1 number.');\n      return;\n    }\n\n    const contactNumberRegex = /^\\d{11}$/;\n    if (!contactNumberRegex.test(contactNumber)) {\n      setSignupMessage('Contact number should be exactly 10 digits and contain only numbers (0-9).');\n      return;\n    }\n\n    // Validate email format using regular expression\n    const emailRegex = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/;\n    if (!emailRegex.test(email)) {\n      setSignupMessage('Invalid email format.');\n      return;\n    }\n\n    try {\n      const url = new URL('http://localhost:8080/patients');\n      const userData = {\n        user: {\n        username,\n        firstName,\n        middleName,\n        lastName,\n        age,\n        sex,\n        birthday,\n        address,\n        contactNumber,\n        email,\n        password,\n        userType\n      },\n        patient: {\n        seniorId,\n        pwdId,\n        philhealthId,\n        hmo\n        }\n      };\n\n\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(userData),\n      });\n\n      if (response.ok) {\n        // Signup successful\n        setSignupMessage('User added successfully');\n        setRegistrationSuccessful(true);\n\n \n      } else {\n        // Signup failed\n        const errorMessage = await response.text();\n        setSignupMessage(`Signup failed`);\n        // Handle the error or display an error message to the user\n      }\n    } catch (error) {\n      console.error('Error during signup:', error);\n      setSignupMessage('Error during signup. Please try again later.');\n      // Handle the error or display an error message to the user\n    }\n  }\n\n\n  const handleVerification = async () => {\n    try {\n      const response = await fetch(`http://localhost:8080/patientverify?email=${email}&otp=${otp}`, {\n        method: 'GET',\n      });\n\n      if (response.ok) {\n        const verificationResult = await response.text();\n        setMessage(verificationResult);\n        if (verificationResult === 'Successful verification.') {\n          window.location.href = '/login'; // Redirect to the login page\n        } else {\n          setMessage('Unsuccessful verification.');\n        }\n      } else {\n        setMessage('Unsuccessful verification.');\n      }\n    } catch (error) {\n      setMessage('An error occurred');\n    }\n  };\n\n  \n  const handleOtpChange = (e) => {\n    const inputOtp = e.target.value;\n    setOtp(inputOtp);\n  };\n  useEffect(() => {\n    calculateAge();\n  }, [birthday]);\n\n  const calculateAge = () => {\n    // Ensure the birthday is not empty\n    if (birthday) {\n      const birthDate = new Date(birthday);\n      const currentDate = new Date();\n\n      let calculatedAge = currentDate.getFullYear() - birthDate.getFullYear();\n\n      // Adjust age if birthday hasn't occurred yet this year\n      if (\n        currentDate.getMonth() < birthDate.getMonth() ||\n        (currentDate.getMonth() === birthDate.getMonth() &&\n          currentDate.getDate() < birthDate.getDate())\n      ) {\n        calculatedAge--;\n      }\n\n      setAge(calculatedAge);\n    }\n  };\n\n  const handleClick = () => {\n    if (!contactNumber.startsWith('+63 ')) {\n      setContactNumber('+63');\n    }\n  };\n\n  const handleChange = (e) => {\n    setContactNumber(e.target.value);\n\n    console.log(e.target.value);\n  };\n\n  return (\n    <div>\n    <div className=\"reg-container\" id=\"reg-container\">\n      <HomeNavbar />\n      <div className=\"register\">\n        <h1 style={{ color: '#0094d4' }}>Patient Register</h1>\n        <form action=\"#\" id=\"register-form\">\n          <div className=\"reg-row\">\n            <div className=\"reg-infield\">\n              <input \n                type=\"text\"\n                id=\"username\"\n                placeholder=\"*Username\"\n                name=\"username\"\n                value={username}\n                onChange={(e) => setUsername(e.target.value)}\n              style={{ display: 'flex', flexDirection: 'row', justifyContent: 'space-between', width: '690px' }} />\n            </div>\n          </div>\n          <div className=\"reg-row\">\n            <div className=\"reg-infield\">\n              <input type=\"text\"\n                id=\"lastName\"\n                placeholder=\"*Last Name\"\n                name=\"lastName\"\n                value={lastName}\n                onChange={(e) => setLastName(e.target.value)}/>\n            </div>\n            <div className=\"reg-infield\">\n              <input  type=\"text\"\n                id=\"firstName\"\n                placeholder=\"*First Name\"\n                name=\"firstName\"\n                value={firstName}\n                onChange={(e) => setFirstName(e.target.value)} />\n            </div>\n            <div className=\"reg-infield\">\n              <input type=\"text\"\n                id=\"middleName\"\n                placeholder=\"Middle Name\"\n                name=\"middleName\"\n                value={middleName}\n                onChange={(e) => setMiddleName(e.target.value)} />\n            </div>\n          </div>\n  \n          <div className=\"reg-row\">\n          <div className=\"reg-infield\" style={{ width: \"50px\", marginRight: \"-10\"}}> \n              <p style={{margin: \"0\", padding: \"10px 0\", color: \"grey\", fontSize: \"12px\"}}>*Age</p>\n            </div>\n            <div className=\"reg-infield\" style={{ width: \"275px\"}}>\n              <input\n                  readOnly=\"readOnly\"\n                  id=\"age\"\n                  placeholder={age}\n                  name=\"age\"\n                  min=\"1\"\n                  max=\"100\"\n                  value={age}\n                  onChange={(e) => setAge(e.target.value)}\n                />\n            </div>\n            <div className=\"reg-infield\">\n              <select \n                id=\"sex\"\n                placeholder=\"*Sex\"\n                name=\"sex\"\n                value={sex}\n                onChange={(e) => setSex(e.target.value)}>\n                  <option value=\"\" disabled>Sex</option>\n                  <option value=\"Female\">Female</option>\n                  <option value=\"Male\">Male</option>\n                  <option value=\"prefer not to say\">Prefer Not To Say</option>\n              </select>\n              </div>\n          </div>\n          <div className=\"reg-row\">\n            <div className=\"reg-infield\" style={{ width: \"50px\", marginRight: \"-10\"}}> \n              <p style={{margin: \"0\", padding: \"10px 0\", color: \"grey\", fontSize: \"12px\"}}>*Birthdate</p>\n            </div>\n            <div className=\"reg-infield\" style={{ width: \"150px\"}}>\n              <input\n                type=\"date\"\n                id=\"birthday\"\n                name=\"birthday\"\n                value={birthday}\n                style={{padding: \"8px 8px\"}}\n                onChange={(e) => setBirthday(e.target.value)}\n              />\n            </div>\n            <div className=\"reg-infield\" style={{ width: \"500px\"}}>\n              <input\n                type=\"text\"\n                id=\"address\"\n                placeholder=\"*(House/Lot/Unit No., Street, Barangay, City/Town, Province)\"\n                name=\"address\"\n                value={address}\n                onChange={(e) => setAddress(e.target.value)}\n              />\n            </div>\n          </div>\n          <div className=\"reg-row\">\n            <div className=\"reg-infield\">\n              <input\n                type=\"text\"\n                id=\"contactNumber\"\n                placeholder=\"+63 \"\n                name=\"contactNumber\"\n                value={contactNumber}\n                onClick={handleClick}\n                onChange={handleChange}\n              />\n            </div>\n            <div className=\"reg-infield\">\n              <input\n                type=\"email\"\n                placeholder=\"Email\"\n                id=\"email\"\n                name=\"email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n              />\n            </div>\n          </div>\n          <div className=\"reg-row\">\n            <div className=\"reg-infield\">\n              <input\n                type=\"text\"\n                placeholder=\"Senior Citizen ID Number\"\n                id=\"seniorId\"\n                name=\"seniorId\"\n                value={seniorId}\n                onChange={(e) => setSeniorId(e.target.value)}\n              />\n            </div>\n            <div className=\"reg-infield\">\n              <input\n                type=\"text\"\n                placeholder=\"PWD ID Number\"\n                id=\"pwdId\"\n                name=\"pwdId\"\n                value={pwdId}\n                onChange={(e) => setPwdId(e.target.value)}\n              />\n            </div>\n          </div>\n          <div className=\"reg-row\">\n            <div className=\"reg-infield\">\n              <input\n                type=\"text\"\n                placeholder=\"PhilHealth ID Number\"\n                id=\"philhealthId\"\n                name=\"philhealthId\"\n                value={philhealthId}\n                onChange={(e) => setPhilhealthId(e.target.value)}\n              />\n            </div>\n            <div className=\"reg-infield\">\n              <input\n                type=\"text\"\n                placeholder=\"Health Insurance/HMO\"\n                id=\"hmo\"\n                name=\"hmo\"\n                value={hmo}\n                onChange={(e) => setHmo(e.target.value)}\n              />\n            </div>\n          </div>\n          <div className=\"reg-row\">\n            <div className=\"reg-infield\">\n              <input\n                type=\"password\"\n                placeholder=\"*Password\"\n                id=\"password\"\n                name=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n              />\n            </div>\n            <div className=\"reg-infield\">\n              <input\n                type=\"password\"\n                placeholder=\"*Re-enter Password\"\n                id=\"retypePassword\"\n                name=\"retypePassword\"\n                value={retypePassword}\n                onChange={(e) => setRetypePassword(e.target.value)}\n              />\n            </div>\n          </div>\n          <button type=\"button\" onClick={handleSignup}> Register</button>\n          {signupMessage && <p className=\"signup-message\">{signupMessage}</p>}\n          {registrationSuccessful && (\n          <Popup trigger={true}>\n            <form action=\"#\" id=\"signin-form\">\n              <div className=\"infield\">\n                <h1 style={{ textAlign: 'center' }}>Verification</h1>\n                <input\n                  type=\"code\"\n                  placeholder=\"Verification Code\"\n                  id=\"otp\"\n                  value={otp}\n                  onChange={handleOtpChange}\n                />\n              </div>\n              <button type=\"button\" onClick={handleVerification}>Submit Code</button>\n              {message && <p>{message}</p>}\n              <p style={{ color: '#0094d4', marginTop: '0', marginBottom: '0' }}>Did not receive it? <a href='/'>Resend Code</a></p>\n            </form>\n          </Popup>\n          )} \n        </form>\n      </div>\n    </div>\n    <HomeFooter />\n    </div>\n  );\n};\n\nexport default PatientRegister;\n\n","D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\pages\\PatientPages\\PatientProfile.jsx",["262","263"],[],"import React, { useEffect, useState } from 'react';\r\nimport \"../../styles/Profile.css\";\r\nimport PatientNavBar from '../../components/PatientNavBar';\r\nimport PatientFooter from '../../components/PatientFooter';\r\nimport { Calendar, dateFnsLocalizer } from 'react-big-calendar';\r\nimport format from 'date-fns/format';\r\nimport parse from 'date-fns/parse';\r\nimport startOfWeek from 'date-fns/startOfWeek';\r\nimport getDay from 'date-fns/getDay';\r\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\r\nimport avatar00 from '../../images/defaultIcon.png';\r\nimport avatar01 from '../../assets/PatientIcons/Avatar01.png';\r\nimport avatar02 from '../../assets/PatientIcons/Avatar02.png';\r\nimport avatar03 from '../../assets/PatientIcons/Avatar03.png';\r\nimport avatar04 from '../../assets/PatientIcons/Avatar04.png';\r\nimport avatar05 from '../../assets/PatientIcons/Avatar05.png';\r\nimport avatar06 from '../../assets/PatientIcons/Avatar06.png';\r\nimport avatar07 from '../../assets/PatientIcons/Avatar07.png';\r\nimport avatar08 from '../../assets/PatientIcons/Avatar08.png';\r\nimport avatar09 from '../../assets/PatientIcons/Avatar09.png';\r\nimport avatar10 from '../../assets/PatientIcons/Avatar10.png';\r\nimport avatar11 from '../../assets/PatientIcons/Avatar11.png';\r\nimport avatar12 from '../../assets/PatientIcons/Avatar12.png';\r\nimport avatar13 from '../../assets/PatientIcons/Avatar13.png';\r\nimport avatar14 from '../../assets/PatientIcons/Avatar14.png';\r\nimport avatar15 from '../../assets/PatientIcons/Avatar15.png';\r\nimport avatar16 from '../../assets/PatientIcons/Avatar16.png';\r\nimport avatar17 from '../../assets/PatientIcons/Avatar17.png';\r\nimport avatar18 from '../../assets/PatientIcons/Avatar18.png';\r\n\r\nconst PatientProfile = () => {\r\n    const [avatar, setAvatar] = useState('');\r\n    const [selectedAvatar, setSelectedAvatar] = useState('');\r\n    const [user, setUser] = useState(null);\r\n    const [isError, setIsError] = useState(false);\r\n    const [patientUserId, setPatientUserId] = useState('');\r\n    const [appointments, setAppointments] = useState([\r\n      {\r\n        title: '',\r\n        clinic: '',\r\n        address: '',\r\n        number: '',\r\n        start: new Date(),\r\n        end: new Date(),  // 5:00 PM\r\n        transactionNo: '',\r\n        appointmentStatus: ''\r\n      },\r\n    ]);\r\n  \r\n    useEffect(() => {\r\n    const fetchUser = async () => {\r\n        try {\r\n          const response = await fetch(\"http://localhost:8080/patientprofile\");\r\n          if (response.ok) {\r\n            const data = await response.json();\r\n            setUser(data);\r\n            setAvatar(data.user.avatar);\r\n          } else {\r\n            setIsError(true);\r\n          }\r\n        } catch (error) {\r\n          console.error('Error fetching user:', error);\r\n          setIsError(true);\r\n        }\r\n    };\r\n\r\n    \r\n      fetchUser();\r\n    }, []);\r\n\r\n  const setDisplayedAvatars = (avatar) => {\r\n    const avatarImports = {\r\n      'patavatar01': avatar01,\r\n      'patavatar02': avatar02,\r\n      'patavatar03': avatar03,\r\n      'patavatar04': avatar04,\r\n      'patavatar05': avatar05,\r\n      'patavatar06': avatar06,\r\n      'patavatar07': avatar07,\r\n      'patavatar08': avatar08,\r\n      'patavatar09': avatar09,\r\n      'patavatar10': avatar10,\r\n      'patavatar11': avatar11,\r\n      'patavatar12': avatar12,\r\n      'patavatar13': avatar13,\r\n      'patavatar14': avatar14,\r\n      'patavatar15': avatar15,\r\n      'patavatar16': avatar16,\r\n      'patavatar17': avatar17,\r\n      'patavatar18': avatar18\r\n    };\r\n\r\n    // Set selectedAvatar using the corresponding import\r\n    setSelectedAvatar(avatarImports[avatar] || avatar00);\r\n  };\r\n\r\n\r\n    useEffect(() => {\r\n      // Replace 'http://localhost:8080' with your actual API URL\r\n      fetch('http://localhost:8080/checkLoggedInPatient')\r\n        .then((response) => {\r\n          if (response.ok) {\r\n            return response.json();\r\n          }\r\n          throw new Error('Network response was not ok');\r\n        })\r\n        .then((data) => {\r\n          setPatientUserId(data);\r\n          // Once you have the patientUserId, make another request to get appointments\r\n          fetch(`http://localhost:8080/appointments?patientUserId=${data}`)\r\n            .then((appointmentsResponse) => {\r\n              if (appointmentsResponse.ok) {\r\n                return appointmentsResponse.json();\r\n              }\r\n              throw new Error('Network response was not ok');\r\n            })\r\n            .then((appointmentsData) => {\r\n              const formattedAppointments = appointmentsData.map((appointment) => {\r\n                // Extract date and time components\r\n                const [year, month, day] = appointment.scheduleDate.split('-').map(Number);\r\n                const [hours, minutes] = appointment.startTime.split(':').map(Number);\r\n                const [hours2, minutes2] = appointment.endTime.split(':').map(Number);\r\n  \r\n                // Create Date objects for start and end times\r\n                const startDate = new Date(year, month - 1, day, hours, minutes);\r\n                const endDate = new Date(year, month - 1, day, hours2, minutes2);\r\n  \r\n                // Create an appointment object\r\n                return {\r\n                  title: 'Dr. ' + appointment.doctorName,\r\n                  clinic: appointment.clinicName,\r\n                  address: appointment.address,\r\n                  number: appointment.clinic.officeNumber,\r\n                  start: startDate,\r\n                  end: endDate,\r\n                  appointmentId: appointment.transactionNo,\r\n                  appointmentStatus: appointment.status\r\n                };\r\n              });\r\n  \r\n              setAppointments(formattedAppointments);\r\n            })\r\n            .catch((error) => {\r\n              // Handle errors\r\n              console.error(error);\r\n            });\r\n  \r\n        })\r\n        .catch((error) => {\r\n          setIsError(true);\r\n          console.error('Error:', error);\r\n        });\r\n    }, []);\r\n  \r\n    const locales = {\r\n      \"en-US\": require(\"date-fns/locale/en-US\")\r\n    }\r\n  \r\n    const localizer = dateFnsLocalizer({\r\n      format,\r\n      parse,\r\n      startOfWeek,\r\n      getDay,\r\n      locales\r\n    })\r\n  \r\n    const handleCancel = async (appointmentId) => {\r\n      try {\r\n        const response = await fetch(`http://localhost:8080/appointmentChange/${appointmentId}?newStatus=Cancelled`, {\r\n          method: 'PUT',\r\n        });\r\n  \r\n        if (response.ok) {\r\n          // Handle success if needed\r\n          console.log('Appointment cancelled successfully');\r\n          window.location.reload();\r\n        } else {\r\n          setIsError(true);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error cancelling appointment:', error);\r\n        setIsError(true);\r\n      }\r\n    };\r\n    useEffect(() => {\r\n      setDisplayedAvatars(avatar);\r\n  \r\n    }, [avatar]);\r\n\r\n  \r\n    const CustomEvent = ({ event }) => (\r\n      <div style={{ margin: '5px 0', whiteSpace: 'nowrap', overflow: 'hidden', textOverflow: 'ellipsis' }}>\r\n        <strong style={{ margin: '0px 0', overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'normal' }}>{event.title}</strong>\r\n        <p style={{ margin: '0px 0', overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'normal' }}>\r\n          Clinic: {event.clinic}\r\n        </p>\r\n        <p style={{ margin: '0px 0', overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'normal' }}>\r\n          Status: {event.appointmentStatus}\r\n        </p>\r\n      </div>\r\n    );   \r\n\r\n  return (\r\n    <div className=\"profile-container\" id=\"container\" style={{overflow: \"hidden\"}}>\r\n        <PatientNavBar />\r\n        <div className=\"doctorprofilecontainer\" style={{marginTop: \"1%\", overflow: \"hidden\", height: \"100%\"}}>\r\n        {user ? (\r\n          <div className=\"parentelement\" style={{overflow: \"hidden\"}}>\r\n            <div className=\"columns\" id=\"columnprofileicon\" style={{marginTop: '0'}}>\r\n              <div className=\"backgroundpop\"></div>\r\n              <div className=\"doctorprofileicon\">\r\n                {selectedAvatar && <img src={selectedAvatar} alt=\"Selected Avatar\" />}\r\n              </div>\r\n              <div className=\"doctorprofilename\">\r\n                <p className=\"pn\">\r\n                  <b>{user.user.firstName} {user.user.middleName} {user.user.lastName}</b>\r\n                </p>\r\n              </div>\r\n              <div className=\"doctorprofiletitle\">\r\n                <p className=\"pt\">\r\n                  <i>{user.credentials}</i>\r\n                </p>\r\n              </div>\r\n              <div className=\"listofdocprofilecontent\" >\r\n                <ul className=\"profile-list\">\r\n                  <li><a href=\"#columnprofileinformation\">Account Details</a></li>\r\n                  <li><a href=\"#personal\">Personal Information</a></li>\r\n                  <li><a href=\"#additional\">Additional Information</a></li>\r\n                  <li><a href=\"#columnprofileappointments\">Appointments</a></li>\r\n                </ul>\r\n              </div>\r\n            </div>\r\n            <div className=\"columns\" id=\"columnprofileinformation\" style={{marginTop: '-1.1%', overflowY: 'auto', maxHeight: '900px' }} >\r\n              <div className=\"doctorprofilecontent\">\r\n                <div className=\"mydoctorprofileaccount\" id=\"account\">\r\n                  <div className=\"backgroundpop\">\r\n                    <div className=\"doctorprofilecontenttitles\">\r\n                      <p><b>ACCOUNT</b></p>\r\n                    </div>\r\n                    <div className=\"contentcolumn\">\r\n                      <div className=\"contentcolumn1\">\r\n                        <div className=\"contentrow\">\r\n                          <div className=\"dataname\">\r\n                            <p>Username: </p>\r\n                          </div>\r\n                          <div className=\"datainfo\">\r\n                            {user.user.username}\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"contentcolumn2\">\r\n                        <div className=\"contentrow\">\r\n                          <div className=\"dataname\">\r\n                            <p>Email: </p>\r\n                          </div>\r\n                          <div className=\"datainfo\">\r\n                            {user.user.email}\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"mydoctorprofilepersonal\" id=\"personal\">\r\n                  <div className=\"backgroundpop\">\r\n                    <div className=\"doctorprofilecontenttitles\">\r\n                      <p><b>PERSONAL INFORMATION</b></p>\r\n                    </div>\r\n                    <div className=\"contentcolumn\">\r\n                      <div className=\"contentcolumn1\">\r\n                        <div className=\"contentrow\">\r\n                          <div className=\"dataname\">\r\n                            <p>Sex: </p>\r\n                          </div>\r\n                          <div className=\"datainfo\">\r\n                            {user.user.sex}\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"contentcolumn2\">\r\n                        <div className=\"contentrow\">\r\n                          <div className=\"dataname\">\r\n                            <p>Age: </p>\r\n                          </div>\r\n                          <div className=\"datainfo\">\r\n                            {user.user.age}\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"contentcolumn2\">\r\n                        <div className=\"contentrow\">\r\n                          <div className=\"dataname\">\r\n                            <p>Birthday: </p>\r\n                          </div>\r\n                          <div className=\"datainfo\">\r\n                            {user.user.birthday}\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"contentcolumn2\">\r\n                        <div className=\"contentrow\">\r\n                          <div className=\"dataname\">\r\n                            <p>Contact Number: </p>\r\n                          </div>\r\n                          <div className=\"datainfo\">\r\n                            {user.user.contactNumber}\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"contentcolumn2\">\r\n                        <div className=\"contentrow\">\r\n                          <div className=\"dataname\">\r\n                            <p>Address: </p>\r\n                          </div>\r\n                          <div className=\"datainfo\">\r\n                            {user.user.address}\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"mydoctorprofilecredentials\" id=\"additional\">\r\n                  <div className=\"backgroundpop\">\r\n                    <div className=\"doctorprofilecontenttitles\">\r\n                      <p><b>ADDITIONAL INFORMATION</b></p>\r\n                    </div>\r\n                    <div className=\"contentcolumn\">\r\n                      <div className=\"contentcolumn1\">\r\n                        <div className=\"contentrow\">\r\n                          <div className=\"dataname\">\r\n                            <p>Senior Citizen ID: </p>\r\n                          </div>\r\n                          <div className=\"datainfo\">\r\n                            {user.seniorId}\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"contentcolumn2\">\r\n                        <div className=\"contentrow\">\r\n                          <div className=\"dataname\">\r\n                            <p>Philhealth ID: </p>\r\n                          </div>\r\n                          <div className=\"datainfo\">\r\n                            {user.philhealthId}\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"contentcolumn2\">\r\n                        <div className=\"contentrow\">\r\n                          <div className=\"dataname\">\r\n                            <p>PWD ID No: </p>\r\n                          </div>\r\n                          <div className=\"datainfo\">\r\n                            {user.pwdId}\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div\r\n                  className=\"columns\"\r\n                  id=\"columnprofileappointments\"\r\n                  style={{\r\n                    marginTop: \"0%\",\r\n                    position: \"sticky\", /* Set the position to sticky */\r\n                    top: \"20px\", /* Adjust the top value as needed */\r\n                    zIndex: \"100\", /* Set a z-index to control stacking with other elements */\r\n                    backgroundColor: \"white\", /* Background color if needed */\r\n                  }}\r\n                >\r\n              <div className=\"futureappointments\">\r\n                <div className=\"doctorappoinmentcard\">\r\n                  <div className=\"backgroundpop\">\r\n                    <div className=\"titleappointment\">\r\n                      <p><b>CALENDAR</b></p>\r\n                    </div>\r\n                    <div className=\"doctorcalendar\">\r\n                      <Calendar\r\n                        localizer={localizer}\r\n                        events={appointments}\r\n                        startAccessor=\"start\"\r\n                        endAccessor=\"end\"\r\n                        style={{ height: 300, width: \"84%\" }}\r\n                        components={{\r\n                          event: CustomEvent, // Use the custom Event component\r\n                        }}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n                    </div>\r\n                            ) : (\r\n                isError ? (\r\n                  <p>Error fetching user profile</p>\r\n                ) : (\r\n                  <p>Loading user profile...</p>\r\n                )\r\n              )}\r\n      \r\n        </div>\r\n        <br />\r\n        <PatientFooter />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PatientProfile;","D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\pages\\PatientPages\\PatientAppointment.jsx",[],[],"D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\pages\\DoctorPages\\DoctorAppointment.jsx",["264","265"],[],"import React, { useState, useEffect } from 'react';\nimport DoctorNavbar from '../../components/DoctorNavbar';\nimport DoctorFooter from '../../components/DoctorFooter';\nimport { Calendar, dateFnsLocalizer } from 'react-big-calendar';\nimport format from 'date-fns/format';\nimport parse from 'date-fns/parse';\nimport startOfWeek from 'date-fns/startOfWeek';\nimport getDay from 'date-fns/getDay';\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\nimport \"../../styles/Calendar.css\";\n\nconst DoctorAppointment = () => {\n  const [isError, setIsError] = useState(false);\n  const [doctorUserId, setDoctorUserId] = useState('');\n  const [appointments, setAppointments] = useState([\n    {\n      title: '',\n      clinic: '',\n      address: '',\n      patientUserId: '',\n      start: new Date(),\n      end: new Date(),  // 5:00 PM\n      appointmentId: '',\n      appointmentStatus: '',\n      slots: ''\n    },\n  ]);\n\n\n  useEffect(() => {\n    // Replace 'http://localhost:8080' with your actual API URL\n    fetch('http://localhost:8080/checkLoggedInDoctor')\n      .then((response) => {\n        if (response.ok) {\n          return response.json();\n        }\n        throw new Error('Network response was not ok');\n      })\n      .then((data) => {\n        setDoctorUserId(data);\n        // Once you have the patientUserId, make another request to get appointments\n        fetch(`http://localhost:8080/docappointments?doctorUserId=${data}`)\n          .then((appointmentsResponse) => {\n            if (appointmentsResponse.ok) {\n              return appointmentsResponse.json();\n            }\n            throw new Error('Network response was not ok');\n          })\n          .then((appointmentsData) => {\n            const formattedAppointments = appointmentsData.map((appointment) => {\n              // Extract date and time components\n              const [year, month, day] = appointment.scheduleDate.split('-').map(Number);\n              const [hours, minutes] = appointment.startTime.split(':').map(Number);\n              const [hours2, minutes2] = appointment.endTime.split(':').map(Number);\n\n              // Create Date objects for start and end times\n              const startDate = new Date(year, month - 1, day, hours, minutes);\n              const endDate = new Date(year, month - 1, day, hours2, minutes2);\n\n              // Create an appointment object\n              return {\n                title: appointment.patientName,\n                clinic: appointment.clinicName,\n                address: appointment.address,\n                patientUserId: appointment.patientUserId,\n                start: startDate,\n                end: endDate,\n                appointmentId: appointment.transactionNo,\n                appointmentStatus: appointment.status,\n                slots: appointment.slots\n              };\n            });\n\n            setAppointments(formattedAppointments);\n            console.log(appointments);\n          })\n          .catch((error) => {\n            // Handle errors\n            console.error(error);\n          });\n\n      })\n      .catch((error) => {\n        setIsError(true);\n        console.error('Error:', error);\n      });\n  }, [appointments]);\n\n  const locales = {\n    \"en-US\": require(\"date-fns/locale/en-US\")\n  }\n\n  const localizer = dateFnsLocalizer({\n    format,\n    parse,\n    startOfWeek,\n    getDay,\n    locales\n  })\n  const getBorderColor = (status) => {\n    switch (status) {\n      case 'Cancelled':\n        return '#FCA694';\n      case 'Rescheduled':\n        return '#FFB97F';\n      case 'Scheduled by Patient':\n        return '#FFFFDC';\n      case 'Approved by Doctor':\n        return '#BAFFC4';\n      default:\n        return 'lightgray';\n    }\n  };\n  const CustomEvent = ({ event }) => (\n    <div style={{ margin: '5px 0', whiteSpace: 'nowrap', overflowY: 'auto', maxHeight: \"55px\", textOverflow: 'ellipsis' }}>\n      <strong style={{ margin: '0px 0', overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'normal' }}>\n        {event.clinic}\n      </strong>\n      <p style={{ margin: '0px 0', overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'normal' }}>\n        {event.title}\n      </p>\n      <p style={{ margin: '0px 0', overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'normal', backgroundColor: getBorderColor(event.appointmentStatus)  }}>\n        {event.appointmentStatus}\n      </p>\n      <p style={{ margin: '0px 0', overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'normal' }}>\n        {event.slots}\n      </p>\n    </div>\n   \n  );\n  const filterAndAggregateAppointments = (appointments) => {\n    // Create an object to store unique appointments based on title\n    const uniqueAppointments = {};\n\n    // Iterate through each appointment\n    appointments.forEach(appointment => {\n      const { title, patientUserId, clinic } = appointment;\n\n      // Check if the title already exists in uniqueAppointments\n      if (!uniqueAppointments[title]) {\n        // If not, create an entry with an array containing the current appointment\n        uniqueAppointments[title] = {\n          title,\n          patientUserId,\n          clinics: [clinic],\n        };\n      } else {\n        // If yes, append the clinic to the existing array\n        uniqueAppointments[title].clinics.push(clinic);\n      }\n    });\n\n    // Convert the values of uniqueAppointments object into an array\n    const resultAppointments = Object.values(uniqueAppointments);\n\n    return resultAppointments;\n  };\n\n  // Usage example\n  const resultAppointments = filterAndAggregateAppointments(appointments);\n\n\n    \n\n  const handleManage = async (patientUserId) => {\n    window.location.href = `/manageappointments/${patientUserId}`;\n  };\n\n  return (\n    <div>\n      <DoctorNavbar />\n      <div style={{ display: \"flex\", margin: \"auto\", width: \"100vw\", justifyContent: \"center\" }}>\n      <Calendar\n          localizer={localizer}\n          events={appointments}\n          startAccessor=\"start\"\n          endAccessor=\"end\"\n          style={{ height: 700, width: '70%' }}\n          components={{\n            event: CustomEvent, // Use the custom Event component\n          }}\n        />\n        {appointments.filter(appointment => appointment).length > 0 ? (\n          <div style={{ marginLeft: \"30px\" }}>\n            <h1>My Clinic</h1>\n            {resultAppointments.map((appointment, index) => (\n              <table key={index} style={{borderBottom: \"1px solid lightgrey\"}}>\n                <tr>\n                  <td width={250}>{appointment.title}</td>\n                  <td ><button style={{ borderRadius: 0, width: \"260px\", height: \"40px\"}} onClick={() => handleManage(appointment.patientUserId)}>Manage Appointments</button></td>\n                </tr>\n                <tr >\n                  <td width={250}>\n                    {/* Display unique clinics for the current unique appointment */}\n                    {Array.from(new Set(appointment.clinics)).map((clinic, clinicIndex) => (\n                      <span key={clinicIndex}>{clinic}{clinicIndex !== appointment.clinics.length - 1 ? <br /> : ''}</span>\n                    ))}\n                  </td>\n                  <td><button className='cancel' style={{ width: \"100%\", height: \"40px\" }}>Cancel Appointments</button></td>\n                </tr>\n              </table>\n\n            ))}\n          </div>\n        ) : (\n          // Display a message if there are no appointments with appointmentStatus === \"Approved by Doctor\"\n          <div style={{ marginLeft: \"1%\" }}>\n            <p>You have no appointments yet.</p>\n          </div>\n        )}\n      </div>\n      <DoctorFooter />\n    </div>\n  );\n};\n\nexport default DoctorAppointment;\n","D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\pages\\PatientPages\\EditPatientProfile.jsx",["266","267","268","269","270","271","272","273"],[],"import React, { useState, useEffect } from 'react';\r\nimport \"../../styles/Profile.css\";\r\nimport PatientNavBar from '../../components/PatientNavBar';\r\nimport PatientFooter from '../../components/PatientFooter';\r\nimport AvatarSelectionPopup from '../../components/AvatarSelection';\r\nimport avatar00 from '../../images/defaultIcon.png';\r\nimport avatar01 from '../../assets/PatientIcons/Avatar01.png';\r\nimport avatar02 from '../../assets/PatientIcons/Avatar02.png';\r\nimport avatar03 from '../../assets/PatientIcons/Avatar03.png';\r\nimport avatar04 from '../../assets/PatientIcons/Avatar04.png';\r\nimport avatar05 from '../../assets/PatientIcons/Avatar05.png';\r\nimport avatar06 from '../../assets/PatientIcons/Avatar06.png';\r\nimport avatar07 from '../../assets/PatientIcons/Avatar07.png';\r\nimport avatar08 from '../../assets/PatientIcons/Avatar08.png';\r\nimport avatar09 from '../../assets/PatientIcons/Avatar09.png';\r\nimport avatar10 from '../../assets/PatientIcons/Avatar10.png';\r\nimport avatar11 from '../../assets/PatientIcons/Avatar11.png';\r\nimport avatar12 from '../../assets/PatientIcons/Avatar12.png';\r\nimport avatar13 from '../../assets/PatientIcons/Avatar13.png';\r\nimport avatar14 from '../../assets/PatientIcons/Avatar14.png';\r\nimport avatar15 from '../../assets/PatientIcons/Avatar15.png';\r\nimport avatar16 from '../../assets/PatientIcons/Avatar16.png';\r\nimport avatar17 from '../../assets/PatientIcons/Avatar17.png';\r\nimport avatar18 from '../../assets/PatientIcons/Avatar18.png';\r\nimport Popup from '../../components/Popup';\r\n\r\nconst EditPatientProfile = () => {\r\n    const [user, setUser] = useState(null);\r\n    const [isError, setIsError] = useState(false);\r\n    const [username, setUsername] = useState('');\r\n    const [firstName, setFirstName] = useState('');\r\n    const [middleName, setMiddleName] = useState('');\r\n    const [lastName, setLastName] = useState('');\r\n    const [age, setAge] = useState('');\r\n    const [sex, setSex] = useState('');\r\n    const [birthday, setBirthday] = useState('');\r\n    const [address, setAddress] = useState('');\r\n    const [contactNumber, setContactNumber] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [seniorId, setSeniorId] = useState('');\r\n    const [pwdId, setPwdId] = useState('');\r\n    const [philhealthId, setPhilhealthId] = useState('');\r\n    const [hmo, setHmo] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [retypePassword, setRetypePassword] = useState('');\r\n    const [editMessage, setEditMessage] = useState('');\r\n    const [userType] = useState('patient');\r\n    const [avatar, setAvatar] = useState('');\r\n    const [selectedAvatar, setSelectedAvatar] = useState('');\r\n\r\n    useEffect(() => {\r\n        \r\n\r\n    const fetchUser = async () => {\r\n        try {\r\n          const response = await fetch(\"http://localhost:8080/patientprofile\");\r\n          if (response.ok) {\r\n            const data = await response.json();\r\n            setUser(data);\r\n            setUsername(data.user.username);\r\n            setFirstName(data.user.firstName);\r\n            setMiddleName(data.user.middleName);\r\n            setLastName(data.user.lastName);\r\n            setAge(data.user.age);\r\n            setSex(data.user.sex);\r\n            setBirthday(data.user.birthday);\r\n            setAddress(data.user.address);\r\n            setContactNumber(data.user.contactNumber);\r\n            setEmail(data.user.email);\r\n            setSeniorId(data.seniorId);\r\n            setPwdId(data.pwdId);\r\n            setPhilhealthId(data.philhealthId);\r\n            setHmo(data.hmo);\r\n            setAvatar(data.user.avatar);\r\n            console.log(avatar);\r\n          } else {\r\n            setIsError(true);\r\n          }\r\n        } catch (error) {\r\n          console.error('Error fetching user:', error);\r\n          setIsError(true);\r\n        }\r\n        \r\n    };\r\n    fetchUser();\r\n      }, []);\r\n\r\n\r\n    const setDisplayedAvatars = (avatar) => {\r\n      const avatarImports = {\r\n        'patavatar01': avatar01,\r\n        'patavatar02': avatar02,\r\n        'patavatar03': avatar03,\r\n        'patavatar04': avatar04,\r\n        'patavatar05': avatar05,\r\n        'patavatar06': avatar06,\r\n        'patavatar07': avatar07,\r\n        'patavatar08': avatar08,\r\n        'patavatar09': avatar09,\r\n        'patavatar10': avatar10,\r\n        'patavatar11': avatar11,\r\n        'patavatar12': avatar12,\r\n        'patavatar13': avatar13,\r\n        'patavatar14': avatar14,\r\n        'patavatar15': avatar15,\r\n        'patavatar16': avatar16,\r\n        'patavatar17': avatar17,\r\n        'patavatar18': avatar18,\r\n      };\r\n  \r\n      // Set selectedAvatar using the corresponding import\r\n      setSelectedAvatar(avatarImports[avatar] || avatar00);\r\n    };\r\n    useEffect(() => {\r\n      setDisplayedAvatars(avatar);\r\n  \r\n    }, [avatar]);  \r\n\r\n    const handleEdit = async () => {\r\n        // Check if any of the fields are empty\r\n        if (\r\n            !username ||\r\n            !firstName ||\r\n            !middleName ||\r\n            !lastName ||\r\n            !age ||\r\n            !sex ||\r\n            !birthday ||\r\n            !address ||\r\n            !contactNumber ||\r\n            !email\r\n        ) {\r\n          setEditMessage('Please fill in all required fields.');\r\n          return;\r\n        }\r\n      \r\n        // Validate email format using regular expression\r\n        const emailRegex = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/;\r\n        if (!emailRegex.test(email)) {\r\n          setEditMessage('Invalid email format.');\r\n          return;\r\n        }\r\n      \r\n        try {\r\n          const url = new URL('http://localhost:8080/editpatient');\r\n          const userData = {\r\n            user: {\r\n            username,\r\n            firstName,\r\n            middleName,\r\n            lastName,\r\n            age,\r\n            sex,\r\n            birthday,\r\n            address,\r\n            contactNumber,\r\n            email,\r\n            avatar\r\n          },\r\n            patient: {\r\n            seniorId,\r\n            pwdId,\r\n            philhealthId,\r\n            hmo\r\n            }\r\n          };\r\n      \r\n          const response = await fetch(url, {\r\n            method: 'PUT', // Use PUT method for editing\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(userData),\r\n          });\r\n      \r\n          if (response.ok) {\r\n            // Edit successful\r\n            setEditMessage('User details updated successfully');\r\n            window.location.href = '/patprofile';\r\n\r\n          } else {\r\n            // Edit failed\r\n            const errorMessage = await response.text();\r\n            setEditMessage(errorMessage);\r\n            // Handle the error or display an error message to the user\r\n          }\r\n        } catch (error) {\r\n          console.error('Error during edit:', error);\r\n          setEditMessage('Error during edit. Please try again later.');\r\n          // Handle the error or display an error message to the user\r\n        }\r\n      };\r\n\r\n      const [isAvatarSelectionOpen, setAvatarSelectionOpen] = useState(false);\r\n    \r\n      const handleAvatarSelection = (selectedAvatar) => {\r\n        setSelectedAvatar(selectedAvatar);\r\n        const match = selectedAvatar.match(/Avatar(\\d+)\\.\\w+/);\r\n      \r\n        if (match) {\r\n          const numericPart = match[1];\r\n          const newAvatar = `patavatar${numericPart}`;\r\n          setAvatar(newAvatar);\r\n          console.log(newAvatar);\r\n        } else {\r\n          setAvatar(`patavatar00`);\r\n        }\r\n      \r\n        setAvatarSelectionOpen(false);\r\n      };\r\n      \r\n    const [isPopupVisible, setPopupVisibility] = useState(false);\r\n\r\n      const closePopup = () => {\r\n        // Close the popup\r\n        setPopupVisibility(false);\r\n      };\r\n      \r\n      const handleChangePassword = () => {\r\n        setPopupVisibility(true);\r\n      };\r\n\r\n  return (\r\n    <div className=\"profile-container\" id=\"container\">\r\n        <PatientNavBar />\r\n        <div className=\"editing-container\" style={{height: \"95vh\"}}> \r\n\r\n          { <Popup trigger={isPopupVisible}>\r\n                  <h3>Please enter your current password:</h3>\r\n                  <div className=\"profile-infield\">\r\n                      <input type=\"text\" placeholder=\"Enter password\" style={{width: \"550px\"}}/>\r\n                  </div>\r\n                  <h3>Please enter your new password: </h3>\r\n                  <div className=\"profile-infield\">\r\n                      <input type=\"text\" placeholder=\"Change Password\" style={{width: \"550px\"}}/>\r\n                  </div>\r\n                  <h3>Please re-enter your new password: </h3>\r\n                  <div className=\"profile-infield\">\r\n                      <input type=\"text\" placeholder=\"Confirm Password Change\" style={{width: \"550px\"}}/>\r\n                  </div>\r\n                  \r\n                <button style={{padding: 5, borderRadius: 0, width: \"48.5%\", textAlign: \"center\", marginTop: \"10px\", height: \"40px\", marginRight: \"10px\"}}>Submit Changes</button>\r\n                <button className='cancel' onClick={closePopup} style={{padding: 5, borderRadius: 0, width: \"48.5%\", textAlign: \"center\", marginTop: \"10px\", height: \"40px\"}}>Discard Changes</button>\r\n              </Popup>\r\n          } \r\n          <div className=\"edit-steps\">\r\n            <div className=\"edit-card\" style={{ marginTop: '-5%' }}>\r\n              <h1>Edit Patient Profile</h1>\r\n              <div style={{ display: 'flex' }}>\r\n                <div className='container-card' style={{ marginRight: '20px' }}>\r\n                  <b>Profile Picture:</b>\r\n                  <div className=\"avatar-selection\">\r\n                    <div className=\"selected-avatar\" onClick={() => setAvatarSelectionOpen(true)}>\r\n                      {selectedAvatar && <img src={selectedAvatar} alt=\"Selected Avatar\" />}\r\n                      <br />\r\n                      <button type=\"submit\">Change Avatar</button>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div style={{ display: 'flex', flexDirection: 'column' }}>\r\n                  <div style={{display: \"flex\"}}>\r\n                  <div className='container-card' >\r\n                    <b style={{ marginRight: '10px' }}>Username:</b>\r\n                    <div className=\"profile-infield\" style={{width: \"23vw\", marginRight: \"-40px\"}}>\r\n                      <input\r\n                        type=\"text\"\r\n                        id=\"username\"\r\n                        placeholder=\"*Username\"\r\n                        name=\"username\"\r\n                        value={username}\r\n                        onChange={(e) => setUsername(e.target.value)}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div className='container-card' >\r\n                    <b style={{ marginRight: '10px' }}>Email: </b>\r\n                    <div className=\"profile-infield\" style={{width: \"22vw\"}}>\r\n                      <input type=\"text\"\r\n                      id=\"email\"\r\n                      placeholder=\"*Email\"\r\n                      name=\"email\"\r\n                      value={email}\r\n                      onChange={(e) => setEmail(e.target.value)}/>\r\n                    </div>\r\n                  </div>\r\n                  </div>\r\n                  \r\n\r\n                  <div style={{ display: 'flex' }}>\r\n                    <div className='container-card' style={{ marginRight: '-50px' }}>\r\n                      <b>First name:</b>\r\n                      <div className=\"profile-infield\">\r\n                        <input\r\n                          type=\"text\"\r\n                          id=\"firstName\"\r\n                          placeholder=\"*First Name\"\r\n                          name=\"firstName\"\r\n                          value={firstName}\r\n                          onChange={(e) => setFirstName(e.target.value)}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className='container-card' style={{ marginRight: '-50px' }}>\r\n                      <b>Middle name:</b>\r\n                      <div className=\"profile-infield\">\r\n                        <input\r\n                          type=\"text\"\r\n                          id=\"middleName\"\r\n                          placeholder=\"*Middle Name\"\r\n                          name=\"middleName\"\r\n                          value={middleName}\r\n                          onChange={(e) => setMiddleName(e.target.value)}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className='container-card'>\r\n                      <b>Last name:</b>\r\n                      <div className=\"profile-infield\">\r\n                        <input\r\n                          type=\"text\"\r\n                          id=\"lastName\"\r\n                          placeholder=\"*Last Name\"\r\n                          name=\"lastName\"\r\n                          value={lastName}\r\n                          onChange={(e) => setLastName(e.target.value)}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n\r\n                  <div style={{ display: 'flex' }}>\r\n                    <div className='container-card' style={{ marginRight: '-50px' }}>\r\n                          <b>Contact number:</b>\r\n                          <div className=\"profile-infield\">\r\n                              <input type=\"text\"\r\n                              id=\"contactNumber\"\r\n                              placeholder=\"*Contact Number\"\r\n                              name=\"contactNumber\"\r\n                              value={contactNumber}\r\n                              onChange={(e) => setContactNumber(e.target.value)}/>\r\n                          </div>\r\n                      </div>\r\n\r\n                    <div className='container-card' style={{ marginRight: '-50px' }}>\r\n                      <b>Birthday:</b>\r\n                        <div className=\"profile-infield\">\r\n                            <input type=\"text\"\r\n                            id=\"birthday\"\r\n                            placeholder=\"*Birthday\"\r\n                            name=\"birthday\"\r\n                            value={birthday}\r\n                            onChange={(e) => setBirthday(e.target.value)}/>\r\n                        </div>\r\n                      </div>\r\n\r\n                      <div className='container-card'>\r\n                        <b>Age:</b>\r\n                        <div className=\"profile-infield\">\r\n                            <input type=\"text\"\r\n                            id=\"age\"\r\n                            placeholder=\"*Age\"\r\n                            name=\"age\"\r\n                            value={age}\r\n                            onChange={(e) => setAge(e.target.value)}/>\r\n                        </div>\r\n                      </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div style={{display: \"flex\"}}>\r\n                <div className='container-card' style={{marginRight: \"-16px\"}}>\r\n                  <b>Sex:</b>\r\n                    <div className=\"profile-infield\">\r\n                      <input type=\"text\"\r\n                      id=\"sex\"\r\n                      placeholder=\"*Sex\"\r\n                      name=\"sex\"\r\n                      value={sex}\r\n                      onChange={(e) => setSex(e.target.value)}/>\r\n                    </div>\r\n                </div>\r\n                <div className='container-card'>\r\n                        <b>Address:</b>\r\n                        <div className=\"profile-infield\" style={{width: \"44vw\"}}>\r\n                            <input type=\"text\"\r\n                            id=\"address\"\r\n                            placeholder=\"*(House/Lot/Unit No., Street, Barangay, City/Town, Province)\"\r\n                            name=\"address\"\r\n                            value={address}\r\n                            onChange={(e) => setAddress(e.target.value)}/>\r\n                        </div>\r\n                      </div>\r\n              </div>\r\n  \r\n              <div style={{display: \"flex\"}}>\r\n                <div className='container-card' style={{marginRight: \"-16px\"}}>\r\n                    <b>Senior Citizen ID:</b>\r\n                    <div className=\"profile-infield\">\r\n                        <input\r\n                          type=\"text\"\r\n                          placeholder=\"Senior Citizen ID Number\"\r\n                          id=\"seniorId\"\r\n                          name=\"seniorId\"\r\n                          value={seniorId}\r\n                          onChange={(e) => setSeniorId(e.target.value)}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className='container-card'>\r\n                  <b>Philhealth ID:</b>\r\n                  <div className=\"profile-infield\" style={{width: \"22vw\", marginRight: \"-30px\"}}>\r\n                    <input\r\n                      type=\"text\"\r\n                      placeholder=\"PhilHealth ID Number\"\r\n                      id=\"philhealthId\"\r\n                      name=\"philhealthId\"\r\n                      value={philhealthId}\r\n                      onChange={(e) => setPhilhealthId(e.target.value)}\r\n                    />\r\n                  </div>\r\n                  </div>\r\n                <div className='container-card'>\r\n                  <b>PWD ID:</b>\r\n                  <div className=\"profile-infield\" style={{width: \"20.5vw\"}}>\r\n                    <input\r\n                      type=\"text\"\r\n                      placeholder=\"PWD ID Number\"\r\n                      id=\"pwdId\"\r\n                      name=\"pwdId\"\r\n                      value={pwdId}\r\n                      onChange={(e) => setPwdId(e.target.value)}\r\n                    />\r\n                 </div>\r\n              </div>\r\n              </div>\r\n                      <br />\r\n                        <br />\r\n                        <button type=\"button\" onClick={handleEdit} style={{marginLeft: \"18%\", borderRadius: 0, width: \"300px\"}}>Save Changes</button>\r\n                        <button type=\"button\" onClick={handleChangePassword} style={{marginLeft: \"50px\",borderRadius: 0, width: \"300px\", backgroundColor: \"gray\"}}>Change Password</button>\r\n                        {editMessage && <p>{editMessage}</p>}\r\n                        <br />\r\n                        <br />\r\n                        <br />\r\n\r\n                    </div>\r\n            </div>\r\n        </div>\r\n        <PatientFooter />\r\n        {isAvatarSelectionOpen && (\r\n        <AvatarSelectionPopup\r\n          avatars={[avatar01, avatar02, avatar03, avatar04, avatar05,\r\n            avatar06, avatar07, avatar08, avatar09, avatar10,\r\n            avatar11, avatar12, avatar13, avatar14, avatar15,\r\n            avatar16, avatar17, avatar18]}\r\n            selectedAvatar={avatar}\r\n            onSelectAvatar={(selectedAvatar) => handleAvatarSelection(selectedAvatar)}\r\n          onClose={() => setAvatarSelectionOpen(false)}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditPatientProfile;","D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\pages\\AppointmentPages\\AddClinic.jsx",["274","275","276","277","278","279","280","281","282"],[],"import React, { useState} from 'react';\nimport \"../../styles/Register.css\";\nimport { useParams } from 'react-router-dom';\n\nconst AddClinic = () => {\n  const {doctorUserId} = useParams();\n  const [name, setName] = useState('');\n  const [address, setAddress] = useState('');\n  const [officeNumber, setOfficeNumber] = useState('');\n  const [officeEmail, setOfficeEmail] = useState('');\n  const [hospital, setHospital] = useState('');\n  const [addClinicMessage, setAddClinicMessage] = useState('');\n  const [registrationSuccessful, setRegistrationSuccessful] = useState(false);\n  const [slots, setSlots] = useState(''); //needs to be not hardcoded zzz\n  const [checkedDays, setCheckedDays] = useState([]);\n\n\n  \n  const handleAddClinic = async () => {\n    // Check if any of the fields are empty\n    if (\n      !name ||\n      !address ||\n      !officeNumber ||\n      !officeEmail \n    ) {\n      setAddClinicMessage('Please fill in all required fields.');\n      return;\n    }\n\n    const officeNumberRegex = /^\\d{11}$/;\n    if (!officeNumberRegex.test(officeNumber)) {\n      setAddClinicMessage('Contact number should be exactly 11 digits and contain only numbers (0-9).');\n      return;\n    }\n\n    // Validate email format using regular expression\n    const officeEmailRegex = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/;\n    if (!officeEmailRegex.test(officeEmail)) {\n      setAddClinicMessage('Invalid email format.');\n      return;\n    }\n\n    try {\n      const url = new URL('http://localhost:8080/clinic');\n      const userData = {\n        name,\n        address,\n        officeNumber,\n        officeEmail,\n        hospital,\n      };\n\n\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(userData),\n      });\n\n      if (response.ok) {\n        // Signup successful\n        setAddClinicMessage('Clinic added successfully');\n        setRegistrationSuccessful(true);\n        handleAddSchedule();\n \n      } else {\n        // Signup failed\n        const errorMessage = await response.text();\n        setAddClinicMessage(errorMessage);\n        setAddClinicMessage(`Signup failed`);\n        // Handle the error or display an error message to the user\n      }\n    } catch (error) {\n      console.error('Error during signup:', error);\n      setAddClinicMessage('Error during signup. Please try again later.');\n      // Handle the error or display an error message to the user\n    }\n  }\n  const handleDayCheckboxChange = (day, isChecked) => {\n    if (isChecked) {\n      // Add the day to the list of checked days\n      setCheckedDays((prevCheckedDays) => [...prevCheckedDays, day]);\n    } else {\n      // Remove the day from the list of checked days\n      setCheckedDays((prevCheckedDays) => prevCheckedDays.filter((d) => d !== day));\n    }\n  };\n  \n  const handleAddSchedule = async () => {\n    if (checkedDays.length === 0) {\n      console.error('No days selected for schedule.');\n      return;\n    }\n  \n    // Iterate through the list of checked days and make API calls for each day\n    checkedDays.forEach(async (day) => {\n      // Construct the query string for the specific day\n      const queryString = `name=${name}&doctorUserId=${doctorUserId}&scheduleDay=${day}&startTime=${document.getElementById(`${day}StartTime`).value}&endTime=${document.getElementById(`${day}EndTime`).value}&slots=${slots}`;\n      \n      try {\n        const response = await fetch(`http://localhost:8080/schedule?${queryString}`, {\n          method: 'POST',\n        });\n  \n        if (response.ok) {\n          // Schedule added successfully for the current day\n          window.location.href = '/doclogin'\n        } else {\n          // Schedule addition failed for the current day\n          const errorMessage = await response.text();\n          console.error(`Schedule addition failed for ${day}: ${errorMessage}`);\n          \n        }\n      } catch (error) {\n        console.error(`Error during schedule addition for ${day}:`, error);\n        \n      }\n    });\n  };\n  \n  \n\n  const [showMondayTableData, setShowMondayTableData] = useState(false);\n  const handleMondayCheckboxChange = (event) => {\n    setShowMondayTableData(event.target.checked);\n    if (event.target.checked) {\n      handleDayCheckboxChange('Monday', true);\n    } else {\n      handleDayCheckboxChange('Monday', false);\n    }\n  };\n\n  const [showTuesdayTableData, setShowTuesdayTableData] = useState(false);\n  const handleTuesdayCheckboxChange = (event) => {\n    setShowTuesdayTableData(event.target.checked);\n    if (event.target.checked) {\n      handleDayCheckboxChange('Tuesday', true);\n    } else {\n      handleDayCheckboxChange('Tuesday', false);\n    }\n  };\n\n  const [showWednesdayTableData, setShowWednesdayTableData] = useState(false);\n  const handleWednesdayCheckboxChange = (event) => {\n    setShowWednesdayTableData(event.target.checked);\n    if (event.target.checked) {\n      handleDayCheckboxChange('Wednesday', true);\n    } else {\n      handleDayCheckboxChange('Wednesday', false);\n    }\n  };\n\n  const [showThursdayTableData, setShowThursdayTableData] = useState(false);\n  const handleThursdayCheckboxChange = (event) => {\n    setShowThursdayTableData(event.target.checked);\n    if (event.target.checked) {\n      handleDayCheckboxChange('Thursday', true);\n    } else {\n      handleDayCheckboxChange('Thursday', false);\n    }\n  };\n\n  const [showFridayTableData, setShowFridayTableData] = useState(false);\n  const handleFridayCheckboxChange = (event) => {\n    setShowFridayTableData(event.target.checked);\n    if (event.target.checked) {\n      handleDayCheckboxChange('Friday', true);\n    } else {\n      handleDayCheckboxChange('Friday', false);\n    }\n  };\n\n  const [showSaturdayTableData, setShowSaturdayTableData] = useState(false);\n  const handleSaturdayCheckboxChange = (event) => {\n    setShowSaturdayTableData(event.target.checked);\n    if (event.target.checked) {\n      handleDayCheckboxChange('Saturday', true);\n    } else {\n      handleDayCheckboxChange('Saturday', false);\n    }\n  };\n\n\n  const [showSundayTableData, setShowSundayTableData] = useState(false);\n  const handleSundayCheckboxChange = (event) => {\n    setShowSundayTableData(event.target.checked);\n    if (event.target.checked) {\n      handleDayCheckboxChange('Sunday', true);\n    } else {\n      handleDayCheckboxChange('Sunday', false);\n    }\n  };\n\n  const [showMondayAddTimeSlot, setShowMondayAddTimeSlot] = useState(false);\n  const handleMondayAddTimeSlotClick = () => {\n    setShowMondayAddTimeSlot(!showMondayAddTimeSlot);\n  };\n\n  const [showTuesdayAddTimeSlot, setShowTuesdayAddTimeSlot] = useState(false);\n  const handleTuesdayAddTimeSlotClick = () => {\n    setShowTuesdayAddTimeSlot(!showTuesdayAddTimeSlot);\n  };\n\n  const [showWednesdayAddTimeSlot, setShowWednesdayAddTimeSlot] = useState(false);\n  const handleWednesdayAddTimeSlotClick = () => {\n    setShowWednesdayAddTimeSlot(!showWednesdayAddTimeSlot);\n  };\n\n  const [showThursdayAddTimeSlot, setShowThursdayAddTimeSlot] = useState(false);\n  const handleThursdayAddTimeSlotClick = () => {\n    setShowThursdayAddTimeSlot(!showThursdayAddTimeSlot);\n  };\n\n  const [showFridayAddTimeSlot, setShowFridayAddTimeSlot] = useState(false);\n  const handleFridayAddTimeSlotClick = () => {\n    setShowFridayAddTimeSlot(!showFridayAddTimeSlot);\n  };\n\n  const [showSaturdayAddTimeSlot, setShowSaturdayAddTimeSlot] = useState(false);\n  const handleSaturdayAddTimeSlotClick = () => {\n    setShowSaturdayAddTimeSlot(!showSaturdayAddTimeSlot);\n  };\n\n  const [showSundayAddTimeSlot, setShowSundayAddTimeSlot] = useState(false);\n  const handleSundayAddTimeSlotClick = () => {\n    setShowSundayAddTimeSlot(!showSundayAddTimeSlot);\n  };\n\n  // useEffect(() => {\n  //   console.log('Checked Days:', checkedDays.join(', '));\n  // }, [checkedDays]);\n\n\n  return (\n    <div className=\"reg-container\" id=\"reg-container\" >\n      <div className=\"register\">\n        <h1 style={{ color: '#0094d4'}}>Add Clinic</h1>\n        <form action=\"#\" id=\"register-form\" >\n            <div className=\"reg-infield\">              \n                <input type=\"text\"\n                  id=\"name\"\n                  placeholder=\"*Clinic Name\"\n                  name=\"name\"\n                  value={name}\n                  onChange={(e) => setName(e.target.value)}\n                />\n            </div>\n            <div className=\"reg-infield\">          \n                <input type=\"text\"\n                  id=\"address\"\n                  placeholder=\"*(House/Lot/Unit No., Street, Barangay, City/Town, Province)\"\n                  name=\"address\"\n                  value={address}\n                  onChange={(e) => setAddress(e.target.value)}\n                />\n          </div>\n            <div className=\"reg-infield\">\n              <input type=\"text\"\n                  id=\"officeNumber\"\n                  placeholder=\"*Office Number\"\n                  name=\"officeNumber\"\n                  value={officeNumber}\n                  onChange={(e) => setOfficeNumber(e.target.value)}\n                />\n            </div>\n            <div className=\"reg-infield\">\n              <input type=\"text\"\n                  id=\"officeEmail\"\n                  placeholder=\"*Office Email\"\n                  name=\"officeEmail\"\n                  value={officeEmail}\n                  onChange={(e) => setOfficeEmail(e.target.value)}\n                />\n          </div>\n          <div className=\"reg-infield\">              \n              <input type=\"text\"\n                  id=\"hospital\"\n                  placeholder=\"Hospital Affiliation\"\n                  name=\"hospital\"\n                  value={hospital}\n                  onChange={(e) => setHospital(e.target.value)}\n                />\n            </div>\n            <div className='reg-row'>\n                <div className='reg-infield'>\n                    <h4 style={{ marginBottom: '-30px' }}>Schedule: </h4>\n                    <p style={{ marginBottom: '-5px' }}>Select all that applies</p>\n                </div>\n              </div>\n            <div className='reg-row' style={{ overflowY: 'auto', maxHeight: '200px'}}>\n                <div className='reg-infield'>\n                  <table width={650}>\n                    <tr name='mondayRow'>\n                      <td width={25}><input type='checkbox' name='mondayCheckbox' onChange={handleMondayCheckboxChange}/></td>\n                      <td width={0}>Monday</td>\n                      {showMondayTableData && (<>\n                        <td width={50}>Time: </td>\n                        <td width={85}><input type=\"text\" id='MondayStartTime' placeholder='08:00' style={{paddingRight: \"0px\"}}/></td>\n                        <td width={85}><select name=\"MondayStartTime\" id=\"MondayStartTime\">\n                          <option value=\"AM\">AM</option>\n                          <option value=\"PM\">PM</option>\n                          </select></td>\n                        <td width={20}>to</td>\n                        <td width={85}><input type=\"text\" id='MondayEndTime' placeholder='12:00'style={{paddingRight: \"0px\"}}/></td>\n                        <td width={85}><select name=\"MondayEndTime\" id=\"MondayEndTime\">\n                          <option value=\"AM\">AM</option>\n                          <option value=\"PM\">PM</option>\n                          </select></td>\n                        <td width={60} style={{paddingBottom: \"0px\", paddingLeft: \"5px\"}}>Slots: </td>                      \n                        <td width={40}><input type='text' placeholder='0'   onChange={(e) => setSlots(e.target.value)}/></td>\n                        <td style={{paddingLeft: \"10px\", verticalAlign: \"middle\", width: \"150px\"}}><a href='#' onClick={handleMondayAddTimeSlotClick}><u>Add Time Slot</u></a></td>\n                      </>)}\n                    </tr>\n                    {showMondayTableData && showMondayAddTimeSlot && (<>\n                    <tr>\n                        <td width={25}></td>\n                        <td width={0}></td>\n                        <td width={50}>Time: </td>\n                        <td width={85}><input type=\"text\" id='MondayStartTime' placeholder='08:00' style={{paddingRight: \"0px\"}}/></td>\n                        <td width={85}><select name=\"MondayStartTime\" id=\"MondayStartTime\">\n                          <option value=\"AM\">AM</option>\n                          <option value=\"PM\">PM</option>\n                          </select></td>\n                        <td width={20}>to</td>\n                        <td width={85}><input type=\"text\" id='MondayEndTime' placeholder='12:00'style={{paddingRight: \"0px\"}}/></td>\n                        <td width={85}><select name=\"MondayEndTime\" id=\"MondayEndTime\">\n                          <option value=\"AM\">AM</option>\n                          <option value=\"PM\">PM</option>\n                          </select></td>\n                        <td width={60} style={{paddingBottom: \"0px\", paddingLeft: \"5px\"}}>Slots: </td>\n                        <td width={40}><input type='text' placeholder='0'  onChange={(e) => setSlots(e.target.value)}/></td>\n                    </tr>\n                    </>)}\n                    <tr name='tuesdayRow'>\n                      <td width={25}><input type='checkbox' name='tuesdayCheckbox' onChange={handleTuesdayCheckboxChange}/></td>\n                      <td width={0}>Tuesday</td>\n                      {showTuesdayTableData && (<>\n                        <td width={50}>Time: </td>\n                        <td width={85}><input type=\"text\" id='TuesdayStartTime'  placeholder='08:00'/></td>\n                        <td width={85}><select name=\"TuesdayStartTime\" id=\"TuesdayStartTime\">\n                          <option value=\"AM\">AM</option>\n                          <option value=\"PM\">PM</option>\n                          </select></td>\n                        <td width={20}>to</td>\n                        <td width={85}><input type=\"text\" id='TuesdayEndTime'  placeholder='12:00'/></td>\n                        <td width={85}><select name=\"TuesdayEndTime\" id=\"TuesdayEndTime\">\n                          <option value=\"AM\">AM</option>\n                          <option value=\"PM\">PM</option>\n                          </select></td>\n                          <td width={60} style={{paddingBottom: \"0px\", paddingLeft: \"5px\"}}>Slots: </td>\n                          <td width={40}><input type='text' placeholder='0' onChange={(e) => setSlots(e.target.value)}/></td>\n                          <td style={{verticalAlign: \"middle\", paddingLeft: \"10px\", paddingTop: \"2px\", width: \"150px\"}}><a href='#' onClick={handleTuesdayAddTimeSlotClick}><u>Add Time Slot</u></a></td>\n                      </>)}\n                    </tr>\n                    {showTuesdayTableData && showTuesdayAddTimeSlot && (<>\n                    <tr>\n                        <td width={25}></td>\n                        <td width={0}></td>\n                        <td width={50}>Time: </td>\n                        <td width={85}><input type=\"text\" id='TuesdayStartTime'  placeholder='08:00'/></td>\n                        <td width={85}><select name=\"TuesdayStartTime\" id=\"TuesdayStartTime\">\n                          <option value=\"AM\">AM</option>\n                          <option value=\"PM\">PM</option>\n                          </select></td>\n                        <td width={20}>to</td>\n                        <td width={85}><input type=\"text\" id='TuesdayEndTime'  placeholder='12:00'/></td>\n                        <td width={85}><select name=\"TuesdayEndTime\" id=\"TuesdayEndTime\">\n                          <option value=\"AM\">AM</option>\n                          <option value=\"PM\">PM</option>\n                          </select></td>\n                        <td width={60} style={{paddingBottom: \"0px\", paddingLeft: \"5px\"}}>Slots: </td>\n                        <td width={40}><input type='text' placeholder='0'  onChange={(e) => setSlots(e.target.value)} /></td>\n                    </tr>\n                    </>)}\n                    <tr name='wednesdayRow'>\n                      <td width={25}><input type='checkbox' name='wednesdayCheckbox' onChange={handleWednesdayCheckboxChange}/></td>\n                      <td width={0}>Wednesday</td>\n                      {showWednesdayTableData && (<>\n                        <td width={50}>Time: </td>\n                        <td width={85}><input type=\"text\" id='WednesdayStartTime'  placeholder='08:00'/></td>\n                        <td width={85}><select name=\"WednesdayStartTime\" id=\"WednesdayStartTime\">\n                          <option value=\"AM\">AM</option>\n                          <option value=\"PM\">PM</option>\n                          </select></td>\n                        <td width={20}>to</td>\n                        <td width={85}><input type=\"text\" id='WednesdayEndTime'  placeholder='12:00'/></td>\n                        <td width={85}><select name=\"WednesdayEndTime\" id=\"WednesdayEndTime\">\n                          <option value=\"AM\">AM</option>\n                          <option value=\"PM\">PM</option>\n                          </select></td>\n                          <td width={60} style={{paddingBottom: \"0px\", paddingLeft: \"5px\"}}>Slots: </td>\n                          <td width={40}><input type='text' placeholder='0' onChange={(e) => setSlots(e.target.value)}/></td>\n                          <td style={{verticalAlign: \"middle\", paddingLeft: \"10px\", paddingTop: \"2px\"}}><a href='#' onClick={handleWednesdayAddTimeSlotClick}><u>Add Time Slot</u></a></td>\n                      </>)}\n                    </tr>\n                    {showWednesdayTableData && showWednesdayAddTimeSlot && (<>\n                    <tr>\n                        <td width={25}></td>\n                        <td width={0}></td>\n                        <td width={50}>Time: </td>\n                        <td width={85}><input type=\"text\" id='WednesdayStartTime'  placeholder='08:00'/></td>\n                        <td width={85}><select name=\"WednesdayStartTime\" id=\"WednesdayStartTime\">\n                          <option value=\"AM\">AM</option>\n                          <option value=\"PM\">PM</option>\n                          </select></td>\n                        <td width={20}>to</td>\n                        <td width={85}><input type=\"text\" id='WednesdayEndTime'  placeholder='12:00'/></td>\n                        <td width={85}><select name=\"WednesdayEndTime\" id=\"WednesdayEndTime\">\n                          <option value=\"AM\">AM</option>\n                          <option value=\"PM\">PM</option>\n                          </select></td>\n                        <td width={60} style={{paddingBottom: \"0px\", paddingLeft: \"5px\"}}>Slots: </td>\n                        <td width={40}><input type='text' placeholder='0'  onChange={(e) => setSlots(e.target.value)}/></td>\n                    </tr>\n                    </>)}\n                    <tr name='thursdayRow'>\n                      <td width={25}><input type='checkbox' name='thursdayCheckbox' onChange={handleThursdayCheckboxChange}/></td>\n                      <td width={0}>Thursday</td>\n                      {showThursdayTableData && (<>\n                        <td width={50}>Time: </td>\n                        <td width={85}><input type=\"text\" id='ThursdayStartTime'  placeholder='08:00'/></td>\n                        <td width={85}><select name=\"ThursdayStartTime\" id=\"ThursdayStartTime\">\n                          <option value=\"AM\">AM</option>\n                          <option value=\"PM\">PM</option>\n                          </select></td>\n                        <td width={20}>to</td>\n                        <td width={85}><input type=\"text\" id='ThursdayEndTime'  placeholder='12:00'/></td>\n                        <td width={85}><select name=\"ThursdayEndTime\" id=\"ThursdayEndTime\">\n                          <option value=\"AM\">AM</option>\n                          <option value=\"PM\">PM</option>\n                          </select></td>\n                          <td width={60} style={{paddingBottom: \"0px\", paddingLeft: \"5px\"}}>Slots: </td>\n                          <td width={40}><input type='text' placeholder='0' onChange={(e) => setSlots(e.target.value)}/></td>\n                          <td style={{verticalAlign: \"middle\", paddingLeft: \"10px\", paddingTop: \"2px\"}}><a href='#' onClick={handleThursdayAddTimeSlotClick}><u>Add Time Slot</u></a></td>\n                      </>)}\n                    </tr>\n                    {showThursdayTableData && showThursdayAddTimeSlot && (<>\n                    <tr>\n                        <td width={25}></td>\n                        <td width={0}></td>\n                        <td width={50}>Time: </td>\n                        <td width={85}><input type=\"text\" id='ThursdayStartTime'  placeholder='08:00'/></td>\n                        <td width={85}><select name=\"ThursdayStartTime\" id=\"ThursdayStartTime\">\n                          <option value=\"AM\">AM</option>\n                          <option value=\"PM\">PM</option>\n                          </select></td>\n                        <td width={20}>to</td>\n                        <td width={85}><input type=\"text\" id='ThursdayEndTime'  placeholder='12:00'/></td>\n                        <td width={85}><select name=\"ThursdayEndTime\" id=\"ThursdayEndTime\">\n                          <option value=\"AM\">AM</option>\n                          <option value=\"PM\">PM</option>\n                          </select></td>\n                        <td width={60} style={{paddingBottom: \"0px\", paddingLeft: \"5px\"}}>Slots: </td>\n                        <td width={40}><input type='text' placeholder='0'  onChange={(e) => setSlots(e.target.value)}/></td>\n                    </tr>\n                    </>)}\n                    <tr name='fridayRow'>\n                      <td width={25}><input type='checkbox' name='fridayCheckbox' onChange={handleFridayCheckboxChange}/></td>\n                      <td width={0}>Friday</td>\n                      {showFridayTableData && (<>\n                        <td width={50}>Time: </td>\n                        <td width={85}><input type=\"text\" id='FridayStartTime'  placeholder='08:00'/></td>\n                        <td width={85}><select name=\"FridayStartTime\" id=\"FridayStartTime\">\n                          <option value=\"AM\">AM</option>\n                          <option value=\"PM\">PM</option>\n                          </select></td>\n                        <td width={20}>to</td>\n                        <td width={85}><input type=\"text\" id='FridayEndTime'  placeholder='12:00'/></td>\n                        <td width={85}><select name=\"FridayEndTime\" id=\"FridayEndTime\">\n                          <option value=\"AM\">AM</option>\n                          <option value=\"PM\">PM</option>\n                          </select></td>\n                          <td width={60} style={{paddingBottom: \"0px\", paddingLeft: \"5px\"}}>Slots: </td>\n                          <td width={40}><input type='text' placeholder='0'  onChange={(e) => setSlots(e.target.value)}/></td>\n                          <td style={{verticalAlign: \"middle\", paddingLeft: \"10px\", paddingTop: \"2px\"}}><a href='#' onClick={handleFridayAddTimeSlotClick}><u>Add Time Slot</u></a></td>\n                      </>)}\n                    </tr>\n                    {showFridayTableData && showFridayAddTimeSlot && (<>\n                    <tr>\n                        <td width={25}></td>\n                        <td width={0}></td>\n                        <td width={50}>Time: </td>\n                        <td width={85}><input type=\"text\" id='FridayStartTime'  placeholder='08:00'/></td>\n                        <td width={85}><select name=\"FridayStartTime\" id=\"FridayStartTime\">\n                          <option value=\"AM\">AM</option>\n                          <option value=\"PM\">PM</option>\n                          </select></td>\n                        <td width={20}>to</td>\n                        <td width={85}><input type=\"text\" id='FridayEndTime'  placeholder='12:00'/></td>\n                        <td width={85}><select name=\"FridayEndTime\" id=\"FridayEndTime\">\n                          <option value=\"AM\">AM</option>\n                          <option value=\"PM\">PM</option>\n                          </select></td>\n                        <td width={60} style={{paddingBottom: \"0px\", paddingLeft: \"5px\"}}>Slots: </td>\n                        <td width={40}><input type='text' placeholder='0'  onChange={(e) => setSlots(e.target.value)}/></td>\n                    </tr>\n                    </>)}\n                    <tr name='saturdayRow'>\n                      <td width={25}><input type='checkbox' name='saturdayCheckbox' onChange={handleSaturdayCheckboxChange}/></td>\n                      <td width={0}>Saturday</td>\n                      {showSaturdayTableData && (<>\n                        <td width={50}>Time: </td>\n                        <td width={85}><input type=\"text\" id='SaturdayStartTime'  placeholder='08:00'/></td>\n                        <td width={85}><select name=\"SaturdayStartTime\" id=\"SaturdayStartTime\">\n                          <option value=\"AM\">AM</option>\n                          <option value=\"PM\">PM</option>\n                          </select></td>\n                        <td width={20}>to</td>\n                        <td width={85}><input type=\"text\" id='SaturdayEndTime'  placeholder='12:00'/></td>\n                        <td width={85}><select name=\"SaturdayEndTime\" id=\"SaturdayEndTime\">\n                          <option value=\"AM\">AM</option>\n                          <option value=\"PM\">PM</option>\n                          </select></td>\n                          <td width={60} style={{paddingBottom: \"0px\", paddingLeft: \"5px\"}}>Slots: </td>\n                          <td width={40}><input type='text' placeholder='0' onChange={(e) => setSlots(e.target.value)}/></td>\n                          <td style={{verticalAlign: \"middle\", paddingLeft: \"10px\", paddingTop: \"2px\"}}><a href='#' onClick={handleSaturdayAddTimeSlotClick}><u>Add Time Slot</u></a></td>\n                      </>)}\n                    </tr>\n                    {showSaturdayTableData && showSaturdayAddTimeSlot && (<>\n                    <tr>\n                        <td width={25}></td>\n                        <td width={0}></td>\n                        <td width={50}>Time: </td>\n                        <td width={85}><input type=\"text\" id='SaturdayStartTime'  placeholder='08:00'/></td>\n                        <td width={85}><select name=\"SaturdayStartTime\" id=\"SaturdayStartTime\">\n                          <option value=\"AM\">AM</option>\n                          <option value=\"PM\">PM</option>\n                          </select></td>\n                        <td width={20}>to</td>\n                        <td width={85}><input type=\"text\" id='SaturdayEndTime'  placeholder='12:00'/></td>\n                        <td width={85}><select name=\"SaturdayEndTime\" id=\"SaturdayEndTime\">\n                          <option value=\"AM\">AM</option>\n                          <option value=\"PM\">PM</option>\n                          </select></td>\n                        <td width={60} style={{paddingBottom: \"0px\", paddingLeft: \"5px\"}}>Slots: </td>\n                        <td width={40}><input type='text' placeholder='0'  onChange={(e) => setSlots(e.target.value)}/></td>\n                    </tr>\n                    </>)}\n                    <tr name='sundayRow'>\n                      <td width={25}><input type='checkbox' name='sundayCheckbox' onChange={handleSundayCheckboxChange}/></td>\n                      <td width={0}>Sunday</td>\n                      {showSundayTableData && (<>\n                        <td width={50}>Time: </td>\n                        <td width={85}><input type=\"text\" id='SundayStartTime'  placeholder='08:00'/></td>\n                        <td width={85}><select name=\"SundayStartTime\" id=\"SundayStartTime\">\n                          <option value=\"AM\">AM</option>\n                          <option value=\"PM\">PM</option>\n                          </select></td>\n                        <td width={20}>to</td>\n                        <td width={85}><input type=\"text\" id='SundayEndTime'  placeholder='12:00'/></td>\n                        <td width={85}><select name=\"SundayEndTime\" id=\"SundayEndTime\">\n                          <option value=\"AM\">AM</option>\n                          <option value=\"PM\">PM</option>\n                          </select></td>\n                          <td width={60} style={{paddingBottom: \"0px\", paddingLeft: \"5px\"}}>Slots: </td>\n                          <td width={40}><input type='text' placeholder='0'  onChange={(e) => setSlots(e.target.value)}/></td>\n                          <td style={{verticalAlign: \"middle\", paddingLeft: \"10px\", paddingTop: \"2px\"}}><a href='#' onClick={handleSundayAddTimeSlotClick}><u>Add Time Slot</u></a></td>\n                      </>)}\n                    </tr>\n                    {showSundayTableData && showSundayAddTimeSlot && (<>\n                    <tr>\n                        <td width={25}></td>\n                        <td width={0}></td>\n                        <td width={50}>Time: </td>\n                        <td width={85}><input type=\"text\" id='SundayStartTime'  placeholder='08:00'/></td>\n                        <td width={85}><select name=\"SundayStartTime\" id=\"SundayStartTime\">\n                          <option value=\"AM\">AM</option>\n                          <option value=\"PM\">PM</option>\n                          </select></td>\n                        <td width={20}>to</td>\n                        <td width={85}><input type=\"text\" id='SundayEndTime'  placeholder='12:00'/></td>\n                        <td width={85}><select name=\"SundayEndTime\" id=\"SundayEndTime\">\n                          <option value=\"AM\">AM</option>\n                          <option value=\"PM\">PM</option>\n                          </select></td>\n                        <td width={60} style={{paddingBottom: \"0px\", paddingLeft: \"5px\"}}>Slots: </td>\n                        <td width={40}><input type='text' placeholder='0'  onChange={(e) => setSlots(e.target.value)}/></td>\n                    </tr>\n                    </>)}\n                  </table> \n                </div>\n            </div>\n        </form>\n        <button type=\"button\" onClick={handleAddClinic}>Register</button>\n      </div>\n    </div>\n  );\n};\n\nexport default AddClinic;","D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\pages\\AdminHome.jsx",["283"],[],"import React, { useState, useEffect } from 'react';\nimport \"../styles/Search.css\";\nimport { Link } from 'react-router-dom';\nimport HomeFooter from '../components/HomeFooter';\nimport HomeNavbar from '../components/HomeNavbar';\nimport DoctorForApproval from '../components/DoctorsForApproval';\nimport Popup from '../components/Popup'\nimport avatar00 from '../images/defaultIcon.png';\nimport avatar01 from '../assets/DoctorIcons/Icon01.png';\nimport avatar02 from '../assets/DoctorIcons/Icon02.png';\nimport avatar03 from '../assets/DoctorIcons/Icon03.png';\nimport avatar04 from '../assets/DoctorIcons/Icon04.png';\nimport avatar05 from '../assets/DoctorIcons/Icon05.png';\nimport avatar06 from '../assets/DoctorIcons/Icon06.png';\nimport avatar07 from '../assets/DoctorIcons/Icon07.png';\nimport avatar08 from '../assets/DoctorIcons/Icon08.png';\nimport avatar09 from '../assets/DoctorIcons/Icon09.png';\nimport avatar10 from '../assets/DoctorIcons/Icon10.png';\nimport avatar11 from '../assets/DoctorIcons/Icon11.png';\nimport avatar12 from '../assets/DoctorIcons/Icon12.png';\nimport avatar13 from '../assets/DoctorIcons/Icon13.png';\nimport avatar14 from '../assets/DoctorIcons/Icon14.png';\n\nfunction AdminHome() {\n  const [message, setMessage] = useState('');\n  const [approved] = useState('Verified by Admin')\n  const [reject] = useState('Rejected by Admin')\n  const [selectedAvatar, setSelectedAvatar] = useState('');\n  const [isPopupVisible, setPopupVisibility] = useState(false);\n  const [doctors, setDoctors] = useState([\n    {\n      doctorId: '',\n      firstName: '',\n      lastName: '',\n      contactNumber: '',\n      specialization: '',\n      credentials: '',\n      profilePicture: '',\n    }]);\n  const [result, setResult] = useState('');\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [currentDoctor, setCurrentDoctor] = useState('');\n  const [avatar] = useState(currentDoctor.profilePicture ||'');\n  const [schedules, setSchedules] = useState([\n    {\n      doctorUserId: '',\n      clinicId: '',\n      clinicName: '',\n      clinicAddress: '',\n      clinicNumber: '',\n      scheduleDay: '',\n      slots: '',\n    }\n  ]);\n  const [isAdminLoggedIn, setIsAdminLoggedIn] = useState('')\n  useEffect(() => {\n    const fetchLoggedInPatientId = async () => {\n      try {\n        const response = await fetch('http://localhost:8080/checkLoggedInAdmin');\n        if (response.ok) {\n          setIsAdminLoggedIn(true);\n        } else {\n          setIsAdminLoggedIn(false);\n        }\n      } catch (error) {\n        setIsAdminLoggedIn(false);\n        // Handle the error or provide feedback to the user\n      }\n    };\n\n    fetchLoggedInPatientId();\n  }, []); // \n    useEffect(() => {\n      const fetchSchedules = async () => {\n        try {\n          const response = await fetch('http://localhost:8080/schedules');\n          \n          if (!response.ok) {\n            throw new Error('Failed to fetch schedules');\n          }\n  \n          const schedulesData = await response.json();\n          const formattedSchedules = schedulesData.map((schedulesData) => ({\n            doctorUserId: schedulesData.doctorUserId,\n            clinicId: schedulesData.clinicId,\n            clinicName: schedulesData.clinic.name ,\n            clinicAddress: schedulesData.clinic.address,\n            clinicNumber: schedulesData.clinic.officeNumber,\n            scheduleDay: schedulesData.scheduleDay,\n            slots: schedulesData.slots,\n          }));\n  \n          setSchedules(formattedSchedules);\n          console.log(\"nakuha q sched hehe\");\n  \n        } catch (error) {\n          console.error('Error fetching schedules:', error.message);\n        }\n      };\n  \n      fetchSchedules();\n    }, []);\n  \n  \n    useEffect(() => {\n      const fetchAllDoctors = async () => {\n        try {\n          const response = await fetch('http://localhost:8080/allusers');\n  \n          if (response.ok) {\n            const data = await response.json();\n            const formattedDoctors = data.map((doctorData) => ({\n              doctorId: doctorData.userId,\n              firstName: `Dr. ${doctorData.user.firstName}`,\n              lastName: doctorData.user.lastName,\n              contactNumber: doctorData.user.contactNumber,\n              specialization: doctorData.specialization,\n              credentials: doctorData.credentials,\n              profilePicture: doctorData.user.avatar\n            }));\n  \n            setDoctors(formattedDoctors);\n          } else {\n            setError('Failed to fetch doctors');\n          }\n        } catch (error) {\n          setError('Error while fetching doctors');\n        } finally {\n          setIsLoading(false);\n        }\n      };\n  \n      fetchAllDoctors();\n    }, []);\n  \n    const setDisplayedAvatars = (avatar) => {\n      const avatarImports = {\n      'avatar01': avatar01,\n      'avatar02': avatar02,\n      'avatar03': avatar03,\n      'avatar04': avatar04,\n      'avatar05': avatar05,\n      'avatar06': avatar06,\n      'avatar07': avatar07,\n      'avatar08': avatar08,\n      'avatar09': avatar09,\n      'avatar10': avatar10,\n      'avatar11': avatar11,\n      'avatar12': avatar12,\n      'avatar13': avatar13,\n      'avatar14': avatar14,\n    };\n  \n      // Set selectedAvatar using the corresponding import\n      setSelectedAvatar(avatarImports[avatar] || avatar00);\n    };\n  \n  \n    useEffect(() => {\n      // Set displayed avatars based on the doctor's avatar value\n      setDisplayedAvatars(currentDoctor.profilePicture);\n    }, [currentDoctor.profilePicture]);\n\n    const [uniqueClinics, setUniqueClinics] = useState([]);\n\n    const getDoctorClinics = (doctorId) => {\n      // Filter schedules based on the doctorId\n      const doctorSchedules = schedules.filter((schedule) => schedule.doctorUserId === doctorId);\n\n      // Extract unique clinic IDs\n      const uniqueClinicIds = Array.from(new Set(doctorSchedules.map((schedule) => schedule.clinicId)));\n\n      // Create an array of objects for each unique clinic ID\n      const uniqueClinicInfo = uniqueClinicIds.map((clinicId) => {\n        const clinicSchedules = doctorSchedules.filter((schedule) => schedule.clinicId === clinicId);\n        const clinicName = clinicSchedules[0]?.clinicName || ''; // Get the clinic name from the first schedule\n        const clinicAddress = clinicSchedules[0]?.clinicAddress || '';\n        const clinicNumber = clinicSchedules[0]?.clinicNumber || '';\n        const scheduleDays = Array.from(new Set(clinicSchedules.map((schedule) => schedule.scheduleDay)));\n\n        return {\n          clinicId,\n          clinicName,\n          clinicAddress,\n          clinicNumber,\n          scheduleDays,\n        };\n      });\n\n      // Set the extracted information in the component state\n      setUniqueClinics(uniqueClinicInfo);\n      console.log(uniqueClinics);\n    };\n  \n\n\n    if (isLoading) {\n      return <p>Loading...</p>;\n    }\n  \n    if (error) {\n      return <p>Error: {error}</p>;\n    }\n  const handleLogout = async () => {\n    try {\n        const response = await fetch(\"http://localhost:8080/adminlogout\", {\n        method: 'POST',\n        });\n\n        if (response.status === 200) {\n        setMessage('Logged out successfully');\n        window.location.href = '/';\n        } else if (response.status === 401) {\n        setMessage('No user is currently logged in');\n        } else {\n        setMessage('An error occurred');\n        }\n    } catch (error) {\n        setMessage('An error occurred');\n    }\n  };\n\n  const handleApprovalSubmit = async (doctorId) => {\n    try {\n      const url = `http://localhost:8080/approval?userId=${doctorId}&approvalStatus=${approved}`;\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n      });\n\n      if (response.ok) {\n        const data = await response.text();\n        setResult(data);\n      } else {\n        setResult('Error submitting approval');\n      }\n    } catch (error) {\n      console.error('Error submitting approval:', error);\n      setResult('Error submitting approval');\n    }\n  };\n\n  const handleRejectSubmit = async (doctorId) => {\n    try {\n      const url = `http://localhost:8080/approval?userId=${doctorId}&approvalStatus=${reject}`;\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n      });\n\n      if (response.ok) {\n        const data = await response.text();\n        setResult(data);\n      } else {\n        setResult('Error submitting approval');\n      }\n    } catch (error) {\n      console.error('Error submitting approval:', error);\n      setResult('Error submitting approval');\n    }\n  };\n\n\n  const closePopup = () => {\n    // Close the popup\n    setPopupVisibility(false);\n  };\n\n  const handleReview = (doctorId) => {\n    // Set the currentDoctor state based on the doctorId\n    setCurrentDoctor(doctors.find((doctor) => doctor.doctorId === doctorId) || {});\n    try {\n      // Call getDoctorClinics with the currentDoctor's doctorId\n      getDoctorClinics(doctorId);\n  \n      // If getDoctorClinics was successful, set the Popup visibility to true\n      setPopupVisibility(true);\n      setResult('');\n    } catch (error) {\n      // Handle the error as needed\n      console.error('Error fetching doctor clinics:', error);\n    }\n  };\n  \n  if (!isAdminLoggedIn) {\n    return (\n    <div>\n      <HomeNavbar/>\n      <div style={{ textAlign: 'center', marginTop: '50px' }}>\n        <h1>Admin is not logged in.</h1>\n        <Link to=\"/adminlog\"><button>Login</button></Link>\n      </div>\n      <HomeFooter/>\n    </div>\n      \n    );\n  }\n\n  return (\n    <div className=\"search-container\" id=\"container\">\n        <div id=\"navbar\">\n        <nav>\n            <ul>\n                <li style={{ float: 'left' }}>\n                    <Link to=\"/\">\n                    <img\n                    src={require('../images/DOC LOGO.png')}\n                    alt=\"Doc Click Connect\"\n                    style={{ maxWidth: '100px', maxHeight: '40px', marginRight: '20px', marginLeft: '-50px' }}\n                    /></Link>\n                </li>\n                <li style={{ float: 'right' }}>\n                <button onClick={handleLogout}>Log Out</button>\n                <p>{message}</p>\n              </li>\n            </ul>\n        </nav>\n    </div>\n    <div style={{ display: \"block\", width: \"100%\", marginTop: \"10%\"}}>\n          <h1 style={{textAlign: \"center\"}}>Doctor Profiles to Review</h1>\n          <div className=\"doctor-grid\" style={{marginLeft: \"7%\"}}>\n            {doctors.map((doctor, index) => (\n              <DoctorForApproval \n                key={index} \n                doctor={doctor} \n                onReview= {() => handleReview(doctor.doctorId)}/>\n            ))}\n          </div>\n      </div>\n      <HomeFooter />\n\n    {/* Popup */}\n    <Popup trigger={isPopupVisible}>\n            <form action=\"#\" id=\"signin-form\">\n              <div>\n                <h1 style={{float: \"left\", marginRight: \"225px\"}}>Doctor Details</h1>\n                <h1 style={{float: \"right\", fontSize: \"25px\", color: \"gray\", cursor: \"pointer\"}} onClick={closePopup}>x</h1>\n              </div>\n              <div className=\"infield\" style={{overflowY: 'auto', maxHeight: '500px' }}>\n              <div>\n                    {selectedAvatar && (\n                      <img\n                        src={selectedAvatar}\n                        alt=\"Selected Avatar\"\n                        style={{float:\"left\", marginRight:\"5%\", width:\"120px\"}}\n                      />\n                    )}\n                </div>\n                <div>\n                  <h3>Doctor Name</h3>\n                  <input\n                      type=\"text\"\n                      name=\"docName\"\n                      placeholder=\"Doctor Name\"\n                      style={{ width: \"280px\", marginBottom: \"0px\" }}\n                      value={`${currentDoctor.firstName} ${currentDoctor.lastName}`}\n                      readOnly\n                    />                \n                    </div>\n                <div>\n                  <h3>Doctor Credentials</h3>\n                  <input type=\"text\" name=\"credentials\" placeholder=\"Doctor Credentials\" style={{width: \"280px\", marginBottom: \"10px\", padding: \"15px\"}} value={currentDoctor.credentials} readOnly></input>\n                </div>\n                <div>\n                  <h3>Specialization</h3>\n                  <input type=\"text\" name=\"specialization\" placeholder=\"Specialization\" style={{padding: \"15px\"}} value={currentDoctor.specialization} readOnly></input>\n                </div>\n                <div>\n                  <h3>Email Address</h3>\n                  <input type=\"text\" name=\"emailAddress\" placeholder=\"Email Address\" style={{padding: \"15px\"}} value={currentDoctor.contactNumber} readOnly></input>\n                </div>\n                <div>\n                  <h3>Contact Number</h3>\n                  <input type=\"text\" name=\"contactNumber\" placeholder=\"Contact Number\" style={{padding: \"15px\"}} value={currentDoctor.contactNumber} readOnly></input>\n                </div>\n             \n                <br></br>\n                {uniqueClinics.map((clinic, index) => (\n                <ul key={clinic.clinicId}>\n                  <div>\n                    <h2>{`Clinic ${String(index + 1).padStart(2, '0')}`}</h2>\n                  </div>\n                  <div>\n                    <h3>Clinic or Hospital Affiliation</h3>\n                    <input\n                      type=\"text\"\n                      name=\"clinicName\"\n                      placeholder=\"Clinic or Hospital Affiliation\"\n                      style={{ padding: \"15px\" }}\n                      value={clinic.clinicName}\n                      readOnly\n                    ></input>\n                  </div>\n                  <div>\n                    <h3>Clinic Address</h3>\n                    <input\n                      type=\"text\"\n                      name=\"clinicSched\"\n                      placeholder=\"Clinic Schedule\"\n                      style={{ padding: \"15px\" }}\n                      value={clinic.clinicAddress}\n                      readOnly\n                    ></input>\n                  </div>\n                  <div>\n                    <h3>Clinic Schedule</h3>\n                    <input\n                      type=\"text\"\n                      name=\"clinicSched\"\n                      placeholder=\"Clinic Schedule\"\n                      style={{ padding: \"15px\" }}\n                      value={clinic.scheduleDays}\n                      readOnly\n                    ></input>\n                  </div>\n                  <br></br>\n                </ul>\n              ))}\n\n                <button type='button' style={{padding: 5, borderRadius: 0, width: \"48.8%\", textAlign: \"center\", marginTop: \"20px\", height: \"40px\", marginRight: \"10px\"}} onClick={() => { \n  handleApprovalSubmit(currentDoctor.doctorId);\n  window.scrollTo({\n    top: document.body.scrollHeight,\n    behavior: 'smooth'\n  });\n}}>Approve Profile</button>\n                <button  type='button' className='cancel' style={{padding: 5, borderRadius: 0, width: \"48.9%\", textAlign: \"center\", marginTop: \"20px\", height: \"40px\"}} onClick={() => { \n  handleRejectSubmit(currentDoctor.doctorId);\n  window.scrollTo({\n    top: document.body.scrollHeight,\n    behavior: 'smooth'\n  });\n}}>Reject Profile</button>\n                <h4>{result}</h4>\n              </div>\n              \n            </form>\n          </Popup>\n    </div>\n  );\n};\n\n\nexport default AdminHome;\n","D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\pages\\DoctorPages\\DoctorClinics.jsx",["284","285"],[],"import \"../../styles/Search.css\";\r\nimport DoctorNavbar from '../../components/DoctorNavbar';\r\nimport DoctorFooter from '../../components/DoctorFooter';\r\nimport React, { useState, useEffect } from 'react';\r\nimport ClinicCard from \"../../components/Clinics\";\r\nimport Popup from '../../components/Popup'\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst DoctorClinics= () => {\r\n  const [doctorUserId, setDoctorUserId] = useState(''); // To store the patient's user ID\r\n  const [isError, setIsError] = useState(false);\r\n  const [isPopupVisible, setPopupVisibility] = useState(false);\r\n\r\n  const [schedules, setSchedules] = useState([\r\n    {\r\n      name: '',\r\n      address: '',\r\n      doctor: ''\r\n    },\r\n  ]);\r\n\r\n  useEffect(() => {\r\n      // Replace 'http://localhost:8080' with your actual API URL\r\n      fetch('http://localhost:8080/checkLoggedInDoctor')\r\n        .then((response) => {\r\n          if (response.ok) {\r\n            return response.json();\r\n           \r\n          }\r\n          throw new Error('Network response was not ok');\r\n        })\r\n        .then((data) => {\r\n          \r\n          console.log({data});\r\n          setDoctorUserId(data);\r\n          // Once you have the patientUserId, make another request to get appointments\r\n          fetch(`http://localhost:8080/docsched/${data}`)\r\n            .then((clinicsResponse) => {\r\n              if (clinicsResponse.ok) {\r\n\r\n                return clinicsResponse.json();\r\n              }\r\n              \r\n              throw new Error('Network response was not ok');\r\n\r\n            })\r\n            .then((scheduleData) => {\r\n              console.log('scheduleData:', scheduleData);\r\n            \r\n              const formattedClinics = [];\r\n              const clinicIdsAdded = []; // Track clinicIds that have been added to avoid duplicates\r\n            \r\n              scheduleData.forEach((schedule) => {\r\n                const clinicId = schedule.clinic.clinicId;\r\n            \r\n                // Check if clinicId has already been added\r\n                if (!clinicIdsAdded.includes(clinicId)) {\r\n                  formattedClinics.push({\r\n                    name: '' + schedule.clinic.name,\r\n                    address: '' + schedule.clinic.address,\r\n                    doctor: '' + schedule.doctor.user.firstName,\r\n                  });\r\n            \r\n                  // Mark the clinicId as added to avoid duplicates\r\n                  clinicIdsAdded.push(clinicId);\r\n                }\r\n              });\r\n            \r\n              setSchedules(formattedClinics);\r\n            })\r\n            .catch((error) => {\r\n              // Handle errors\r\n              console.error(error);\r\n            });\r\n            \r\n        })\r\n        .catch((error) => {\r\n          setIsError(true);\r\n          console.error('Error:', error);\r\n        });\r\n    }, []);\r\n\r\n  const handleEdit = (schedule) => {\r\n    setPopupVisibility(true);\r\n    console.log('Edit clicked for clinic:', schedule);\r\n  };\r\n\r\n  const closePopup = () => {\r\n    // Close the popup\r\n    setPopupVisibility(false);\r\n  };\r\n\r\n  const handleDelete = (schedule) => {\r\n    console.log('Delete clicked for clinic:', schedule);\r\n  };\r\n\r\n  return (\r\n    <div className=\"info-container\" id=\"container\" style={{height: \"100vh\"}}>\r\n      <DoctorNavbar />\r\n      <div className=\"info-container\">\r\n        <h1>All My Clinics</h1>\r\n        <br />\r\n        <div style={{ display: \"block\", marginLeft: \"6%\", marginRight: \"auto\", width: \"90%\" }}>\r\n        <div className=\"doctor-grid\">\r\n        {schedules.map((schedule, index) => (\r\n            <ClinicCard\r\n              key={index}\r\n              clinic={schedule}\r\n              onEdit={handleEdit}\r\n              onDelete={handleDelete}\r\n            />\r\n          ))}\r\n        </div>\r\n        </div>\r\n      </div>\r\n      <DoctorFooter />\r\n\r\n      {/* Popup */}\r\n      <Popup trigger={isPopupVisible}>\r\n            <form action=\"#\" id=\"signin-form\">\r\n              <div className=\"infield\">\r\n                <h1 style={{marginTop: \"-10px\"}}>Edit Clinic</h1>\r\n                <div>\r\n                  <h3>Clinic or Hospital Name</h3>\r\n                  <input type=\"text\" name=\"clinic\" placeholder=\"Clinic or Hospital Name\"></input>\r\n                </div>\r\n                <div>\r\n                  <h3>Clinic Address</h3>\r\n                  <input type=\"text\" name=\"clinicaddress\" placeholder=\"Clinic Address\"></input>\r\n                </div>\r\n                <div>\r\n                  <h3>Clinic Schedule</h3>\r\n                  <input type=\"text\" name=\"docname\" placeholder=\"11/06/23 MONDAY 2:00-5:00 PM\"></input>\r\n                </div>\r\n                <Link to=\"/addremove\"><button style={{padding: 5, borderRadius: 0, width: \"100%\", textAlign: \"center\", marginTop: \"10px\", height: \"40px\", marginRight: \"10px\"}}>Add/Remove Slots</button></Link>\r\n                <button style={{padding: 5, borderRadius: 0, width: \"48.7%\", textAlign: \"center\", marginTop: \"10px\", height: \"40px\", marginRight: \"10px\"}}>Submit Changes</button>\r\n                <button className='cancel' onClick={closePopup} style={{padding: 5, borderRadius: 0, width: \"49%\", textAlign: \"center\", marginTop: \"10px\", height: \"40px\"}}>Discard Changes</button>\r\n              </div>\r\n            </form>\r\n          </Popup>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DoctorClinics;\r\n","D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\pages\\AppointmentPages\\DoctorResched.jsx",["286"],[],"import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport DoctorNavbar from '../../components/DoctorNavbar';\nimport DoctorFooter from '../../components/DoctorFooter';\nimport DoctorCalendar from '../../components/DoctorCalendar';\nimport { Calendar, dateFnsLocalizer } from 'react-big-calendar';\nimport { parse, format } from 'date-fns';\n\nimport startOfWeek from 'date-fns/startOfWeek';\nimport getDay from 'date-fns/getDay';\nimport addWeeks from 'date-fns/addWeeks';\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\n\nconst DoctorResched = () => {\n  const { appointmentId } = useParams();\n  const [rescheduleChoice, setRescheduleChoice] = useState('');\n  const [error, setError] = useState('');\n  const [rescheduleStatus, setRescheduleStatus] =  useState('');\n  const [latestAppointment, setLatestAppointment] = useState([\n    {\n      title: '',\n      clinic: '',\n      address: '',\n      number: '',\n      start: new Date(),\n      end: new Date(),  // 5:00 PM\n      transactionNo: '',\n      appointmentStatus: ''\n    },\n  ]);\n  const [appointments, setAppointments] = useState([\n    {\n      title: '',\n      clinic: '',\n      address: '',\n      number: '',\n      start: new Date(),\n      end: new Date(),  // 5:00 PM\n      transactionNo: '',\n      appointmentStatus: ''\n    },\n  ]);\n\n  useEffect(() => {\n    fetch('http://localhost:8080/checkLoggedInDoctor')\n      .then((response) => {\n        if (response.ok) {\n          return response.json();\n        }\n        throw new Error('Network response was not ok');\n      })\n      .then((data) => {\n        fetch(`http://localhost:8080/docappointments?doctorUserId=${data}`)\n          .then((appointmentsResponse) => {\n            if (appointmentsResponse.ok) {\n              return appointmentsResponse.json();\n            }\n            throw new Error('Network response was not ok');\n          })\n          .then((appointmentsData) => {\n            const formattedAppointments = appointmentsData.map((appointment) => {\n              // Extract date and time components\n              const [year, month, day] = appointment.scheduleDate.split('-').map(Number);\n              const [hours, minutes] = appointment.startTime.split(':').map(Number);\n              const [hours2, minutes2] = appointment.endTime.split(':').map(Number);\n\n              // Create Date objects for start and end times\n              const startDate = new Date(year, month - 1, day, hours, minutes);\n              const endDate = new Date(year, month - 1, day, hours2, minutes2);\n\n              // Create an appointment object\n              return {\n                title: appointment.patientName,\n                clinic: appointment.clinicName,\n                address: appointment.address,\n                number: appointment.clinic.officeNumber,\n                start: startDate,\n                end: endDate,\n                appointmentId: appointment.transactionNo,\n                appointmentStatus: appointment.status\n              };\n            });\n\n            setAppointments(formattedAppointments);\n            console.loh(formattedAppointments);\n          })\n          .catch((error) => {\n            // Handle errors\n            console.error(error);\n          });\n\n      })\n      .catch((error) => {\n        console.error('Error:', error);\n      });\n  }, []);\n\n  useEffect(() => {\n    const fetchAppointment = async () => {\n      try {\n        const response = await fetch(`http://localhost:8080/appointment/${appointmentId}`);\n\n        if (response.ok) {\n          const data = await response.json();\n\n          // Check if necessary properties are present in the data object\n          if (data && data.scheduleDate && data.startTime && data.endTime && data.doctorName && data.transactionNo && data.status) {\n            const [year, month, day] = data.scheduleDate.split('-').map(Number);\n            const [hours, minutes] = data.startTime.split(':').map(Number);\n            const [hours2, minutes2] = data.endTime.split(':').map(Number);\n\n            // Check if the extracted components are valid numbers\n            if (!isNaN(year) && !isNaN(month) && !isNaN(day) && !isNaN(hours) && !isNaN(minutes) && !isNaN(hours2) && !isNaN(minutes2)) {\n              // Create Date objects for start and end times\n              const startDate = new Date(year, month - 1, day, hours, minutes);\n              const endDate = new Date(year, month - 1, day, hours2, minutes2);\n\n              // Check if the created Date objects are valid\n              if (!isNaN(startDate.getTime()) && !isNaN(endDate.getTime())) {\n                const formattedAppointment = {\n                  title: data.patientName,\n                  clinic: data.clinicName,\n                  address: data.address,\n                  number: data.clinic.officeNumber,\n                  start: startDate,\n                  end: endDate,\n                  appointmentId: data.transactionNo,\n                  appointmentStatus: data.status\n                };\n\n                setLatestAppointment([formattedAppointment]);\n              } else {\n                console.error('Invalid date created. Check the date and time components.');\n              }\n            } else {\n              console.error('Invalid date/time components in the response data.');\n            }\n          } else {\n            console.error('Incomplete or missing data in the response.');\n          }\n        } else {\n          setError('Error fetching appointment');\n        }\n      } catch (error) {\n        setError('Error fetching appointment');\n      }\n    };\n\n    fetchAppointment();\n  }, [appointmentId]);\n\n  const handleRescheduleChange = (event) => {\n    const match = event.target.value.match(/(\\d{2})\\/(\\d{2})\\/(\\d{4})/);\n\n    if (!match) {\n      return <div>Error: Invalid date format</div>;\n    }\n\n    const [, month, day, year] = match;\n    const sourceDate = new Date(`${year}-${month}-${day}`);\n    setRescheduleChoice(`${sourceDate.getFullYear()}-${(sourceDate.getMonth() + 1).toString().padStart(2, '0')}-${sourceDate.getDate().toString().padStart(2, '0')}`);\n\n  };\n\n  const handleReschedule = async () => {\n    try {\n      const response = await fetch(`http://localhost:8080/appointment/${appointmentId}?scheduleDate=${rescheduleChoice}`, {\n        method: 'PUT',\n        // No need for headers when not sending a JSON payload\n      });\n      if (response.ok) {\n        setRescheduleStatus('Appointment Rescheduled Successfully!');\n        window.location.href = `/docresched/${appointmentId}`;\n      }\n      if (!response.ok) {\n        setRescheduleStatus(`Failed to update appointment: ${response.statusText}`);\n        throw new Error(`Failed to update appointment: ${response.statusText}`);\n        \n      }\n\n    } catch (error) {\n      console.error('Error updating appointment:', error.message);\n      setError('Error updating appointment:', error.message);\n    }\n  };\n\n  const generateDateOptions = ({ scheduleDate }) => {\n    if (!scheduleDate) {\n      console.error('Error: scheduleDate is undefined.');\n      return [];\n    }\n  \n    // Convert the Date object to a string\n    const scheduleDateString = scheduleDate.toString();\n    \n    // Convert the string back to a Date object\n    const startDate = new Date(scheduleDateString);\n    \n    const dateOptions = [];\n  \n    for (let i = 0; i < 4; i++) {\n      const optionDate = addWeeks(startDate, i);\n      \n      // Format the date using date-fns\n      const formattedDate = format(optionDate, \"MM/dd/yyyy EEEE\");\n  \n      dateOptions.push(\n        <option key={i} value={formattedDate}>\n          {formattedDate}\n        </option>\n      );\n    }\n  \n    return dateOptions;\n  };\n\n  const CustomEvent = ({ event }) => (\n    <div style={{ margin: '5px 0', whiteSpace: 'nowrap', overflowY: 'auto', maxHeight: \"55px\", textOverflow: 'ellipsis' }}>\n      <strong style={{ margin: '0px 0', overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'normal' }}>{event.title}</strong>\n      <p style={{ margin: '0px 0', overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'normal' }}>\n        Clinic: {event.clinic}\n      </p>\n      <p style={{ margin: '0px 0', overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'normal' }}>\n        Status: {event.appointmentStatus}\n      </p>\n    </div>\n  );\n\n  const locales = {\n    \"en-US\": require(\"date-fns/locale/en-US\")\n  }\n\n  const localizer = dateFnsLocalizer({\n    format,\n    parse,\n    startOfWeek,\n    getDay,\n    locales\n  })\n\n  \n\n\n  const getBackgroundColor = (status) => {\n    switch (status) {\n      case 'Cancelled':\n        return '#FCA694';\n      case 'Rescheduled':\n        return '#FFB97F';\n      case 'Scheduled by Patient':\n        return '#FFFFDC';\n      case 'Approved by Doctor':\n        return '#BAFFC4';\n      default:\n        return 'lightgray';\n    }\n  };\n\n  const getBorderColor = (status) => {\n    switch (status) {\n      case 'Cancelled':\n        return '#A41D00';\n      case 'Rescheduled':\n        return '#FF7400';\n      case 'Scheduled by Patient':\n        return '#F8F547';\n      case 'Approved by Doctor':\n        return '#48DE66';\n      default:\n        return 'lightgray';\n    }\n  };\n\n\n  return (\n    <div>\n      <DoctorNavbar />\n        <div style={{ display: \"flex\", margin: \"auto\", width: \"100vw\", justifyContent: \"center\" }}>\n      <Calendar\n          localizer={localizer}\n          events={appointments}\n          startAccessor=\"start\"\n          endAccessor=\"end\"\n          style={{ height: 700, width: '70%' }}\n          components={{\n            event: CustomEvent, // Use the custom Event component\n          }}\n        />\n    \n    <div style={{ marginLeft: \"30px\" }}>\n          <h1>My Appointments</h1>\n          {latestAppointment.map((latestAppointment, index) => (\n            <table key={index}>\n              <tbody>\n                <tr >\n                  \n                  <td\n                      rowSpan={2}\n                      width={200}\n                      style={{\n                        border: '3px dashed',\n                        borderRadius: '10px', \n                        borderColor: getBorderColor(latestAppointment.appointmentStatus),\n                        backgroundColor: getBackgroundColor(latestAppointment.appointmentStatus),\n                        paddingLeft: '10px',\n                        width: '300px'            \n                      }}\n                    >\n                      {latestAppointment.title} <br />\n                      {latestAppointment.clinic} <br />\n                      {latestAppointment.address} <br />\n                      {format(latestAppointment.start, 'MM/dd/yyyy EEEE')} <br />\n                      {format(latestAppointment.start, 'h:mm a')} - {format(latestAppointment.end, 'h:mm a')} <br />\n                      {latestAppointment.appointmentStatus} <br />\n                    </td>\n                </tr>\n                <br />\n                <tr >\n                <td>\n        Date:\n        <select name=\"sched\" id=\"sched\"  onChange={handleRescheduleChange}>\n          {generateDateOptions({ scheduleDate: latestAppointment.start })}\n        </select>\n\n      </td>\n                </tr>\n                <tr key={2}>\n                  <td>\n                    <button style={{ marginTop: \"10px\", borderRadius: 0, width: \"100%\" }} onClick={handleReschedule}>Submit</button>\n                    <p>{rescheduleStatus}</p>\n                    <p>{error}</p>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          ))}\n\n        </div>\n    \n          </div>\n          <DoctorFooter />\n        </div>\n      );\n}\n\nexport default DoctorResched\n","D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\pages\\AppointmentPages\\PatientResched.jsx",[],[],"D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\pages\\AppointmentPages\\ManageAppointments.jsx",["287"],[],"import React, { useState, useEffect } from 'react';\nimport DoctorNavbar from '../../components/DoctorNavbar';\nimport DoctorFooter from '../../components/DoctorFooter';\nimport { Link, useParams } from 'react-router-dom';\nimport DoctorCalendar from '../../components/DoctorCalendar';\nimport { Calendar, dateFnsLocalizer } from 'react-big-calendar';\nimport format from 'date-fns/format';\nimport parse from 'date-fns/parse';\nimport startOfWeek from 'date-fns/startOfWeek';\nimport getDay from 'date-fns/getDay';\n\nconst ManageAppointments = () => {\n  const { patientUserId } = useParams();\n\n  const [appointments, setAppointments] = useState([\n    {\n      title: '',\n      clinic: '',\n      address: '',\n      patientUserId: '',\n      start: new Date(),\n      end: new Date(),  // 5:00 PM\n      appointmentId: '',\n      appointmentStatus: '',\n      slots: ''\n    },\n  ]);\n\n  const locales = {\n    \"en-US\": require(\"date-fns/locale/en-US\")\n  }\n\n  const localizer = dateFnsLocalizer({\n    format,\n    parse,\n    startOfWeek,\n    getDay,\n    locales\n  })\n  const getBorderColor = (status) => {\n    switch (status) {\n      case 'Cancelled':\n        return '#FCA694';\n      case 'Rescheduled':\n        return '#FFB97F';\n      case 'Scheduled by Patient':\n        return '#FFFFDC';\n      case 'Approved by Doctor':\n        return '#BAFFC4';\n      default:\n        return 'lightgray';\n    }\n  };\n  const CustomEvent = ({ event }) => (\n    <div style={{ margin: '5px 0', whiteSpace: 'nowrap', overflowY: 'auto', maxHeight: \"55px\", textOverflow: 'ellipsis' }}>\n      <strong style={{ margin: '0px 0', overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'normal' }}>\n        {event.clinic}\n      </strong>\n      <p style={{ margin: '0px 0', overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'normal' }}>\n        {event.title}\n      </p>\n      <p style={{ margin: '0px 0', overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'normal', backgroundColor: getBorderColor(event.appointmentStatus)  }}>\n        {event.appointmentStatus}\n      </p>\n      <p style={{ margin: '0px 0', overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'normal' }}>\n        {event.slots}\n      </p>\n    </div>\n   \n  );\n\n\n  useEffect(() => {\n    // Replace 'http://localhost:8080' with your actual API URL\n    fetch(`http://localhost:8080/appointments?patientUserId=${patientUserId}`)  // Assuming you already have the patientUserId\n      .then((appointmentsResponse) => {\n        if (appointmentsResponse.ok) {\n          return appointmentsResponse.json();\n        }\n        throw new Error('Network response was not ok');\n      })\n      .then((appointmentsData) => {\n        const formattedAppointments = appointmentsData.map((appointment) => {\n          // Extract date and time components\n          const [year, month, day] = appointment.scheduleDate.split('-').map(Number);\n          const [hours, minutes] = appointment.startTime.split(':').map(Number);\n          const [hours2, minutes2] = appointment.endTime.split(':').map(Number);\n  \n          // Create Date objects for start and end times\n          const startDate = new Date(year, month - 1, day, hours, minutes);\n          const endDate = new Date(year, month - 1, day, hours2, minutes2);\n  \n          // Create an appointment object\n          return {\n            title: appointment.patientName,\n            clinic: appointment.clinicName,\n            address: appointment.address,\n            patientUserId: appointment.patientUserId,\n            start: startDate,\n            end: endDate,\n            appointmentId: appointment.transactionNo,\n            appointmentStatus: appointment.status,\n            slots: appointment.slots\n\n\n          };\n        });\n  \n        setAppointments(formattedAppointments);\n      })\n      .catch((error) => {\n        // Handle errors\n        console.error(error);\n      });\n  }, [patientUserId]);\n\n  const handleCancel = async (appointmentId) => {\n    try {\n      // Find the appointment with the provided appointmentId\n      const appointmentToCancel = appointments.find(appointment => appointment.appointmentId === appointmentId);\n  \n      if (!appointmentToCancel) {\n        // Handle the case where the appointment with the given ID is not found\n        console.error('Appointment not found');\n        return;\n      }\n  \n      // Check if the appointment is already cancelled\n      if (appointmentToCancel.appointmentStatus === 'Cancelled') {\n        // Display error message as a pop-up\n        window.alert('Appointment is already cancelled');\n        return;\n      }\n  \n      // Proceed with the request to cancel the appointment\n      const response = await fetch(`http://localhost:8080/appointmentChange/${appointmentId}?newStatus=Cancelled`, {\n        method: 'PUT',\n      });\n  \n      if (response.ok) {\n        console.log('Appointment cancelled successfully');\n        window.location.reload();\n      } else {\n        console.error('Error cancelling appointment');\n      }\n    } catch (error) {\n      console.error('Error cancelling appointment:', error);\n    }\n  };\n  \n  \n\n  const handleReschedule = async (appointmentId) => {\n    const appointmentToCancel = appointments.find(appointment => appointment.appointmentId === appointmentId);\n  \n    if (!appointmentToCancel) {\n      // Handle the case where the appointment with the given ID is not found\n      console.error('Appointment not found');\n      return;\n    }\n\n    // Check if the appointment is already cancelled\n    if (appointmentToCancel.appointmentStatus === 'Cancelled') {\n      // Display error message as a pop-up\n      window.alert('Appointment is already cancelled. It cannot be rescheduled.');\n      return;\n    }\n    window.location.href = `/docresched/${appointmentId}`;\n  };\n\n  const handleApprove = async (appointmentId) => {\n    try {\n      // Find the appointment with the provided appointmentId\n      const appointmentToCancel = appointments.find(appointment => appointment.appointmentId === appointmentId);\n  \n      if (!appointmentToCancel) {\n        // Handle the case where the appointment with the given ID is not found\n        console.error('Appointment not found');\n        return;\n      }\n  \n      // Check if the appointment is already cancelled\n      if (appointmentToCancel.appointmentStatus === 'Cancelled') {\n        // Display error message as a pop-up\n        window.alert('Appointment is already cancelled');\n        return;\n      }\n  \n      // Proceed with the request to cancel the appointment\n      const response = await fetch(`http://localhost:8080/appointmentChange/${appointmentId}?newStatus=Approved by Doctor`, {\n        method: 'PUT',\n      });\n  \n      if (response.ok) {\n        window.location.reload();\n      } else {\n        console.error('Error cancelling appointment');\n      }\n    } catch (error) {\n      console.error('Error cancelling appointment:', error);\n    }\n  };\n  \n  appointments.sort((a, b) => {\n    const statusOrder = {\n      'Cancelled': 4,\n      'Rescheduled': 3,\n      'Scheduled by Patient': 2,\n      'Approved by Doctor': 1,\n    };\n  \n    return statusOrder[a.appointmentStatus] - statusOrder[b.appointmentStatus];\n  });\n  \n  return (\n    <div>\n    <DoctorNavbar />\n    <div style={{ display: \"flex\", margin: \"auto\", width: \"100vw\", justifyContent: \"center\" }}>\n    <Calendar\n          localizer={localizer}\n          events={appointments}\n          startAccessor=\"start\"\n          endAccessor=\"end\"\n          style={{ height: 700, width: \"70%\" }}\n          components={{\n            event: CustomEvent, // Use the custom Event component\n          }}\n        />\n\n        <div style={{ marginLeft: \"30px\" }}>\n    <h1 style={{marginTop: \"0\"}}>My Clinic</h1>\n    <table style={{width: \"500px\"}}>\n          <tr>\n            <td style={{ width: \"600\", marginRight: \"10px\", fontSize: \"20px\" }}>\n              <b>{appointments[0].title}</b>\n            </td>\n            <td>\n              <Link to=\"/viewprofile\">\n                <button style={{ borderRadius: 0, padding: 10, width: \"200px\" }}>\n                  View Profile\n                </button>\n              </Link>\n            </td>\n          </tr>\n    </table>\n    <div style={{ overflowY: 'auto', maxHeight: '500px'}}>\n    {appointments.map((appointment, index) => (\n        <table key={index} style={{width: \"480px\"}}>\n          <br />\n          <tr>\n            <td rowSpan={2} width={200}>\n                      {appointment.clinic} <br />\n                      {appointment.address} <br />\n                      {format(appointment.start, 'MM/dd/yyyy EEEE')} <br />\n                      {format(appointment.start, 'h:mm a')} - {format(appointment.end, 'h:mm a')} <br />\n                      <div style={{borderColor: getBorderColor(appointment.appointmentStatus)}}>{appointment.appointmentStatus}</div> <br />\n            </td>\n            \n            <td colSpan={2}>\n                <button style={{ borderRadius: 0, padding: 10, marginLeft: \"10px\", width: \"100%\", height: \"65px\" }} onClick={() => handleReschedule(appointment.appointmentId)}>\n                  Reschedule Appointment\n                </button>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <button style={{ padding: 10, marginLeft: \"10px\", height: \"65px\", borderRadius: 0, width: \"100%\", backgroundColor: \"#005C29\" }} onClick={() => handleApprove(appointment.appointmentId)}  type='submit'>\n                Approve Appointment\n              </button>\n            </td>\n            <td>\n              <button className='cancel' style={{ padding: 0, marginLeft: \"10px\", height: \"65px\", width: \"100%\" }} onClick={() => handleCancel(appointment.appointmentId)}  type='submit'>\n                Cancel Appointment\n              </button>\n            </td>\n          </tr>\n          <br />\n          <tr>\n            <td colSpan={2}>\n              <Link to=\"/appointmenthistory\" style={{ fontSize: \"18px\" }}>\n                <i>View Appointment History</i>\n              </Link>\n            </td>\n          </tr>\n        </table>\n        ))}\n      </div>\n    \n  </div>\n      </div>\n    <DoctorFooter />\n    </div>\n  )\n};\n\nexport default ManageAppointments\n","D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\pages\\AppointmentPages\\ViewProfile.jsx",[],[],"D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\pages\\AppointmentPages\\AddRemoveSlots.jsx",[],[],"D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\pages\\DoctorPages\\DoctorEditClinic.jsx",["288","289","290","291","292","293","294","295","296"],[],"import \"../../styles/Profile.css\";\r\nimport DoctorNavbar from '../../components/DoctorNavbar';\r\nimport DoctorFooter from '../../components/DoctorFooter';\r\nimport React, { useState }  from 'react';\r\nimport { useParams } from 'react-router-dom';\r\n\r\n\r\nfunction  DoctorEditClinic() {\r\n\r\n    const {doctorUserId} = useParams();\r\n    const [name, setName] = useState('');\r\n    const [address, setAddress] = useState('');\r\n    const [officeNumber, setOfficeNumber] = useState('');\r\n    const [officeEmail, setOfficeEmail] = useState('');\r\n    const [hospital, setHospital] = useState('');\r\n    const [addClinicMessage, setAddClinicMessage] = useState('');\r\n    const [registrationSuccessful, setRegistrationSuccessful] = useState(false);\r\n    const [slots, setSlots] = useState('5'); //needs to be not hardcoded zzz\r\n    const [checkedDays, setCheckedDays] = useState([]);\r\n  \r\n  \r\n    \r\n    const handleAddClinic = async () => {\r\n      // Check if any of the fields are empty\r\n      if (\r\n        !name ||\r\n        !address ||\r\n        !officeNumber ||\r\n        !officeEmail\r\n      ) {\r\n        setAddClinicMessage('Please fill in all required fields.');\r\n        return;\r\n      }\r\n  \r\n      const officeNumberRegex = /^\\d{11}$/;\r\n      if (!officeNumberRegex.test(officeNumber)) {\r\n        setAddClinicMessage('Contact number should be exactly 11 digits and contain only numbers (0-9).');\r\n        return;\r\n      }\r\n  \r\n      // Validate email format using regular expression\r\n      const officeEmailRegex = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/;\r\n      if (!officeEmailRegex.test(officeEmail)) {\r\n        setAddClinicMessage('Invalid email format.');\r\n        return;\r\n      }\r\n  \r\n      try {\r\n        const url = new URL('http://localhost:8080/clinic');\r\n        const userData = {\r\n          name,\r\n          address,\r\n          officeNumber,\r\n          officeEmail,\r\n          hospital,\r\n        };\r\n  \r\n  \r\n        const response = await fetch(url, {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify(userData),\r\n        });\r\n  \r\n        if (response.ok) {\r\n          // Signup successful\r\n          setAddClinicMessage('Clinic added successfully');\r\n          setRegistrationSuccessful(true);\r\n          handleAddSchedule();\r\n   \r\n        } else {\r\n          // Signup failed\r\n          const errorMessage = await response.text();\r\n          setAddClinicMessage(errorMessage);\r\n          setAddClinicMessage(`Signup failed`);\r\n          // Handle the error or display an error message to the user\r\n        }\r\n      } catch (error) {\r\n        console.error('Error during signup:', error);\r\n        setAddClinicMessage('Error during signup. Please try again later.');\r\n        // Handle the error or display an error message to the user\r\n      }\r\n    }\r\n    const handleDayCheckboxChange = (day, isChecked) => {\r\n      if (isChecked) {\r\n        // Add the day to the list of checked days\r\n        setCheckedDays((prevCheckedDays) => [...prevCheckedDays, day]);\r\n      } else {\r\n        // Remove the day from the list of checked days\r\n        setCheckedDays((prevCheckedDays) => prevCheckedDays.filter((d) => d !== day));\r\n      }\r\n    };\r\n    \r\n    const handleAddSchedule = async () => {\r\n      if (checkedDays.length === 0) {\r\n        console.error('No days selected for schedule.');\r\n        return;\r\n      }\r\n    \r\n      // Iterate through the list of checked days and make API calls for each day\r\n      checkedDays.forEach(async (day) => {\r\n        // Construct the query string for the specific day\r\n        const queryString = `name=${name}&doctorUserId=${doctorUserId}&scheduleDay=${day}&startTime=${document.getElementById(`${day}StartTime`).value}&endTime=${document.getElementById(`${day}EndTime`).value}&slots=${slots}`;\r\n        \r\n        try {\r\n          const response = await fetch(`http://localhost:8080/schedule?${queryString}`, {\r\n            method: 'POST',\r\n          });\r\n    \r\n          if (response.ok) {\r\n            // Schedule added successfully for the current day\r\n            window.location.href = '/doclogin'\r\n          } else {\r\n            // Schedule addition failed for the current day\r\n            const errorMessage = await response.text();\r\n            console.error(`Schedule addition failed for ${day}: ${errorMessage}`);\r\n            \r\n          }\r\n        } catch (error) {\r\n          console.error(`Error during schedule addition for ${day}:`, error);\r\n          \r\n        }\r\n      });\r\n    };\r\n    \r\n    \r\n  \r\n    const [showMondayTableData, setShowMondayTableData] = useState(false);\r\n    const handleMondayCheckboxChange = (event) => {\r\n      setShowMondayTableData(event.target.checked);\r\n      if (event.target.checked) {\r\n        handleDayCheckboxChange('Monday', true);\r\n      } else {\r\n        handleDayCheckboxChange('Monday', false);\r\n      }\r\n    };\r\n  \r\n    const [showTuesdayTableData, setShowTuesdayTableData] = useState(false);\r\n    const handleTuesdayCheckboxChange = (event) => {\r\n      setShowTuesdayTableData(event.target.checked);\r\n      if (event.target.checked) {\r\n        handleDayCheckboxChange('Tuesday', true);\r\n      } else {\r\n        handleDayCheckboxChange('Tuesday', false);\r\n      }\r\n    };\r\n  \r\n    const [showWednesdayTableData, setShowWednesdayTableData] = useState(false);\r\n    const handleWednesdayCheckboxChange = (event) => {\r\n      setShowWednesdayTableData(event.target.checked);\r\n      if (event.target.checked) {\r\n        handleDayCheckboxChange('Wednesday', true);\r\n      } else {\r\n        handleDayCheckboxChange('Wednesday', false);\r\n      }\r\n    };\r\n  \r\n    const [showThursdayTableData, setShowThursdayTableData] = useState(false);\r\n    const handleThursdayCheckboxChange = (event) => {\r\n      setShowThursdayTableData(event.target.checked);\r\n      if (event.target.checked) {\r\n        handleDayCheckboxChange('Thursday', true);\r\n      } else {\r\n        handleDayCheckboxChange('Thursday', false);\r\n      }\r\n    };\r\n  \r\n    const [showFridayTableData, setShowFridayTableData] = useState(false);\r\n    const handleFridayCheckboxChange = (event) => {\r\n      setShowFridayTableData(event.target.checked);\r\n      if (event.target.checked) {\r\n        handleDayCheckboxChange('Friday', true);\r\n      } else {\r\n        handleDayCheckboxChange('Friday', false);\r\n      }\r\n    };\r\n  \r\n    const [showSaturdayTableData, setShowSaturdayTableData] = useState(false);\r\n    const handleSaturdayCheckboxChange = (event) => {\r\n      setShowSaturdayTableData(event.target.checked);\r\n      if (event.target.checked) {\r\n        handleDayCheckboxChange('Saturday', true);\r\n      } else {\r\n        handleDayCheckboxChange('Saturday', false);\r\n      }\r\n    };\r\n  \r\n  \r\n    const [showSundayTableData, setShowSundayTableData] = useState(false);\r\n    const handleSundayCheckboxChange = (event) => {\r\n      setShowSundayTableData(event.target.checked);\r\n      if (event.target.checked) {\r\n        handleDayCheckboxChange('Sunday', true);\r\n      } else {\r\n        handleDayCheckboxChange('Sunday', false);\r\n      }\r\n    };\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"profile-container\" id=\"container\">\r\n        <DoctorNavbar />\r\n        <div className=\"info-container\"> \r\n            <div className=\"p-steps\">\r\n                    <div className=\"profile-card\">\r\n                        <br />\r\n                        <br />\r\n                        <br />\r\n                        <br />\r\n                        <br />\r\n                        <br />\r\n                        <br />\r\n                        <br />\r\n                        <br />\r\n                        <br />\r\n                        <br />\r\n                        <h1>Edit Clinic Information</h1>\r\n                        <br />\r\n                        <b>Clinic Name:</b>\r\n                        <div className=\"profile-infield\">\r\n                            <input type=\"text\" placeholder=\"Change Clinic Name\" />\r\n                        </div>\r\n                        <br />\r\n                        <b>Address: </b>\r\n                        <div className=\"profile-infield\">\r\n                            <input type=\"text\" id=\"address\" placeholder=\"*(House/Lot/Unit No., Street, Barangay, City/Town, Province)\" name=\"address\"/>\r\n                        </div>\r\n                        <br />\r\n                        <b>Office Number:</b>\r\n                        <div className=\"profile-infield\">\r\n                            <input type=\"text\" placeholder=\"Change Office Number\" />\r\n                        </div>\r\n                        <br />\r\n                        <b>Office Email:</b>\r\n                        <div className=\"profile-infield\">\r\n                            <input type=\"text\" placeholder=\"Change Office Email\" />\r\n                        </div>\r\n                        <br />\r\n                        <b>Hospital Affiliation:</b>\r\n                        <div className=\"profile-infield\">\r\n                            <input type=\"text\" placeholder=\"Change Office Affiliation\" />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"profile-card\" style={{marginTop:'330px'}}>\r\n                        <br />\r\n                        <br />\r\n                        <br />\r\n                        <br />\r\n                        <br />\r\n                        <div className='reg-infield'>\r\n                  <table width={500}>\r\n                    <tr name='mondayRow'>\r\n                      <td width={25}><input type='checkbox' name='mondayCheckbox' onChange={handleMondayCheckboxChange}/></td>\r\n                      <td width={200}>Monday</td>\r\n                      {showMondayTableData && (<>\r\n                        <td width={50}>Time: </td>\r\n                        <td><select name=\"time\" id=\"MondayStartTime\">\r\n                          <option value=\"08:00:00\">8:00 AM</option>\r\n                          <option value=\"09:00:00\">9:00 AM</option>\r\n                          <option value=\"10:00:00\">10:00 AM</option>\r\n                          <option value=\"11:00:00\">11:00 AM</option>\r\n                          <option value=\"12:00:00\">12:00 PM</option>\r\n                          <option value=\"13:00:00\">1:00 PM</option>\r\n                          <option value=\"14:00:00\">2:00 PM</option>\r\n                          <option value=\"15:00:00\">3:00 PM</option>\r\n                          <option value=\"16:00:00\">4:00 PM</option>\r\n                          <option value=\"17:00:00\">5:00 PM</option>\r\n                          </select></td>\r\n                        <td width={0}>to</td>\r\n                        <td><select name=\"time\" id=\"MondayEndTime\">\r\n                          <option value=\"08:00:00\">8:00 AM</option>\r\n                          <option value=\"09:00:00\">9:00 AM</option>\r\n                          <option value=\"10:00:00\">10:00 AM</option>\r\n                          <option value=\"11:00:00\">11:00 AM</option>\r\n                          <option value=\"12:00:00\">12:00 PM</option>\r\n                          <option value=\"13:00:00\">1:00 PM</option>\r\n                          <option value=\"14:00:00\">2:00 PM</option>\r\n                          <option value=\"15:00:00\">3:00 PM</option>\r\n                          <option value=\"16:00:00\">4:00 PM</option>\r\n                          <option value=\"17:00:00\">5:00 PM</option>\r\n                          </select></td>\r\n                      </>)}\r\n                    </tr>\r\n                    <tr name='tuesdayRow'>\r\n                      <td width={25}><input type='checkbox' name='tuesdayCheckbox' onChange={handleTuesdayCheckboxChange}/></td>\r\n                      <td width={200}>Tuesday</td>\r\n                      {showTuesdayTableData && (<>\r\n                        <td width={50}>Time: </td>\r\n                        <td><select name=\"time\" id=\"TuesdayStartTime\">\r\n                          <option value=\"08:00:00\">8:00 AM</option>\r\n                          <option value=\"09:00:00\">9:00 AM</option>\r\n                          <option value=\"10:00:00\">10:00 AM</option>\r\n                          <option value=\"11:00:00\">11:00 AM</option>\r\n                          <option value=\"12:00:00\">12:00 PM</option>\r\n                          <option value=\"13:00:00\">1:00 PM</option>\r\n                          <option value=\"14:00:00\">2:00 PM</option>\r\n                          <option value=\"15:00:00\">3:00 PM</option>\r\n                          <option value=\"16:00:00\">4:00 PM</option>\r\n                          <option value=\"17:00:00\">5:00 PM</option>\r\n                          </select></td>\r\n                        <td width={0}>to</td>\r\n                        <td><select name=\"time\" id=\"TuesdayEndTime\">\r\n                          <option value=\"08:00:00\">8:00 AM</option>\r\n                          <option value=\"09:00:00\">9:00 AM</option>\r\n                          <option value=\"10:00:00\">10:00 AM</option>\r\n                          <option value=\"11:00:00\">11:00 AM</option>\r\n                          <option value=\"12:00:00\">12:00 PM</option>\r\n                          <option value=\"13:00:00\">1:00 PM</option>\r\n                          <option value=\"14:00:00\">2:00 PM</option>\r\n                          <option value=\"15:00:00\">3:00 PM</option>\r\n                          <option value=\"16:00:00\">4:00 PM</option>\r\n                          <option value=\"17:00:00\">5:00 PM</option>\r\n                          </select></td>\r\n                      </>)}\r\n                    </tr>\r\n                    <tr name='wednesdayRow'>\r\n                      <td width={25}><input type='checkbox' name='wednesdayCheckbox' onChange={handleWednesdayCheckboxChange}/></td>\r\n                      <td width={200}>Wednesday</td>\r\n                      {showWednesdayTableData && (<>\r\n                        <td width={50}>Time: </td>\r\n                        <td><select name=\"time\" id=\"WednesdayStartTime\">\r\n                          <option value=\"08:00:00\">8:00 AM</option>\r\n                          <option value=\"09:00:00\">9:00 AM</option>\r\n                          <option value=\"10:00:00\">10:00 AM</option>\r\n                          <option value=\"11:00:00\">11:00 AM</option>\r\n                          <option value=\"12:00:00\">12:00 PM</option>\r\n                          <option value=\"13:00:00\">1:00 PM</option>\r\n                          <option value=\"14:00:00\">2:00 PM</option>\r\n                          <option value=\"15:00:00\">3:00 PM</option>\r\n                          <option value=\"16:00:00\">4:00 PM</option>\r\n                          <option value=\"17:00:00\">5:00 PM</option>\r\n                          </select></td>\r\n                        <td width={0}>to</td>\r\n                        <td><select name=\"time\" id=\"WednesdayEndTime\">\r\n                          <option value=\"08:00:00\">8:00 AM</option>\r\n                          <option value=\"09:00:00\">9:00 AM</option>\r\n                          <option value=\"10:00:00\">10:00 AM</option>\r\n                          <option value=\"11:00:00\">11:00 AM</option>\r\n                          <option value=\"12:00:00\">12:00 PM</option>\r\n                          <option value=\"13:00:00\">1:00 PM</option>\r\n                          <option value=\"14:00:00\">2:00 PM</option>\r\n                          <option value=\"15:00:00\">3:00 PM</option>\r\n                          <option value=\"16:00:00\">4:00 PM</option>\r\n                          <option value=\"17:00:00\">5:00 PM</option>\r\n                          </select></td>\r\n                      </>)}\r\n                    </tr>\r\n                    <tr name='thursdayRow'>\r\n                      <td width={25}><input type='checkbox' name='thursdayCheckbox' onChange={handleThursdayCheckboxChange}/></td>\r\n                      <td width={200}>Thursday</td>\r\n                      {showThursdayTableData && (<>\r\n                        <td width={50}>Time: </td>\r\n                        <td><select name=\"time\" id=\"ThursdayStartTime\">\r\n                          <option value=\"08:00:00\">8:00 AM</option>\r\n                          <option value=\"09:00:00\">9:00 AM</option>\r\n                          <option value=\"10:00:00\">10:00 AM</option>\r\n                          <option value=\"11:00:00\">11:00 AM</option>\r\n                          <option value=\"12:00:00\">12:00 PM</option>\r\n                          <option value=\"13:00:00\">1:00 PM</option>\r\n                          <option value=\"14:00:00\">2:00 PM</option>\r\n                          <option value=\"15:00:00\">3:00 PM</option>\r\n                          <option value=\"16:00:00\">4:00 PM</option>\r\n                          <option value=\"17:00:00\">5:00 PM</option>\r\n                          </select></td>\r\n                        <td width={0}>to</td>\r\n                        <td><select name=\"time\" id=\"ThursdayEndTime\">\r\n                          <option value=\"08:00:00\">8:00 AM</option>\r\n                          <option value=\"09:00:00\">9:00 AM</option>\r\n                          <option value=\"10:00:00\">10:00 AM</option>\r\n                          <option value=\"11:00:00\">11:00 AM</option>\r\n                          <option value=\"12:00:00\">12:00 PM</option>\r\n                          <option value=\"13:00:00\">1:00 PM</option>\r\n                          <option value=\"14:00:00\">2:00 PM</option>\r\n                          <option value=\"15:00:00\">3:00 PM</option>\r\n                          <option value=\"16:00:00\">4:00 PM</option>\r\n                          <option value=\"17:00:00\">5:00 PM</option>\r\n                          </select></td>\r\n                      </>)}\r\n                    </tr>\r\n                    <tr name='fridayRow'>\r\n                      <td width={25}><input type='checkbox' name='fridayCheckbox' onChange={handleFridayCheckboxChange}/></td>\r\n                      <td width={200}>Friday</td>\r\n                      {showFridayTableData && (<>\r\n                        <td width={50}>Time: </td>\r\n                        <td><select name=\"time\" id=\"FridayStartTime\">\r\n                          <option value=\"08:00:00\">8:00 AM</option>\r\n                          <option value=\"09:00:00\">9:00 AM</option>\r\n                          <option value=\"10:00:00\">10:00 AM</option>\r\n                          <option value=\"11:00:00\">11:00 AM</option>\r\n                          <option value=\"12:00:00\">12:00 PM</option>\r\n                          <option value=\"13:00:00\">1:00 PM</option>\r\n                          <option value=\"14:00:00\">2:00 PM</option>\r\n                          <option value=\"15:00:00\">3:00 PM</option>\r\n                          <option value=\"16:00:00\">4:00 PM</option>\r\n                          <option value=\"17:00:00\">5:00 PM</option>\r\n                          </select></td>\r\n                        <td width={0}>to</td>\r\n                        <td><select name=\"time\" id=\"FridayEndTime\">\r\n                          <option value=\"08:00:00\">8:00 AM</option>\r\n                          <option value=\"09:00:00\">9:00 AM</option>\r\n                          <option value=\"10:00:00\">10:00 AM</option>\r\n                          <option value=\"11:00:00\">11:00 AM</option>\r\n                          <option value=\"12:00:00\">12:00 PM</option>\r\n                          <option value=\"13:00:00\">1:00 PM</option>\r\n                          <option value=\"14:00:00\">2:00 PM</option>\r\n                          <option value=\"15:00:00\">3:00 PM</option>\r\n                          <option value=\"16:00:00\">4:00 PM</option>\r\n                          <option value=\"17:00:00\">5:00 PM</option>\r\n                          </select></td>\r\n                      </>)}\r\n                    </tr>\r\n                    <tr name='saturdayRow'>\r\n                      <td width={25}><input type='checkbox' name='saturdayCheckbox' onChange={handleSaturdayCheckboxChange}/></td>\r\n                      <td width={200}>Saturday</td>\r\n                      {showSaturdayTableData && (<>\r\n                        <td width={50}>Time: </td>\r\n                        <td><select name=\"time\" id=\"SaturdayStartTime\">\r\n                          <option value=\"08:00:00\">8:00 AM</option>\r\n                          <option value=\"09:00:00\">9:00 AM</option>\r\n                          <option value=\"10:00:00\">10:00 AM</option>\r\n                          <option value=\"11:00:00\">11:00 AM</option>\r\n                          <option value=\"12:00:00\">12:00 PM</option>\r\n                          <option value=\"13:00:00\">1:00 PM</option>\r\n                          <option value=\"14:00:00\">2:00 PM</option>\r\n                          <option value=\"15:00:00\">3:00 PM</option>\r\n                          <option value=\"16:00:00\">4:00 PM</option>\r\n                          <option value=\"17:00:00\">5:00 PM</option>\r\n                          </select></td>\r\n                        <td width={0}>to</td>\r\n                        <td><select name=\"time\" id=\"SaturdayEndTime\">\r\n                          <option value=\"08:00:00\">8:00 AM</option>\r\n                          <option value=\"09:00:00\">9:00 AM</option>\r\n                          <option value=\"10:00:00\">10:00 AM</option>\r\n                          <option value=\"11:00:00\">11:00 AM</option>\r\n                          <option value=\"12:00:00\">12:00 PM</option>\r\n                          <option value=\"13:00:00\">1:00 PM</option>\r\n                          <option value=\"14:00:00\">2:00 PM</option>\r\n                          <option value=\"15:00:00\">3:00 PM</option>\r\n                          <option value=\"16:00:00\">4:00 PM</option>\r\n                          <option value=\"17:00:00\">5:00 PM</option>\r\n                          </select></td>\r\n                      </>)}\r\n                    </tr>\r\n                    <tr name='sundayRow'>\r\n                      <td width={25}><input type='checkbox' name='sundayCheckbox' onChange={handleSundayCheckboxChange}/></td>\r\n                      <td width={200}>Sunday</td>\r\n                      {showSundayTableData && (<>\r\n                        <td width={50}>Time: </td>\r\n                        <td><select name=\"time\" id=\"SundayStartTime\">\r\n                          <option value=\"08:00:00\">8:00 AM</option>\r\n                          <option value=\"09:00:00\">9:00 AM</option>\r\n                          <option value=\"10:00:00\">10:00 AM</option>\r\n                          <option value=\"11:00:00\">11:00 AM</option>\r\n                          <option value=\"12:00:00\">12:00 PM</option>\r\n                          <option value=\"13:00:00\">1:00 PM</option>\r\n                          <option value=\"14:00:00\">2:00 PM</option>\r\n                          <option value=\"15:00:00\">3:00 PM</option>\r\n                          <option value=\"16:00:00\">4:00 PM</option>\r\n                          <option value=\"17:00:00\">5:00 PM</option>\r\n                          </select></td>\r\n                        <td width={0}>to</td>\r\n                        <td><select name=\"time\" id=\"SundayEndTime\">\r\n                          <option value=\"08:00:00\">8:00 AM</option>\r\n                          <option value=\"09:00:00\">9:00 AM</option>\r\n                          <option value=\"10:00:00\">10:00 AM</option>\r\n                          <option value=\"11:00:00\">11:00 AM</option>\r\n                          <option value=\"12:00:00\">12:00 PM</option>\r\n                          <option value=\"13:00:00\">1:00 PM</option>\r\n                          <option value=\"14:00:00\">2:00 PM</option>\r\n                          <option value=\"15:00:00\">3:00 PM</option>\r\n                          <option value=\"16:00:00\">4:00 PM</option>\r\n                          <option value=\"17:00:00\">5:00 PM</option>\r\n                          </select></td>\r\n                      </>)}\r\n                    </tr>\r\n                  </table>\r\n                </div>\r\n                <br />\r\n                <button type=\"submit\">Save Changes</button>\r\n                    </div>\r\n                    \r\n                    <div className=\"profile-card\" style={{marginTop:'150px'}}>\r\n                \r\n                        <br />\r\n                        <br />\r\n                        <br />\r\n                        <br />\r\n                        <br />\r\n                        <br />\r\n                        <br />\r\n                        <br />\r\n                        <br />\r\n                        <img\r\n                            src={require('../../images/docpic.png')}\r\n                            alt='profilepic'\r\n                            style={{ maxWidth: '80%', maxHeight: '80vh', margin: 0}}\r\n                        />\r\n                    </div>\r\n            </div>\r\n            <div className=\"steps\"  style={{marginTop:'-10px'}}>\r\n                <div className=\"step-card\">\r\n\r\n                    <img\r\n                        src={require('../../images/docprofile.png')}\r\n                        alt='vision'\r\n                        style={{ maxWidth: '100%', maxHeight: '100hw', margin: 0}}\r\n                    />\r\n                </div>\r\n                <div className=\"step-card\" >\r\n                <br />\r\n                    <br />\r\n                    <br />\r\n                    <br />\r\n                    <br />\r\n                    <br />\r\n                    <p>At 'Doc Click Connect,' we're committed to empowering healthcare providers like you to \r\n                    <br/>connect with patients more efficiently and effectively. Our platform is designed to streamline \r\n                    <br/>the process of reaching, engaging, and caring for your patients, so you can focus on what \r\n                    <br/>you do best - providing exceptional medical care.\r\n                    <br/>\r\n                    <br />\r\n                    <br />As a dedicated healthcare professional, your expertise is crucial to the well-being of your \r\n                    <br />patients. We're here to help you expand your reach and provide the best care possible. With \r\n                    <br />our platform, you can create an informative and engaging profile, showcasing your \r\n                    <br/>qualifications, specialties, and a personal introduction.</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <DoctorFooter />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DoctorEditClinic;","D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\pages\\DoctorPages\\DoctorAddClinic.jsx",["297","298","299","300","301","302","303","304","305"],[],"import \"../../styles/Register.css\";\r\nimport DoctorNavbar from '../../components/DoctorNavbar';\r\nimport DoctorFooter from '../../components/DoctorFooter'\r\nimport React, { useState, useEffect }  from 'react';\r\n\r\nconst DoctorAddClinic = () => {\r\n  const [doctorUserId, setDoctorUserId] = useState('');\r\n  const [name, setName] = useState('');\r\n  const [address, setAddress] = useState('');\r\n  const [officeNumber, setOfficeNumber] = useState('');\r\n  const [officeEmail, setOfficeEmail] = useState('');\r\n  const [hospital, setHospital] = useState('');\r\n  const [addClinicMessage, setAddClinicMessage] = useState('');\r\n  const [registrationSuccessful, setRegistrationSuccessful] = useState(false);\r\n  const [slots, setSlots] = useState(''); //needs to be not hardcoded zzz\r\n  const [checkedDays, setCheckedDays] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Replace 'http://localhost:8080' with your actual API URL\r\n    fetch('http://localhost:8080/checkLoggedInDoctor')\r\n      .then((response) => {\r\n        if (response.ok) {\r\n          return response.json();\r\n        }\r\n        throw new Error('Network response was not ok');\r\n      })\r\n      .then((data) => {\r\n        // Assuming setDoctorUserId is a state setter function\r\n        setDoctorUserId(data);\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error fetching data:', error.message);\r\n      });\r\n  }, []); \r\n  \r\n  \r\n  const handleAddClinic = async () => {\r\n    // Check if any of the fields are empty\r\n    if (\r\n      !name ||\r\n      !address ||\r\n      !officeNumber ||\r\n      !officeEmail \r\n    ) {\r\n      setAddClinicMessage('Please fill in all required fields.');\r\n      return;\r\n    }\r\n\r\n    const officeNumberRegex = /^\\d{11}$/;\r\n    if (!officeNumberRegex.test(officeNumber)) {\r\n      setAddClinicMessage('Contact number should be exactly 11 digits and contain only numbers (0-9).');\r\n      return;\r\n    }\r\n\r\n    // Validate email format using regular expression\r\n    const officeEmailRegex = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/;\r\n    if (!officeEmailRegex.test(officeEmail)) {\r\n      setAddClinicMessage('Invalid email format.');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const url = new URL('http://localhost:8080/clinic');\r\n      const userData = {\r\n        name,\r\n        address,\r\n        officeNumber,\r\n        officeEmail,\r\n        hospital,\r\n      };\r\n\r\n\r\n      const response = await fetch(url, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(userData),\r\n      });\r\n\r\n      if (response.ok) {\r\n        // Signup successful\r\n        setAddClinicMessage('Clinic added successfully');\r\n        setRegistrationSuccessful(true);\r\n        handleAddSchedule();\r\n \r\n      } else {\r\n        // Signup failed\r\n        const errorMessage = await response.text();\r\n        setAddClinicMessage(errorMessage);\r\n        setAddClinicMessage(`Signup failed`);\r\n        // Handle the error or display an error message to the user\r\n      }\r\n    } catch (error) {\r\n      console.error('Error during signup:', error);\r\n      setAddClinicMessage('Error during signup. Please try again later.');\r\n      // Handle the error or display an error message to the user\r\n    }\r\n  }\r\n  const handleDayCheckboxChange = (day, isChecked) => {\r\n    if (isChecked) {\r\n      // Add the day to the list of checked days\r\n      setCheckedDays((prevCheckedDays) => [...prevCheckedDays, day]);\r\n    } else {\r\n      // Remove the day from the list of checked days\r\n      setCheckedDays((prevCheckedDays) => prevCheckedDays.filter((d) => d !== day));\r\n    }\r\n  };\r\n  \r\n  const handleAddSchedule = async () => {\r\n    if (checkedDays.length === 0) {\r\n      console.error('No days selected for schedule.');\r\n      return;\r\n    }\r\n  \r\n    // Iterate through the list of checked days and make API calls for each day\r\n    checkedDays.forEach(async (day) => {\r\n      // Construct the query string for the specific day\r\n      const queryString = `name=${name}&doctorUserId=${doctorUserId}&scheduleDay=${day}&startTime=${document.getElementById(`${day}StartTime`).value}&endTime=${document.getElementById(`${day}EndTime`).value}&slots=${slots}`;\r\n      \r\n      try {\r\n        const response = await fetch(`http://localhost:8080/schedule?${queryString}`, {\r\n          method: 'POST',\r\n        });\r\n  \r\n        if (response.ok) {\r\n          // Schedule added successfully for the current day\r\n          window.location.href = '/docclinic'\r\n        } else {\r\n          // Schedule addition failed for the current day\r\n          const errorMessage = await response.text();\r\n          console.error(`Schedule addition failed for ${day}: ${errorMessage}`);\r\n          \r\n        }\r\n      } catch (error) {\r\n        console.error(`Error during schedule addition for ${day}:`, error);\r\n        \r\n      }\r\n    });\r\n  };\r\n  \r\n  \r\n\r\n  const [showMondayTableData, setShowMondayTableData] = useState(false);\r\n  const handleMondayCheckboxChange = (event) => {\r\n    setShowMondayTableData(event.target.checked);\r\n    if (event.target.checked) {\r\n      handleDayCheckboxChange('Monday', true);\r\n    } else {\r\n      handleDayCheckboxChange('Monday', false);\r\n    }\r\n  };\r\n\r\n  const [showTuesdayTableData, setShowTuesdayTableData] = useState(false);\r\n  const handleTuesdayCheckboxChange = (event) => {\r\n    setShowTuesdayTableData(event.target.checked);\r\n    if (event.target.checked) {\r\n      handleDayCheckboxChange('Tuesday', true);\r\n    } else {\r\n      handleDayCheckboxChange('Tuesday', false);\r\n    }\r\n  };\r\n\r\n  const [showWednesdayTableData, setShowWednesdayTableData] = useState(false);\r\n  const handleWednesdayCheckboxChange = (event) => {\r\n    setShowWednesdayTableData(event.target.checked);\r\n    if (event.target.checked) {\r\n      handleDayCheckboxChange('Wednesday', true);\r\n    } else {\r\n      handleDayCheckboxChange('Wednesday', false);\r\n    }\r\n  };\r\n\r\n  const [showThursdayTableData, setShowThursdayTableData] = useState(false);\r\n  const handleThursdayCheckboxChange = (event) => {\r\n    setShowThursdayTableData(event.target.checked);\r\n    if (event.target.checked) {\r\n      handleDayCheckboxChange('Thursday', true);\r\n    } else {\r\n      handleDayCheckboxChange('Thursday', false);\r\n    }\r\n  };\r\n\r\n  const [showFridayTableData, setShowFridayTableData] = useState(false);\r\n  const handleFridayCheckboxChange = (event) => {\r\n    setShowFridayTableData(event.target.checked);\r\n    if (event.target.checked) {\r\n      handleDayCheckboxChange('Friday', true);\r\n    } else {\r\n      handleDayCheckboxChange('Friday', false);\r\n    }\r\n  };\r\n\r\n  const [showSaturdayTableData, setShowSaturdayTableData] = useState(false);\r\n  const handleSaturdayCheckboxChange = (event) => {\r\n    setShowSaturdayTableData(event.target.checked);\r\n    if (event.target.checked) {\r\n      handleDayCheckboxChange('Saturday', true);\r\n    } else {\r\n      handleDayCheckboxChange('Saturday', false);\r\n    }\r\n  };\r\n\r\n\r\n  const [showSundayTableData, setShowSundayTableData] = useState(false);\r\n  const handleSundayCheckboxChange = (event) => {\r\n    setShowSundayTableData(event.target.checked);\r\n    if (event.target.checked) {\r\n      handleDayCheckboxChange('Sunday', true);\r\n    } else {\r\n      handleDayCheckboxChange('Sunday', false);\r\n    }\r\n  };\r\n\r\n  const [showMondayAddTimeSlot, setShowMondayAddTimeSlot] = useState(false);\r\n  const handleMondayAddTimeSlotClick = () => {\r\n    setShowMondayAddTimeSlot(!showMondayAddTimeSlot);\r\n  };\r\n\r\n  const [showTuesdayAddTimeSlot, setShowTuesdayAddTimeSlot] = useState(false);\r\n  const handleTuesdayAddTimeSlotClick = () => {\r\n    setShowTuesdayAddTimeSlot(!showTuesdayAddTimeSlot);\r\n  };\r\n\r\n  const [showWednesdayAddTimeSlot, setShowWednesdayAddTimeSlot] = useState(false);\r\n  const handleWednesdayAddTimeSlotClick = () => {\r\n    setShowWednesdayAddTimeSlot(!showWednesdayAddTimeSlot);\r\n  };\r\n\r\n  const [showThursdayAddTimeSlot, setShowThursdayAddTimeSlot] = useState(false);\r\n  const handleThursdayAddTimeSlotClick = () => {\r\n    setShowThursdayAddTimeSlot(!showThursdayAddTimeSlot);\r\n  };\r\n\r\n  const [showFridayAddTimeSlot, setShowFridayAddTimeSlot] = useState(false);\r\n  const handleFridayAddTimeSlotClick = () => {\r\n    setShowFridayAddTimeSlot(!showFridayAddTimeSlot);\r\n  };\r\n\r\n  const [showSaturdayAddTimeSlot, setShowSaturdayAddTimeSlot] = useState(false);\r\n  const handleSaturdayAddTimeSlotClick = () => {\r\n    setShowSaturdayAddTimeSlot(!showSaturdayAddTimeSlot);\r\n  };\r\n\r\n  const [showSundayAddTimeSlot, setShowSundayAddTimeSlot] = useState(false);\r\n  const handleSundayAddTimeSlotClick = () => {\r\n    setShowSundayAddTimeSlot(!showSundayAddTimeSlot);\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //   console.log('Checked Days:', checkedDays.join(', '));\r\n  // }, [checkedDays]);\r\n\r\n\r\n  return (\r\n    <div>\r\n    <DoctorNavbar/>\r\n    <div className=\"reg-container\" id=\"reg-container\">\r\n      \r\n      <div className=\"register\">\r\n        <h1 style={{ color: '#0094d4'}}>Add Clinic</h1>\r\n        <form action=\"#\" id=\"register-form\" >\r\n            <div className=\"reg-infield\">              \r\n                <input type=\"text\"\r\n                  id=\"name\"\r\n                  placeholder=\"*Clinic Name\"\r\n                  name=\"name\"\r\n                  value={name}\r\n                  onChange={(e) => setName(e.target.value)}\r\n                />\r\n            </div>\r\n            <div className=\"reg-infield\">          \r\n                <input type=\"text\"\r\n                  id=\"address\"\r\n                  placeholder=\"*(House/Lot/Unit No., Street, Barangay, City/Town, Province)\"\r\n                  name=\"address\"\r\n                  value={address}\r\n                  onChange={(e) => setAddress(e.target.value)}\r\n                />\r\n          </div>\r\n            <div className=\"reg-infield\">\r\n              <input type=\"text\"\r\n                  id=\"officeNumber\"\r\n                  placeholder=\"*Office Number\"\r\n                  name=\"officeNumber\"\r\n                  value={officeNumber}\r\n                  onChange={(e) => setOfficeNumber(e.target.value)}\r\n                />\r\n            </div>\r\n            <div className=\"reg-infield\">\r\n              <input type=\"text\"\r\n                  id=\"officeEmail\"\r\n                  placeholder=\"*Office Email\"\r\n                  name=\"officeEmail\"\r\n                  value={officeEmail}\r\n                  onChange={(e) => setOfficeEmail(e.target.value)}\r\n                />\r\n          </div>\r\n          <div className=\"reg-infield\">              \r\n              <input type=\"text\"\r\n                  id=\"hospital\"\r\n                  placeholder=\"Hospital Affiliation\"\r\n                  name=\"hospital\"\r\n                  value={hospital}\r\n                  onChange={(e) => setHospital(e.target.value)}\r\n                />\r\n            </div>\r\n            <div className='reg-row'>\r\n                <div className='reg-infield'>\r\n                    <h4 style={{ marginBottom: '-30px' }}>Schedule: </h4>\r\n                    <p style={{ marginBottom: '-5px' }}>Select all that applies</p>\r\n                </div>\r\n              </div>\r\n              <div className='reg-row' style={{ overflowY: 'auto', maxHeight: '200px'}}>\r\n                <div className='reg-infield'>\r\n                  <table width={650}>\r\n                    <tr name='mondayRow'>\r\n                      <td width={25}><input type='checkbox' name='mondayCheckbox' onChange={handleMondayCheckboxChange}/></td>\r\n                      <td width={0}>Monday</td>\r\n                      {showMondayTableData && (<>\r\n                        <td width={50}>Time: </td>\r\n                        <td width={85}><input type=\"text\" id='MondayStartTime' placeholder='08:00' style={{paddingRight: \"0px\"}}/></td>\r\n                        <td width={85}><select name=\"MondayStartTime\" id=\"MondayStartTime\">\r\n                          <option value=\"AM\">AM</option>\r\n                          <option value=\"PM\">PM</option>\r\n                          </select></td>\r\n                        <td width={20}>to</td>\r\n                        <td width={85}><input type=\"text\" id='MondayEndTime' placeholder='12:00'style={{paddingRight: \"0px\"}}/></td>\r\n                        <td width={85}><select name=\"MondayEndTime\" id=\"MondayEndTime\">\r\n                          <option value=\"AM\">AM</option>\r\n                          <option value=\"PM\">PM</option>\r\n                          </select></td>\r\n                        <td width={60} style={{paddingBottom: \"0px\", paddingLeft: \"5px\"}}>Slots: </td>                      \r\n                        <td width={40}><input type='text' placeholder='0'   onChange={(e) => setSlots(e.target.value)}/></td>\r\n                        <td style={{paddingLeft: \"10px\", verticalAlign: \"middle\", width: \"150px\"}}><a href='#' onClick={handleMondayAddTimeSlotClick}><u>Add Time Slot</u></a></td>\r\n                      </>)}\r\n                    </tr>\r\n                    {showMondayTableData && showMondayAddTimeSlot && (<>\r\n                    <tr>\r\n                        <td width={25}></td>\r\n                        <td width={0}></td>\r\n                        <td width={50}>Time: </td>\r\n                        <td width={85}><input type=\"text\" id='MondayStartTime' placeholder='08:00' style={{paddingRight: \"0px\"}}/></td>\r\n                        <td width={85}><select name=\"MondayStartTime\" id=\"MondayStartTime\">\r\n                          <option value=\"AM\">AM</option>\r\n                          <option value=\"PM\">PM</option>\r\n                          </select></td>\r\n                        <td width={20}>to</td>\r\n                        <td width={85}><input type=\"text\" id='MondayEndTime' placeholder='12:00'style={{paddingRight: \"0px\"}}/></td>\r\n                        <td width={85}><select name=\"MondayEndTime\" id=\"MondayEndTime\">\r\n                          <option value=\"AM\">AM</option>\r\n                          <option value=\"PM\">PM</option>\r\n                          </select></td>\r\n                        <td width={60} style={{paddingBottom: \"0px\", paddingLeft: \"5px\"}}>Slots: </td>\r\n                        <td width={40}><input type='text' placeholder='0'  onChange={(e) => setSlots(e.target.value)}/></td>\r\n                    </tr>\r\n                    </>)}\r\n                    <tr name='tuesdayRow'>\r\n                      <td width={25}><input type='checkbox' name='tuesdayCheckbox' onChange={handleTuesdayCheckboxChange}/></td>\r\n                      <td width={0}>Tuesday</td>\r\n                      {showTuesdayTableData && (<>\r\n                        <td width={50}>Time: </td>\r\n                        <td width={85}><input type=\"text\" id='TuesdayStartTime'  placeholder='08:00'/></td>\r\n                        <td width={85}><select name=\"TuesdayStartTime\" id=\"TuesdayStartTime\">\r\n                          <option value=\"AM\">AM</option>\r\n                          <option value=\"PM\">PM</option>\r\n                          </select></td>\r\n                        <td width={20}>to</td>\r\n                        <td width={85}><input type=\"text\" id='TuesdayEndTime'  placeholder='12:00'/></td>\r\n                        <td width={85}><select name=\"TuesdayEndTime\" id=\"TuesdayEndTime\">\r\n                          <option value=\"AM\">AM</option>\r\n                          <option value=\"PM\">PM</option>\r\n                          </select></td>\r\n                          <td width={60} style={{paddingBottom: \"0px\", paddingLeft: \"5px\"}}>Slots: </td>\r\n                          <td width={40}><input type='text' placeholder='0' onChange={(e) => setSlots(e.target.value)}/></td>\r\n                          <td style={{verticalAlign: \"middle\", paddingLeft: \"10px\", paddingTop: \"2px\", width: \"150px\"}}><a href='#' onClick={handleTuesdayAddTimeSlotClick}><u>Add Time Slot</u></a></td>\r\n                      </>)}\r\n                    </tr>\r\n                    {showTuesdayTableData && showTuesdayAddTimeSlot && (<>\r\n                    <tr>\r\n                        <td width={25}></td>\r\n                        <td width={0}></td>\r\n                        <td width={50}>Time: </td>\r\n                        <td width={85}><input type=\"text\" id='TuesdayStartTime'  placeholder='08:00'/></td>\r\n                        <td width={85}><select name=\"TuesdayStartTime\" id=\"TuesdayStartTime\">\r\n                          <option value=\"AM\">AM</option>\r\n                          <option value=\"PM\">PM</option>\r\n                          </select></td>\r\n                        <td width={20}>to</td>\r\n                        <td width={85}><input type=\"text\" id='TuesdayEndTime'  placeholder='12:00'/></td>\r\n                        <td width={85}><select name=\"TuesdayEndTime\" id=\"TuesdayEndTime\">\r\n                          <option value=\"AM\">AM</option>\r\n                          <option value=\"PM\">PM</option>\r\n                          </select></td>\r\n                        <td width={60} style={{paddingBottom: \"0px\", paddingLeft: \"5px\"}}>Slots: </td>\r\n                        <td width={40}><input type='text' placeholder='0'  onChange={(e) => setSlots(e.target.value)} /></td>\r\n                    </tr>\r\n                    </>)}\r\n                    <tr name='wednesdayRow'>\r\n                      <td width={25}><input type='checkbox' name='wednesdayCheckbox' onChange={handleWednesdayCheckboxChange}/></td>\r\n                      <td width={0}>Wednesday</td>\r\n                      {showWednesdayTableData && (<>\r\n                        <td width={50}>Time: </td>\r\n                        <td width={85}><input type=\"text\" id='WednesdayStartTime'  placeholder='08:00'/></td>\r\n                        <td width={85}><select name=\"WednesdayStartTime\" id=\"WednesdayStartTime\">\r\n                          <option value=\"AM\">AM</option>\r\n                          <option value=\"PM\">PM</option>\r\n                          </select></td>\r\n                        <td width={20}>to</td>\r\n                        <td width={85}><input type=\"text\" id='WednesdayEndTime'  placeholder='12:00'/></td>\r\n                        <td width={85}><select name=\"WednesdayEndTime\" id=\"WednesdayEndTime\">\r\n                          <option value=\"AM\">AM</option>\r\n                          <option value=\"PM\">PM</option>\r\n                          </select></td>\r\n                          <td width={60} style={{paddingBottom: \"0px\", paddingLeft: \"5px\"}}>Slots: </td>\r\n                          <td width={40}><input type='text' placeholder='0' onChange={(e) => setSlots(e.target.value)}/></td>\r\n                          <td style={{verticalAlign: \"middle\", paddingLeft: \"10px\", paddingTop: \"2px\"}}><a href='#' onClick={handleWednesdayAddTimeSlotClick}><u>Add Time Slot</u></a></td>\r\n                      </>)}\r\n                    </tr>\r\n                    {showWednesdayTableData && showWednesdayAddTimeSlot && (<>\r\n                    <tr>\r\n                        <td width={25}></td>\r\n                        <td width={0}></td>\r\n                        <td width={50}>Time: </td>\r\n                        <td width={85}><input type=\"text\" id='WednesdayStartTime'  placeholder='08:00'/></td>\r\n                        <td width={85}><select name=\"WednesdayStartTime\" id=\"WednesdayStartTime\">\r\n                          <option value=\"AM\">AM</option>\r\n                          <option value=\"PM\">PM</option>\r\n                          </select></td>\r\n                        <td width={20}>to</td>\r\n                        <td width={85}><input type=\"text\" id='WednesdayEndTime'  placeholder='12:00'/></td>\r\n                        <td width={85}><select name=\"WednesdayEndTime\" id=\"WednesdayEndTime\">\r\n                          <option value=\"AM\">AM</option>\r\n                          <option value=\"PM\">PM</option>\r\n                          </select></td>\r\n                        <td width={60} style={{paddingBottom: \"0px\", paddingLeft: \"5px\"}}>Slots: </td>\r\n                        <td width={40}><input type='text' placeholder='0'  onChange={(e) => setSlots(e.target.value)}/></td>\r\n                    </tr>\r\n                    </>)}\r\n                    <tr name='thursdayRow'>\r\n                      <td width={25}><input type='checkbox' name='thursdayCheckbox' onChange={handleThursdayCheckboxChange}/></td>\r\n                      <td width={0}>Thursday</td>\r\n                      {showThursdayTableData && (<>\r\n                        <td width={50}>Time: </td>\r\n                        <td width={85}><input type=\"text\" id='ThursdayStartTime'  placeholder='08:00'/></td>\r\n                        <td width={85}><select name=\"ThursdayStartTime\" id=\"ThursdayStartTime\">\r\n                          <option value=\"AM\">AM</option>\r\n                          <option value=\"PM\">PM</option>\r\n                          </select></td>\r\n                        <td width={20}>to</td>\r\n                        <td width={85}><input type=\"text\" id='ThursdayEndTime'  placeholder='12:00'/></td>\r\n                        <td width={85}><select name=\"ThursdayEndTime\" id=\"ThursdayEndTime\">\r\n                          <option value=\"AM\">AM</option>\r\n                          <option value=\"PM\">PM</option>\r\n                          </select></td>\r\n                          <td width={60} style={{paddingBottom: \"0px\", paddingLeft: \"5px\"}}>Slots: </td>\r\n                          <td width={40}><input type='text' placeholder='0' onChange={(e) => setSlots(e.target.value)}/></td>\r\n                          <td style={{verticalAlign: \"middle\", paddingLeft: \"10px\", paddingTop: \"2px\"}}><a href='#' onClick={handleThursdayAddTimeSlotClick}><u>Add Time Slot</u></a></td>\r\n                      </>)}\r\n                    </tr>\r\n                    {showThursdayTableData && showThursdayAddTimeSlot && (<>\r\n                    <tr>\r\n                        <td width={25}></td>\r\n                        <td width={0}></td>\r\n                        <td width={50}>Time: </td>\r\n                        <td width={85}><input type=\"text\" id='ThursdayStartTime'  placeholder='08:00'/></td>\r\n                        <td width={85}><select name=\"ThursdayStartTime\" id=\"ThursdayStartTime\">\r\n                          <option value=\"AM\">AM</option>\r\n                          <option value=\"PM\">PM</option>\r\n                          </select></td>\r\n                        <td width={20}>to</td>\r\n                        <td width={85}><input type=\"text\" id='ThursdayEndTime'  placeholder='12:00'/></td>\r\n                        <td width={85}><select name=\"ThursdayEndTime\" id=\"ThursdayEndTime\">\r\n                          <option value=\"AM\">AM</option>\r\n                          <option value=\"PM\">PM</option>\r\n                          </select></td>\r\n                        <td width={60} style={{paddingBottom: \"0px\", paddingLeft: \"5px\"}}>Slots: </td>\r\n                        <td width={40}><input type='text' placeholder='0'  onChange={(e) => setSlots(e.target.value)}/></td>\r\n                    </tr>\r\n                    </>)}\r\n                    <tr name='fridayRow'>\r\n                      <td width={25}><input type='checkbox' name='fridayCheckbox' onChange={handleFridayCheckboxChange}/></td>\r\n                      <td width={0}>Friday</td>\r\n                      {showFridayTableData && (<>\r\n                        <td width={50}>Time: </td>\r\n                        <td width={85}><input type=\"text\" id='FridayStartTime'  placeholder='08:00'/></td>\r\n                        <td width={85}><select name=\"FridayStartTime\" id=\"FridayStartTime\">\r\n                          <option value=\"AM\">AM</option>\r\n                          <option value=\"PM\">PM</option>\r\n                          </select></td>\r\n                        <td width={20}>to</td>\r\n                        <td width={85}><input type=\"text\" id='FridayEndTime'  placeholder='12:00'/></td>\r\n                        <td width={85}><select name=\"FridayEndTime\" id=\"FridayEndTime\">\r\n                          <option value=\"AM\">AM</option>\r\n                          <option value=\"PM\">PM</option>\r\n                          </select></td>\r\n                          <td width={60} style={{paddingBottom: \"0px\", paddingLeft: \"5px\"}}>Slots: </td>\r\n                          <td width={40}><input type='text' placeholder='0'  onChange={(e) => setSlots(e.target.value)}/></td>\r\n                          <td style={{verticalAlign: \"middle\", paddingLeft: \"10px\", paddingTop: \"2px\"}}><a href='#' onClick={handleFridayAddTimeSlotClick}><u>Add Time Slot</u></a></td>\r\n                      </>)}\r\n                    </tr>\r\n                    {showFridayTableData && showFridayAddTimeSlot && (<>\r\n                    <tr>\r\n                        <td width={25}></td>\r\n                        <td width={0}></td>\r\n                        <td width={50}>Time: </td>\r\n                        <td width={85}><input type=\"text\" id='FridayStartTime'  placeholder='08:00'/></td>\r\n                        <td width={85}><select name=\"FridayStartTime\" id=\"FridayStartTime\">\r\n                          <option value=\"AM\">AM</option>\r\n                          <option value=\"PM\">PM</option>\r\n                          </select></td>\r\n                        <td width={20}>to</td>\r\n                        <td width={85}><input type=\"text\" id='FridayEndTime'  placeholder='12:00'/></td>\r\n                        <td width={85}><select name=\"FridayEndTime\" id=\"FridayEndTime\">\r\n                          <option value=\"AM\">AM</option>\r\n                          <option value=\"PM\">PM</option>\r\n                          </select></td>\r\n                        <td width={60} style={{paddingBottom: \"0px\", paddingLeft: \"5px\"}}>Slots: </td>\r\n                        <td width={40}><input type='text' placeholder='0'  onChange={(e) => setSlots(e.target.value)}/></td>\r\n                    </tr>\r\n                    </>)}\r\n                    <tr name='saturdayRow'>\r\n                      <td width={25}><input type='checkbox' name='saturdayCheckbox' onChange={handleSaturdayCheckboxChange}/></td>\r\n                      <td width={0}>Saturday</td>\r\n                      {showSaturdayTableData && (<>\r\n                        <td width={50}>Time: </td>\r\n                        <td width={85}><input type=\"text\" id='SaturdayStartTime'  placeholder='08:00'/></td>\r\n                        <td width={85}><select name=\"SaturdayStartTime\" id=\"SaturdayStartTime\">\r\n                          <option value=\"AM\">AM</option>\r\n                          <option value=\"PM\">PM</option>\r\n                          </select></td>\r\n                        <td width={20}>to</td>\r\n                        <td width={85}><input type=\"text\" id='SaturdayEndTime'  placeholder='12:00'/></td>\r\n                        <td width={85}><select name=\"SaturdayEndTime\" id=\"SaturdayEndTime\">\r\n                          <option value=\"AM\">AM</option>\r\n                          <option value=\"PM\">PM</option>\r\n                          </select></td>\r\n                          <td width={60} style={{paddingBottom: \"0px\", paddingLeft: \"5px\"}}>Slots: </td>\r\n                          <td width={40}><input type='text' placeholder='0' onChange={(e) => setSlots(e.target.value)}/></td>\r\n                          <td style={{verticalAlign: \"middle\", paddingLeft: \"10px\", paddingTop: \"2px\"}}><a href='#' onClick={handleSaturdayAddTimeSlotClick}><u>Add Time Slot</u></a></td>\r\n                      </>)}\r\n                    </tr>\r\n                    {showSaturdayTableData && showSaturdayAddTimeSlot && (<>\r\n                    <tr>\r\n                        <td width={25}></td>\r\n                        <td width={0}></td>\r\n                        <td width={50}>Time: </td>\r\n                        <td width={85}><input type=\"text\" id='SaturdayStartTime'  placeholder='08:00'/></td>\r\n                        <td width={85}><select name=\"SaturdayStartTime\" id=\"SaturdayStartTime\">\r\n                          <option value=\"AM\">AM</option>\r\n                          <option value=\"PM\">PM</option>\r\n                          </select></td>\r\n                        <td width={20}>to</td>\r\n                        <td width={85}><input type=\"text\" id='SaturdayEndTime'  placeholder='12:00'/></td>\r\n                        <td width={85}><select name=\"SaturdayEndTime\" id=\"SaturdayEndTime\">\r\n                          <option value=\"AM\">AM</option>\r\n                          <option value=\"PM\">PM</option>\r\n                          </select></td>\r\n                        <td width={60} style={{paddingBottom: \"0px\", paddingLeft: \"5px\"}}>Slots: </td>\r\n                        <td width={40}><input type='text' placeholder='0'  onChange={(e) => setSlots(e.target.value)}/></td>\r\n                    </tr>\r\n                    </>)}\r\n                    <tr name='sundayRow'>\r\n                      <td width={25}><input type='checkbox' name='sundayCheckbox' onChange={handleSundayCheckboxChange}/></td>\r\n                      <td width={0}>Sunday</td>\r\n                      {showSundayTableData && (<>\r\n                        <td width={50}>Time: </td>\r\n                        <td width={85}><input type=\"text\" id='SundayStartTime'  placeholder='08:00'/></td>\r\n                        <td width={85}><select name=\"SundayStartTime\" id=\"SundayStartTime\">\r\n                          <option value=\"AM\">AM</option>\r\n                          <option value=\"PM\">PM</option>\r\n                          </select></td>\r\n                        <td width={20}>to</td>\r\n                        <td width={85}><input type=\"text\" id='SundayEndTime'  placeholder='12:00'/></td>\r\n                        <td width={85}><select name=\"SundayEndTime\" id=\"SundayEndTime\">\r\n                          <option value=\"AM\">AM</option>\r\n                          <option value=\"PM\">PM</option>\r\n                          </select></td>\r\n                          <td width={60} style={{paddingBottom: \"0px\", paddingLeft: \"5px\"}}>Slots: </td>\r\n                          <td width={40}><input type='text' placeholder='0'  onChange={(e) => setSlots(e.target.value)}/></td>\r\n                          <td style={{verticalAlign: \"middle\", paddingLeft: \"10px\", paddingTop: \"2px\"}}><a href='#' onClick={handleSundayAddTimeSlotClick}><u>Add Time Slot</u></a></td>\r\n                      </>)}\r\n                    </tr>\r\n                    {showSundayTableData && showSundayAddTimeSlot && (<>\r\n                    <tr>\r\n                        <td width={25}></td>\r\n                        <td width={0}></td>\r\n                        <td width={50}>Time: </td>\r\n                        <td width={85}><input type=\"text\" id='SundayStartTime'  placeholder='08:00'/></td>\r\n                        <td width={85}><select name=\"SundayStartTime\" id=\"SundayStartTime\">\r\n                          <option value=\"AM\">AM</option>\r\n                          <option value=\"PM\">PM</option>\r\n                          </select></td>\r\n                        <td width={20}>to</td>\r\n                        <td width={85}><input type=\"text\" id='SundayEndTime'  placeholder='12:00'/></td>\r\n                        <td width={85}><select name=\"SundayEndTime\" id=\"SundayEndTime\">\r\n                          <option value=\"AM\">AM</option>\r\n                          <option value=\"PM\">PM</option>\r\n                          </select></td>\r\n                        <td width={60} style={{paddingBottom: \"0px\", paddingLeft: \"5px\"}}>Slots: </td>\r\n                        <td width={40}><input type='text' placeholder='0'  onChange={(e) => setSlots(e.target.value)}/></td>\r\n                    </tr>\r\n                    </>)}\r\n                  </table> \r\n                </div>\r\n            </div>\r\n        </form>\r\n        <button type=\"button\" onClick={handleAddClinic}>Register</button>\r\n      </div>\r\n      \r\n    </div>\r\n    <DoctorFooter/>\r\n    </div>\r\n  );\r\n};\r\nexport default DoctorAddClinic;\r\n","D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\pages\\AppointmentPages\\SetAppointment.jsx",[],[],"D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\components\\HomeNavbar.jsx",[],[],"D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\components\\HomeFooter.jsx",[],[],"D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\components\\DoctorCalendar.jsx",[],[],"D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\components\\DoctorsForApproval.jsx",[],[],"D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\components\\Clinics.jsx",[],[],"D:\\3rd Year 1st Sem\\DocClickConnect\\appointment\\src\\components\\AvatarSelection.jsx",[],[],{"ruleId":"306","severity":1,"message":"307","line":1,"column":17,"nodeType":"308","messageId":"309","endLine":1,"endColumn":25},{"ruleId":"306","severity":1,"message":"310","line":1,"column":27,"nodeType":"308","messageId":"309","endLine":1,"endColumn":36},{"ruleId":"306","severity":1,"message":"311","line":3,"column":10,"nodeType":"308","messageId":"309","endLine":3,"endColumn":14},{"ruleId":"306","severity":1,"message":"311","line":3,"column":9,"nodeType":"308","messageId":"309","endLine":3,"endColumn":13},{"ruleId":"306","severity":1,"message":"311","line":4,"column":9,"nodeType":"308","messageId":"309","endLine":4,"endColumn":13},{"ruleId":"306","severity":1,"message":"312","line":8,"column":10,"nodeType":"308","messageId":"309","endLine":8,"endColumn":17},{"ruleId":"306","severity":1,"message":"313","line":19,"column":10,"nodeType":"308","messageId":"309","endLine":19,"endColumn":16},{"ruleId":"306","severity":1,"message":"314","line":19,"column":18,"nodeType":"308","messageId":"309","endLine":19,"endColumn":27},{"ruleId":"306","severity":1,"message":"315","line":36,"column":10,"nodeType":"308","messageId":"309","endLine":36,"endColumn":22},{"ruleId":"306","severity":1,"message":"316","line":162,"column":9,"nodeType":"308","messageId":"309","endLine":162,"endColumn":21},{"ruleId":"317","severity":1,"message":"318","line":101,"column":6,"nodeType":"319","endLine":101,"endColumn":8,"suggestions":"320"},{"ruleId":"321","severity":1,"message":"322","line":161,"column":94,"nodeType":"323","messageId":"324","endLine":161,"endColumn":99},{"ruleId":"306","severity":1,"message":"325","line":7,"column":11,"nodeType":"308","messageId":"309","endLine":7,"endColumn":18},{"ruleId":"306","severity":1,"message":"315","line":29,"column":10,"nodeType":"308","messageId":"309","endLine":29,"endColumn":22},{"ruleId":"306","severity":1,"message":"326","line":29,"column":24,"nodeType":"308","messageId":"309","endLine":29,"endColumn":39},{"ruleId":"306","severity":1,"message":"327","line":116,"column":15,"nodeType":"308","messageId":"309","endLine":116,"endColumn":27},{"ruleId":"317","severity":1,"message":"328","line":166,"column":6,"nodeType":"319","endLine":166,"endColumn":16,"suggestions":"329"},{"ruleId":"306","severity":1,"message":"330","line":189,"column":9,"nodeType":"308","messageId":"309","endLine":189,"endColumn":20},{"ruleId":"306","severity":1,"message":"331","line":30,"column":12,"nodeType":"308","messageId":"309","endLine":30,"endColumn":16},{"ruleId":"306","severity":1,"message":"312","line":31,"column":12,"nodeType":"308","messageId":"309","endLine":31,"endColumn":19},{"ruleId":"306","severity":1,"message":"332","line":45,"column":12,"nodeType":"308","messageId":"309","endLine":45,"endColumn":20},{"ruleId":"306","severity":1,"message":"333","line":45,"column":22,"nodeType":"308","messageId":"309","endLine":45,"endColumn":33},{"ruleId":"306","severity":1,"message":"334","line":46,"column":12,"nodeType":"308","messageId":"309","endLine":46,"endColumn":26},{"ruleId":"306","severity":1,"message":"335","line":46,"column":28,"nodeType":"308","messageId":"309","endLine":46,"endColumn":45},{"ruleId":"306","severity":1,"message":"336","line":48,"column":12,"nodeType":"308","messageId":"309","endLine":48,"endColumn":20},{"ruleId":"306","severity":1,"message":"337","line":154,"column":15,"nodeType":"308","messageId":"309","endLine":154,"endColumn":38},{"ruleId":"306","severity":1,"message":"327","line":117,"column":15,"nodeType":"308","messageId":"309","endLine":117,"endColumn":27},{"ruleId":"317","severity":1,"message":"328","line":158,"column":6,"nodeType":"319","endLine":158,"endColumn":16,"suggestions":"338"},{"ruleId":"306","severity":1,"message":"339","line":36,"column":12,"nodeType":"308","messageId":"309","endLine":36,"endColumn":25},{"ruleId":"306","severity":1,"message":"316","line":167,"column":11,"nodeType":"308","messageId":"309","endLine":167,"endColumn":23},{"ruleId":"306","severity":1,"message":"312","line":13,"column":10,"nodeType":"308","messageId":"309","endLine":13,"endColumn":17},{"ruleId":"306","severity":1,"message":"315","line":14,"column":10,"nodeType":"308","messageId":"309","endLine":14,"endColumn":22},{"ruleId":"306","severity":1,"message":"331","line":28,"column":12,"nodeType":"308","messageId":"309","endLine":28,"endColumn":16},{"ruleId":"306","severity":1,"message":"312","line":29,"column":12,"nodeType":"308","messageId":"309","endLine":29,"endColumn":19},{"ruleId":"306","severity":1,"message":"332","line":44,"column":12,"nodeType":"308","messageId":"309","endLine":44,"endColumn":20},{"ruleId":"306","severity":1,"message":"333","line":44,"column":22,"nodeType":"308","messageId":"309","endLine":44,"endColumn":33},{"ruleId":"306","severity":1,"message":"334","line":45,"column":12,"nodeType":"308","messageId":"309","endLine":45,"endColumn":26},{"ruleId":"306","severity":1,"message":"335","line":45,"column":28,"nodeType":"308","messageId":"309","endLine":45,"endColumn":45},{"ruleId":"306","severity":1,"message":"336","line":47,"column":12,"nodeType":"308","messageId":"309","endLine":47,"endColumn":20},{"ruleId":"317","severity":1,"message":"340","line":86,"column":10,"nodeType":"319","endLine":86,"endColumn":12,"suggestions":"341"},{"ruleId":"306","severity":1,"message":"342","line":12,"column":10,"nodeType":"308","messageId":"309","endLine":12,"endColumn":26},{"ruleId":"306","severity":1,"message":"343","line":13,"column":10,"nodeType":"308","messageId":"309","endLine":13,"endColumn":32},{"ruleId":"344","severity":1,"message":"345","line":314,"column":100,"nodeType":"346","endLine":314,"endColumn":151},{"ruleId":"344","severity":1,"message":"345","line":355,"column":121,"nodeType":"346","endLine":355,"endColumn":173},{"ruleId":"344","severity":1,"message":"345","line":396,"column":105,"nodeType":"346","endLine":396,"endColumn":159},{"ruleId":"344","severity":1,"message":"345","line":437,"column":105,"nodeType":"346","endLine":437,"endColumn":158},{"ruleId":"344","severity":1,"message":"345","line":478,"column":105,"nodeType":"346","endLine":478,"endColumn":156},{"ruleId":"344","severity":1,"message":"345","line":519,"column":105,"nodeType":"346","endLine":519,"endColumn":158},{"ruleId":"344","severity":1,"message":"345","line":560,"column":105,"nodeType":"346","endLine":560,"endColumn":156},{"ruleId":"306","severity":1,"message":"313","line":44,"column":10,"nodeType":"308","messageId":"309","endLine":44,"endColumn":16},{"ruleId":"306","severity":1,"message":"315","line":10,"column":10,"nodeType":"308","messageId":"309","endLine":10,"endColumn":22},{"ruleId":"306","severity":1,"message":"312","line":11,"column":10,"nodeType":"308","messageId":"309","endLine":11,"endColumn":17},{"ruleId":"306","severity":1,"message":"347","line":5,"column":8,"nodeType":"308","messageId":"309","endLine":5,"endColumn":22},{"ruleId":"306","severity":1,"message":"347","line":5,"column":8,"nodeType":"308","messageId":"309","endLine":5,"endColumn":22},{"ruleId":"306","severity":1,"message":"348","line":11,"column":18,"nodeType":"308","messageId":"309","endLine":11,"endColumn":25},{"ruleId":"306","severity":1,"message":"349","line":12,"column":21,"nodeType":"308","messageId":"309","endLine":12,"endColumn":31},{"ruleId":"306","severity":1,"message":"350","line":13,"column":26,"nodeType":"308","messageId":"309","endLine":13,"endColumn":41},{"ruleId":"306","severity":1,"message":"351","line":14,"column":25,"nodeType":"308","messageId":"309","endLine":14,"endColumn":39},{"ruleId":"306","severity":1,"message":"352","line":15,"column":22,"nodeType":"308","messageId":"309","endLine":15,"endColumn":33},{"ruleId":"306","severity":1,"message":"342","line":16,"column":12,"nodeType":"308","messageId":"309","endLine":16,"endColumn":28},{"ruleId":"306","severity":1,"message":"343","line":17,"column":12,"nodeType":"308","messageId":"309","endLine":17,"endColumn":34},{"ruleId":"306","severity":1,"message":"353","line":18,"column":19,"nodeType":"308","messageId":"309","endLine":18,"endColumn":27},{"ruleId":"306","severity":1,"message":"354","line":23,"column":11,"nodeType":"308","messageId":"309","endLine":23,"endColumn":26},{"ruleId":"306","severity":1,"message":"342","line":13,"column":10,"nodeType":"308","messageId":"309","endLine":13,"endColumn":26},{"ruleId":"306","severity":1,"message":"343","line":14,"column":10,"nodeType":"308","messageId":"309","endLine":14,"endColumn":32},{"ruleId":"344","severity":1,"message":"345","line":335,"column":100,"nodeType":"346","endLine":335,"endColumn":151},{"ruleId":"344","severity":1,"message":"345","line":376,"column":121,"nodeType":"346","endLine":376,"endColumn":173},{"ruleId":"344","severity":1,"message":"345","line":417,"column":105,"nodeType":"346","endLine":417,"endColumn":159},{"ruleId":"344","severity":1,"message":"345","line":458,"column":105,"nodeType":"346","endLine":458,"endColumn":158},{"ruleId":"344","severity":1,"message":"345","line":499,"column":105,"nodeType":"346","endLine":499,"endColumn":156},{"ruleId":"344","severity":1,"message":"345","line":540,"column":105,"nodeType":"346","endLine":540,"endColumn":158},{"ruleId":"344","severity":1,"message":"345","line":581,"column":105,"nodeType":"346","endLine":581,"endColumn":156},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'Link' is defined but never used.","'isError' is assigned a value but never used.","'avatar' is assigned a value but never used.","'setAvatar' is assigned a value but never used.","'doctorUserId' is assigned a value but never used.","'handleCancel' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'schedules'. Either include it or remove the dependency array.","ArrayExpression",["355"],"no-dupe-keys","Duplicate key 'width'.","ObjectExpression","unexpected","'h1Style' is assigned a value but never used.","'setDoctorUserId' is assigned a value but never used.","'errorMessage' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'calculateAge'. Either include it or remove the dependency array.",["356"],"'handleClick' is assigned a value but never used.","'user' is assigned a value but never used.","'password' is assigned a value but never used.","'setPassword' is assigned a value but never used.","'retypePassword' is assigned a value but never used.","'setRetypePassword' is assigned a value but never used.","'userType' is assigned a value but never used.","'validateSecretaryFormat' is assigned a value but never used.",["357"],"'patientUserId' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'avatar'. Either include it or remove the dependency array.",["358"],"'addClinicMessage' is assigned a value but never used.","'registrationSuccessful' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'DoctorCalendar' is defined but never used.","'setName' is assigned a value but never used.","'setAddress' is assigned a value but never used.","'setOfficeNumber' is assigned a value but never used.","'setOfficeEmail' is assigned a value but never used.","'setHospital' is assigned a value but never used.","'setSlots' is assigned a value but never used.","'handleAddClinic' is assigned a value but never used.",{"desc":"359","fix":"360"},{"desc":"361","fix":"362"},{"desc":"361","fix":"363"},{"desc":"364","fix":"365"},"Update the dependencies array to be: [schedules]",{"range":"366","text":"367"},"Update the dependencies array to be: [birthday, calculateAge]",{"range":"368","text":"369"},{"range":"370","text":"369"},"Update the dependencies array to be: [avatar]",{"range":"371","text":"372"},[3379,3381],"[schedules]",[4998,5008],"[birthday, calculateAge]",[4499,4509],[3877,3879],"[avatar]"]