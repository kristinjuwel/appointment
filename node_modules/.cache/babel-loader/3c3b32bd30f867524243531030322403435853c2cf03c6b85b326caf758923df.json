{"ast":null,"code":"var _jsxFileName = \"D:\\\\3rd Year 1st Sem\\\\DocClickConnect\\\\appointment\\\\src\\\\pages\\\\DoctorPages\\\\DoctorAppointment.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport DoctorNavbar from '../../components/DoctorNavbar';\nimport DoctorFooter from '../../components/DoctorFooter';\nimport DoctorCalendar from '../../components/DoctorCalendar';\nimport { Link } from 'react-router-dom';\nimport { Calendar, dateFnsLocalizer } from 'react-big-calendar';\nimport format from 'date-fns/format';\nimport parse from 'date-fns/parse';\nimport startOfWeek from 'date-fns/startOfWeek';\nimport getDay from 'date-fns/getDay';\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DoctorAppointment = () => {\n  _s();\n  const [isError, setIsError] = useState(false);\n  const [doctorUserId, setDoctorUserId] = useState('');\n  const [appointments, setAppointments] = useState([{\n    title: '',\n    clinic: '',\n    address: '',\n    patientUserId: '',\n    start: new Date(),\n    end: new Date(),\n    // 5:00 PM\n    appointmentId: '',\n    appointmentStatus: '',\n    slots: ''\n  }]);\n  useEffect(() => {\n    // Replace 'http://localhost:8080' with your actual API URL\n    fetch('http://localhost:8080/checkLoggedInDoctor').then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n      throw new Error('Network response was not ok');\n    }).then(data => {\n      setDoctorUserId(data);\n      // Once you have the patientUserId, make another request to get appointments\n      fetch(`http://localhost:8080/docappointments?doctorUserId=${data}`).then(appointmentsResponse => {\n        if (appointmentsResponse.ok) {\n          return appointmentsResponse.json();\n        }\n        throw new Error('Network response was not ok');\n      }).then(appointmentsData => {\n        const formattedAppointments = appointmentsData.map(appointment => {\n          // Extract date and time components\n          const [year, month, day] = appointment.scheduleDate.split('-').map(Number);\n          const [hours, minutes] = appointment.startTime.split(':').map(Number);\n          const [hours2, minutes2] = appointment.endTime.split(':').map(Number);\n\n          // Create Date objects for start and end times\n          const startDate = new Date(year, month - 1, day, hours, minutes);\n          const endDate = new Date(year, month - 1, day, hours2, minutes2);\n\n          // Create an appointment object\n          return {\n            title: appointment.patientName,\n            clinic: appointment.clinicName,\n            address: appointment.address,\n            patientUserId: appointment.patientUserId,\n            start: startDate,\n            end: endDate,\n            appointmentId: appointment.transactionNo,\n            appointmentStatus: appointment.status,\n            slots: appointment.slots\n          };\n        });\n        setAppointments(formattedAppointments);\n        console.log(appointments);\n      }).catch(error => {\n        // Handle errors\n        console.error(error);\n      });\n    }).catch(error => {\n      setIsError(true);\n      console.error('Error:', error);\n    });\n  }, [appointments]);\n  const locales = {\n    \"en-US\": require(\"date-fns/locale/en-US\")\n  };\n  const localizer = dateFnsLocalizer({\n    format,\n    parse,\n    startOfWeek,\n    getDay,\n    locales\n  });\n  const CustomEvent = ({\n    event\n  }) => /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      margin: '5px 0',\n      whiteSpace: 'nowrap',\n      overflow: 'hidden',\n      textOverflow: 'ellipsis'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n      style: {\n        margin: '0px 0',\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        whiteSpace: 'normal'\n      },\n      children: event.clinic\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        margin: '0px 0',\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        whiteSpace: 'normal'\n      },\n      children: event.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        margin: '0px 0',\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        whiteSpace: 'normal'\n      },\n      children: event.appointmentStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        margin: '0px 0',\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        whiteSpace: 'normal'\n      },\n      children: event.slots\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n  const filterAndAggregateAppointments = appointments => {\n    // Create an object to store unique appointments based on title\n    const uniqueAppointments = {};\n\n    // Iterate through each appointment\n    appointments.forEach(appointment => {\n      const {\n        title,\n        patientUserId,\n        clinic\n      } = appointment;\n\n      // Check if the title already exists in uniqueAppointments\n      if (!uniqueAppointments[title]) {\n        // If not, create an entry with an array containing the current appointment\n        uniqueAppointments[title] = {\n          title,\n          patientUserId,\n          clinics: [clinic]\n        };\n      } else {\n        // If yes, append the clinic to the existing array\n        uniqueAppointments[title].clinics.push(clinic);\n      }\n    });\n\n    // Convert the values of uniqueAppointments object into an array\n    const resultAppointments = Object.values(uniqueAppointments);\n    return resultAppointments;\n  };\n\n  // Usage example\n  const resultAppointments = filterAndAggregateAppointments(appointments);\n  const getBorderColor = status => {\n    switch (status) {\n      case 'Cancelled':\n        return '#A41D00';\n      case 'Rescheduled':\n        return '#FF7400';\n      case 'Scheduled by Patient':\n        return '#F8F547';\n      case 'Approved by Doctor':\n        return '#48DE66';\n      default:\n        return 'lightgray';\n    }\n  };\n  const handleManage = async patientUserId => {\n    window.location.href = `/manageappointments/${patientUserId}`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(DoctorNavbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        margin: \"auto\",\n        width: \"100vw\",\n        justifyContent: \"center\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Calendar, {\n        localizer: localizer,\n        events: appointments,\n        startAccessor: \"start\",\n        endAccessor: \"end\",\n        style: {\n          height: 900,\n          width: \"65%\"\n        },\n        components: {\n          event: CustomEvent // Use the custom Event component\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this), appointments.filter(appointment => appointment).length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginLeft: \"30px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"My Clinic\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 13\n        }, this), resultAppointments.map((appointment, index) => /*#__PURE__*/_jsxDEV(\"table\", {\n          style: {\n            borderBottom: \"1px solid lightgrey\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              width: 250,\n              children: appointment.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(Link, {\n                to: \"/manageappointments\",\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  style: {\n                    borderRadius: 0,\n                    width: \"300px\",\n                    height: \"50px\"\n                  },\n                  onClick: () => handleManage(appointment.patientUserId),\n                  children: \"Manage Appointments\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 197,\n                  columnNumber: 55\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 197,\n                columnNumber: 24\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              width: 250,\n              children: Array.from(new Set(appointment.clinics)).map((clinic, clinicIndex) => /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [clinic, clinicIndex !== appointment.clinics.length - 1 ? ' ' : '']\n              }, clinicIndex, true, {\n                fileName: _jsxFileName,\n                lineNumber: 203,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"cancel\",\n                style: {\n                  width: \"100%\",\n                  height: \"50px\"\n                },\n                children: \"Cancel Appointments\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 206,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 11\n      }, this) :\n      /*#__PURE__*/\n      // Display a message if there are no appointments with appointmentStatus === \"Approved by Doctor\"\n      _jsxDEV(\"div\", {\n        style: {\n          marginLeft: \"1%\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"You have no appointments yet.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DoctorFooter, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 171,\n    columnNumber: 5\n  }, this);\n};\n_s(DoctorAppointment, \"BYEhzJxgdu1jor5ZSJDohydKLyw=\");\n_c = DoctorAppointment;\nexport default DoctorAppointment;\nvar _c;\n$RefreshReg$(_c, \"DoctorAppointment\");","map":{"version":3,"names":["React","useState","useEffect","DoctorNavbar","DoctorFooter","DoctorCalendar","Link","Calendar","dateFnsLocalizer","format","parse","startOfWeek","getDay","jsxDEV","_jsxDEV","DoctorAppointment","_s","isError","setIsError","doctorUserId","setDoctorUserId","appointments","setAppointments","title","clinic","address","patientUserId","start","Date","end","appointmentId","appointmentStatus","slots","fetch","then","response","ok","json","Error","data","appointmentsResponse","appointmentsData","formattedAppointments","map","appointment","year","month","day","scheduleDate","split","Number","hours","minutes","startTime","hours2","minutes2","endTime","startDate","endDate","patientName","clinicName","transactionNo","status","console","log","catch","error","locales","require","localizer","CustomEvent","event","style","margin","whiteSpace","overflow","textOverflow","children","fileName","_jsxFileName","lineNumber","columnNumber","filterAndAggregateAppointments","uniqueAppointments","forEach","clinics","push","resultAppointments","Object","values","getBorderColor","handleManage","window","location","href","display","width","justifyContent","events","startAccessor","endAccessor","height","components","filter","length","marginLeft","index","borderBottom","to","borderRadius","onClick","Array","from","Set","clinicIndex","className","_c","$RefreshReg$"],"sources":["D:/3rd Year 1st Sem/DocClickConnect/appointment/src/pages/DoctorPages/DoctorAppointment.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport DoctorNavbar from '../../components/DoctorNavbar';\nimport DoctorFooter from '../../components/DoctorFooter';\nimport DoctorCalendar from '../../components/DoctorCalendar';\nimport { Link } from 'react-router-dom';\nimport { Calendar, dateFnsLocalizer } from 'react-big-calendar';\nimport format from 'date-fns/format';\nimport parse from 'date-fns/parse';\nimport startOfWeek from 'date-fns/startOfWeek';\nimport getDay from 'date-fns/getDay';\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\n\nconst DoctorAppointment = () => {\n  const [isError, setIsError] = useState(false);\n  const [doctorUserId, setDoctorUserId] = useState('');\n  const [appointments, setAppointments] = useState([\n    {\n      title: '',\n      clinic: '',\n      address: '',\n      patientUserId: '',\n      start: new Date(),\n      end: new Date(),  // 5:00 PM\n      appointmentId: '',\n      appointmentStatus: '',\n      slots: ''\n    },\n  ]);\n\n\n  useEffect(() => {\n    // Replace 'http://localhost:8080' with your actual API URL\n    fetch('http://localhost:8080/checkLoggedInDoctor')\n      .then((response) => {\n        if (response.ok) {\n          return response.json();\n        }\n        throw new Error('Network response was not ok');\n      })\n      .then((data) => {\n        setDoctorUserId(data);\n        // Once you have the patientUserId, make another request to get appointments\n        fetch(`http://localhost:8080/docappointments?doctorUserId=${data}`)\n          .then((appointmentsResponse) => {\n            if (appointmentsResponse.ok) {\n              return appointmentsResponse.json();\n            }\n            throw new Error('Network response was not ok');\n          })\n          .then((appointmentsData) => {\n            const formattedAppointments = appointmentsData.map((appointment) => {\n              // Extract date and time components\n              const [year, month, day] = appointment.scheduleDate.split('-').map(Number);\n              const [hours, minutes] = appointment.startTime.split(':').map(Number);\n              const [hours2, minutes2] = appointment.endTime.split(':').map(Number);\n\n              // Create Date objects for start and end times\n              const startDate = new Date(year, month - 1, day, hours, minutes);\n              const endDate = new Date(year, month - 1, day, hours2, minutes2);\n\n              // Create an appointment object\n              return {\n                title: appointment.patientName,\n                clinic: appointment.clinicName,\n                address: appointment.address,\n                patientUserId: appointment.patientUserId,\n                start: startDate,\n                end: endDate,\n                appointmentId: appointment.transactionNo,\n                appointmentStatus: appointment.status,\n                slots: appointment.slots\n              };\n            });\n\n            setAppointments(formattedAppointments);\n            console.log(appointments);\n          })\n          .catch((error) => {\n            // Handle errors\n            console.error(error);\n          });\n\n      })\n      .catch((error) => {\n        setIsError(true);\n        console.error('Error:', error);\n      });\n  }, [appointments]);\n\n  const locales = {\n    \"en-US\": require(\"date-fns/locale/en-US\")\n  }\n\n  const localizer = dateFnsLocalizer({\n    format,\n    parse,\n    startOfWeek,\n    getDay,\n    locales\n  })\n\n  const CustomEvent = ({ event }) => (\n    <div style={{ margin: '5px 0', whiteSpace: 'nowrap', overflow: 'hidden', textOverflow: 'ellipsis' }}>\n      <strong style={{ margin: '0px 0', overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'normal' }}>\n        {event.clinic}\n      </strong>\n      <p style={{ margin: '0px 0', overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'normal' }}>\n        {event.title}\n      </p>\n      <p style={{ margin: '0px 0', overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'normal' }}>\n        {event.appointmentStatus}\n      </p>\n      <p style={{ margin: '0px 0', overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'normal' }}>\n        {event.slots}\n      </p>\n    </div>\n  );\n  const filterAndAggregateAppointments = (appointments) => {\n    // Create an object to store unique appointments based on title\n    const uniqueAppointments = {};\n\n    // Iterate through each appointment\n    appointments.forEach(appointment => {\n      const { title, patientUserId, clinic } = appointment;\n\n      // Check if the title already exists in uniqueAppointments\n      if (!uniqueAppointments[title]) {\n        // If not, create an entry with an array containing the current appointment\n        uniqueAppointments[title] = {\n          title,\n          patientUserId,\n          clinics: [clinic],\n        };\n      } else {\n        // If yes, append the clinic to the existing array\n        uniqueAppointments[title].clinics.push(clinic);\n      }\n    });\n\n    // Convert the values of uniqueAppointments object into an array\n    const resultAppointments = Object.values(uniqueAppointments);\n\n    return resultAppointments;\n  };\n\n  // Usage example\n  const resultAppointments = filterAndAggregateAppointments(appointments);\n\n  const getBorderColor = (status) => {\n    switch (status) {\n      case 'Cancelled':\n        return '#A41D00';\n      case 'Rescheduled':\n        return '#FF7400';\n      case 'Scheduled by Patient':\n        return '#F8F547';\n      case 'Approved by Doctor':\n        return '#48DE66';\n      default:\n        return 'lightgray';\n    }\n  };\n\n    \n\n  const handleManage = async (patientUserId) => {\n    window.location.href = `/manageappointments/${patientUserId}`;\n  };\n\n  return (\n    <div>\n      <DoctorNavbar />\n      <div style={{ display: \"flex\", margin: \"auto\", width: \"100vw\", justifyContent: \"center\" }}>\n        <Calendar\n          localizer={localizer}\n          events={appointments}\n          startAccessor=\"start\"\n          endAccessor=\"end\"\n          style={{ height: 900, width: \"65%\" }}\n          components={{\n            event: CustomEvent, // Use the custom Event component\n          }}\n        />\n        {appointments.filter(appointment => appointment).length > 0 ? (\n          <div style={{ marginLeft: \"30px\" }}>\n            <h1>My Clinic</h1>\n            {resultAppointments.map((appointment, index) => (\n              <table key={index} style={{borderBottom: \"1px solid lightgrey\"}}>\n                {/* <tr>\n              <td rowSpan={2} width={200} style={{ border: \"1px solid lightgray\", backgroundColor: \"lightgray\", paddingLeft: \"10px\" }}>11/06/23 MONDAY <br /> 2:00-5:00 PM</td>\n              <td><Link to=\"/addremove\"><button style={{ borderRadius: 0, width: \"250px\" }}>Add/Remove Slots</button></Link></td>\n            </tr>\n            <tr></tr>\n            <br /> */}\n                <tr>\n                  <td width={250}>{appointment.title}</td>\n                  <td ><Link to=\"/manageappointments\"><button style={{ borderRadius: 0, width: \"300px\", height: \"50px\" }} onClick={() => handleManage(appointment.patientUserId)}>Manage Appointments</button></Link></td>\n                </tr>\n                <tr >\n                  <td width={250}>\n                    {/* Display unique clinics for the current unique appointment */}\n                    {Array.from(new Set(appointment.clinics)).map((clinic, clinicIndex) => (\n                      <span key={clinicIndex}>{clinic}{clinicIndex !== appointment.clinics.length - 1 ? ' ' : ''}</span>\n                    ))}\n                  </td>\n                  <td><button className='cancel' style={{ width: \"100%\", height: \"50px\" }}>Cancel Appointments</button></td>\n                </tr>\n              </table>\n\n            ))}\n          </div>\n        ) : (\n          // Display a message if there are no appointments with appointmentStatus === \"Approved by Doctor\"\n          <div style={{ marginLeft: \"1%\" }}>\n            <p>You have no appointments yet.</p>\n          </div>\n        )}\n      </div>\n      <DoctorFooter />\n    </div>\n  );\n};\n\nexport default DoctorAppointment;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}