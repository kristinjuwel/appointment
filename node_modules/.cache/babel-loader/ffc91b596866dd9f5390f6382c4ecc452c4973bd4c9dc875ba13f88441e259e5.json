{"ast":null,"code":"var _jsxFileName = \"D:\\\\3rd Year 1st Sem\\\\DocClickConnect\\\\appointment\\\\src\\\\pages\\\\AppointmentPages\\\\SetAppointment.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport PatientNavBar from '../../components/PatientNavBar';\nimport PatientFooter from '../../components/PatientFooter';\nimport DoctorCalendar from '../../components/DoctorCalendar';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SetAppointment = () => {\n  _s();\n  const {\n    doctorId\n  } = useParams();\n  const [error, setError] = useState(null);\n  const [selectedDay, setSelectedDay] = useState('');\n  const [selectedSched, setSelectedSched] = useState('');\n  const [selectedDate, setSelectedDate] = useState('');\n  const [schedules, setSchedules] = useState([{\n    scheduleId: '',\n    clinicId: '',\n    avatar: '',\n    doctorName: '',\n    specialization: '',\n    contactNumber: '',\n    docEmail: '',\n    scheduleDay: '',\n    start: new Date(),\n    end: new Date(),\n    // 5:00 PM\n    slots: '',\n    clinicName: '',\n    address: '',\n    number: '',\n    email: ''\n  }]);\n  useEffect(() => {\n    const fetchDoctorSchedules = async () => {\n      try {\n        const response = await fetch(`http://localhost:8080/docsched/${doctorId}`);\n        if (response.ok) {\n          const data = await response.json();\n          const formattedSchedules = data.map(schedule => ({\n            scheduleId: schedule.scheduleId,\n            clinicId: schedule.clinicId,\n            avatar: schedule.doctor.user.avatar,\n            doctorName: `${schedule.doctor.user.firstName} ${schedule.doctor.user.lastName}`,\n            specialization: schedule.doctor.specialization,\n            contactNumber: schedule.doctor.user.contactNumber,\n            docEmail: schedule.doctor.user.email,\n            scheduleDay: schedule.scheduleDay,\n            start: schedule.startTime,\n            end: schedule.endTime,\n            slots: schedule.slots,\n            clinicName: schedule.clinic.name,\n            address: schedule.clinic.address,\n            number: schedule.clinic.officeNumber,\n            email: schedule.clinic.officeEmail\n          }));\n          setSchedules(formattedSchedules);\n        } else {\n          setError('Error fetching appointment');\n        }\n      } catch (error) {\n        setError('Error fetching appointment');\n      }\n    };\n    fetchDoctorSchedules();\n  }, [doctorId]);\n  const convertMilitaryToStandardTime = militaryTime => {\n    if (typeof militaryTime !== 'string' || militaryTime.length !== 8) {\n      return 'Invalid Time';\n    }\n    const [hours, minutes] = militaryTime.split(':');\n    const parsedHours = parseInt(hours, 10);\n    const period = parsedHours >= 12 ? 'PM' : 'AM';\n    const formattedHours = parsedHours % 12 || 12;\n    return `${formattedHours}:${minutes} ${period}`;\n  };\n  useEffect(() => {\n    // Set the initial value of selectedDay to the first day in the options\n    if (schedules.length > 0) {\n      setSelectedDay(schedules[0].scheduleDay);\n    }\n  }, [schedules]);\n  const getNearestDays = (selectedDay, numberOfOccurrences) => {\n    const today = new Date();\n    const daysInWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    const selectedDayIndex = daysInWeek.findIndex(day => day.toLowerCase() === selectedDay.toLowerCase());\n    if (selectedDayIndex === -1) {\n      return []; // Invalid selected day\n    }\n\n    const nearestDays = [];\n    let currentDate = new Date(today);\n    while (nearestDays.length < numberOfOccurrences) {\n      if (currentDate.getDay() === selectedDayIndex) {\n        nearestDays.push(new Date(currentDate));\n      }\n      currentDate.setDate(currentDate.getDate() + 1);\n    }\n    return nearestDays;\n  };\n  const nearestDays = getNearestDays(selectedDay, 5);\n  const uniqueClinicIds = Array.from(new Set(schedules.map(schedule => schedule.clinicId)));\n\n  // Map over unique clinic IDs to create tables\n  const clinicTables = uniqueClinicIds.map(clinicId => {\n    var _schedules$find;\n    return /*#__PURE__*/_jsxDEV(\"table\", {\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n          children: /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"h2\", {\n              style: {\n                color: \"#0094d4\"\n              },\n              children: (_schedules$find = schedules.find(schedule => schedule.clinicId === clinicId)) === null || _schedules$find === void 0 ? void 0 : _schedules$find.clinicName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            style: {\n              width: \"150px\"\n            },\n            children: \"Day: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"select\", {\n              name: \"sched\",\n              id: `day-${clinicId}`,\n              style: {\n                width: \"250px\"\n              },\n              value: selectedDay,\n              onChange: e => {\n                setSelectedDay(e.target.value);\n              },\n              children: schedules.filter(schedule => schedule.clinicId === clinicId).map(schedule => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: schedule.scheduleDay,\n                children: schedule.scheduleDay\n              }, schedule.scheduleDay, false, {\n                fileName: _jsxFileName,\n                lineNumber: 146,\n                columnNumber: 17\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            style: {\n              width: \"150px\"\n            },\n            children: \"Timeslot: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"select\", {\n              name: \"timeslot\",\n              id: `timeslot-${clinicId}`,\n              style: {\n                width: \"250px\"\n              },\n              value: selectedSched,\n              onChange: e => {\n                const selectedTimeslot = e.target.value;\n                setSelectedSched(selectedTimeslot);\n                console.log('Selected Schedule ID:', selectedTimeslot);\n              },\n              children: schedules.filter(schedule => schedule.clinicId === clinicId && schedule.scheduleDay === selectedDay).map(schedule => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: schedule.scheduleId,\n                children: [convertMilitaryToStandardTime(schedule.start), \" - \", convertMilitaryToStandardTime(schedule.end)]\n              }, schedule.scheduleId, true, {\n                fileName: _jsxFileName,\n                lineNumber: 171,\n                columnNumber: 17\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            style: {\n              width: \"150px\"\n            },\n            children: \"Date: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"select\", {\n              name: \"sched\",\n              id: `sched-${clinicId}`,\n              style: {\n                width: \"250px\"\n              },\n              value: selectedDate,\n              onChange: e => {\n                const selectedDateString = e.target.value;\n                // Save the date in 'yyyy-mm-dd' format to selectedDate\n                setSelectedDate(selectedDateString);\n                console.log('Selected Date:', selectedDateString);\n              },\n              children: schedules.filter(schedule => schedule.clinicId === clinicId).flatMap(schedule => nearestDays.map(date => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: date.toISOString().split('T')[0],\n                children: date.toLocaleDateString('en-US', {\n                  year: 'numeric',\n                  month: 'long',\n                  day: 'numeric'\n                })\n              }, `${clinicId}-${date.toISOString()}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 197,\n                columnNumber: 17\n              }, this)))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: /*#__PURE__*/_jsxDEV(\"td\", {\n            colSpan: 2,\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              style: {\n                marginTop: \"10px\",\n                borderRadius: 0,\n                width: \"100%\"\n              },\n              children: \"Book an Appointment\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 5\n      }, this)\n    }, clinicId, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 3\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(PatientNavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        margin: \"auto\",\n        width: \"100vw\",\n        justifyContent: \"center\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(DoctorCalendar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginLeft: \"30px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Dr. \", schedules[0].doctorName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Specialization: \", schedules[0].specialization]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Contact Number: \", schedules[0].contactNumber]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Email Address: \", schedules[0].docEmail]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: clinicTables\n        }, void 0, false), \";\", /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Existing Appointments \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              rowSpan: 2,\n              width: 200,\n              style: {\n                border: \"1px solid lightgray\",\n                backgroundColor: \"lightgray\",\n                paddingLeft: \"10px\"\n              },\n              children: [\"11/06/23 MONDAY \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 238,\n                columnNumber: 152\n              }, this), \" 2:00-5:00 PM\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 238,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(Link, {\n                to: \"/patresched\",\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  style: {\n                    borderRadius: 0,\n                    width: \"200px\"\n                  },\n                  children: \"Reschedule\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 239,\n                  columnNumber: 42\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 239,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"cancel\",\n                children: \"Cancel\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 241,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 241,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PatientFooter, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 222,\n    columnNumber: 5\n  }, this);\n};\n_s(SetAppointment, \"U8Tddy2WP02YJKLYlRaMWqe5Gy4=\", false, function () {\n  return [useParams];\n});\n_c = SetAppointment;\nexport default SetAppointment;\nvar _c;\n$RefreshReg$(_c, \"SetAppointment\");","map":{"version":3,"names":["React","useState","useEffect","Link","PatientNavBar","PatientFooter","DoctorCalendar","useParams","jsxDEV","_jsxDEV","Fragment","_Fragment","SetAppointment","_s","doctorId","error","setError","selectedDay","setSelectedDay","selectedSched","setSelectedSched","selectedDate","setSelectedDate","schedules","setSchedules","scheduleId","clinicId","avatar","doctorName","specialization","contactNumber","docEmail","scheduleDay","start","Date","end","slots","clinicName","address","number","email","fetchDoctorSchedules","response","fetch","ok","data","json","formattedSchedules","map","schedule","doctor","user","firstName","lastName","startTime","endTime","clinic","name","officeNumber","officeEmail","convertMilitaryToStandardTime","militaryTime","length","hours","minutes","split","parsedHours","parseInt","period","formattedHours","getNearestDays","numberOfOccurrences","today","daysInWeek","selectedDayIndex","findIndex","day","toLowerCase","nearestDays","currentDate","getDay","push","setDate","getDate","uniqueClinicIds","Array","from","Set","clinicTables","_schedules$find","children","style","color","find","fileName","_jsxFileName","lineNumber","columnNumber","width","id","value","onChange","e","target","filter","selectedTimeslot","console","log","selectedDateString","flatMap","date","toISOString","toLocaleDateString","year","month","colSpan","marginTop","borderRadius","display","margin","justifyContent","marginLeft","rowSpan","border","backgroundColor","paddingLeft","to","className","_c","$RefreshReg$"],"sources":["D:/3rd Year 1st Sem/DocClickConnect/appointment/src/pages/AppointmentPages/SetAppointment.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport PatientNavBar from '../../components/PatientNavBar';\nimport PatientFooter from '../../components/PatientFooter';\nimport DoctorCalendar from '../../components/DoctorCalendar';\nimport { useParams } from 'react-router-dom';\n\nconst SetAppointment = () => {\n  const { doctorId } = useParams();\n  const [error, setError] = useState(null);\n  const [selectedDay, setSelectedDay] = useState('');\n  const [selectedSched, setSelectedSched] = useState('');\n  const [selectedDate, setSelectedDate] = useState('');\n  const [schedules, setSchedules] = useState([\n    {\n      scheduleId: '',\n      clinicId: '',\n      avatar: '',\n      doctorName: '',\n      specialization: '',\n      contactNumber: '',\n      docEmail: '',\n      scheduleDay: '',\n      start: new Date(),\n      end: new Date(),  // 5:00 PM\n      slots: '',\n      clinicName: '',\n      address: '',\n      number: '',\n      email: ''\n    },\n  ]);\n\n  useEffect(() => {\n    const fetchDoctorSchedules = async () => {\n      try {\n        const response = await fetch(`http://localhost:8080/docsched/${doctorId}`);\n\n        if (response.ok) {\n          const data = await response.json();\n\n          const formattedSchedules = data.map(schedule => ({\n            scheduleId: schedule.scheduleId,\n            clinicId: schedule.clinicId,\n            avatar: schedule.doctor.user.avatar,\n            doctorName: `${schedule.doctor.user.firstName} ${schedule.doctor.user.lastName}`,\n            specialization: schedule.doctor.specialization,\n            contactNumber: schedule.doctor.user.contactNumber,\n            docEmail: schedule.doctor.user.email,\n            scheduleDay: schedule.scheduleDay,\n            start: schedule.startTime,\n            end: schedule.endTime,\n            slots: schedule.slots,\n            clinicName: schedule.clinic.name,\n            address: schedule.clinic.address,\n            number: schedule.clinic.officeNumber,\n            email: schedule.clinic.officeEmail\n          }));\n\n          setSchedules(formattedSchedules);\n\n        } else {\n          setError('Error fetching appointment');\n        }\n      } catch (error) {\n        setError('Error fetching appointment');\n      }\n    };\n\n    fetchDoctorSchedules();\n  }, [doctorId]);\n\n  const convertMilitaryToStandardTime = (militaryTime) => {\n    if (typeof militaryTime !== 'string' || militaryTime.length !== 8) {\n      return 'Invalid Time';\n    }\n\n    const [hours, minutes] = militaryTime.split(':');\n    const parsedHours = parseInt(hours, 10);\n    const period = parsedHours >= 12 ? 'PM' : 'AM';\n    const formattedHours = parsedHours % 12 || 12;\n    return `${formattedHours}:${minutes} ${period}`;\n  };\n\n\n\n\n  useEffect(() => {\n    // Set the initial value of selectedDay to the first day in the options\n    if (schedules.length > 0) {\n      setSelectedDay(schedules[0].scheduleDay);\n\n    }\n  }, [schedules]);\n\n  const getNearestDays = (selectedDay, numberOfOccurrences) => {\n    const today = new Date();\n    const daysInWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    const selectedDayIndex = daysInWeek.findIndex(day => day.toLowerCase() === selectedDay.toLowerCase());\n\n    if (selectedDayIndex === -1) {\n      return []; // Invalid selected day\n    }\n\n    const nearestDays = [];\n    let currentDate = new Date(today);\n\n    while (nearestDays.length < numberOfOccurrences) {\n      if (currentDate.getDay() === selectedDayIndex) {\n        nearestDays.push(new Date(currentDate));\n      }\n      currentDate.setDate(currentDate.getDate() + 1);\n    }\n\n    return nearestDays;\n  };\n\n  const nearestDays = getNearestDays(selectedDay, 5);\n  const uniqueClinicIds = Array.from(new Set(schedules.map(schedule => schedule.clinicId)));\n\n// Map over unique clinic IDs to create tables\nconst clinicTables = uniqueClinicIds.map((clinicId) => (\n  <table key={clinicId}>\n    <tbody>\n      <tr>\n        <td>\n          <h2 style={{ color: \"#0094d4\" }}>{schedules.find(schedule => schedule.clinicId === clinicId)?.clinicName}</h2>\n        </td>\n      </tr>\n      <tr>\n        <td style={{ width: \"150px\" }}>Day: </td>\n        <td>\n          <select\n            name=\"sched\"\n            id={`day-${clinicId}`}\n            style={{ width: \"250px\" }}\n            value={selectedDay}\n            onChange={(e) => {\n              setSelectedDay(e.target.value);\n            }}\n          >\n            {/* Options for the selected clinic's days */}\n            {schedules\n              .filter(schedule => schedule.clinicId === clinicId)\n              .map(schedule => (\n                <option key={schedule.scheduleDay} value={schedule.scheduleDay}>\n                  {schedule.scheduleDay}\n                </option>\n              ))}\n          </select>\n        </td>\n      </tr>\n      <tr>\n        <td style={{ width: \"150px\" }}>Timeslot: </td>\n        <td>\n          <select\n            name=\"timeslot\"\n            id={`timeslot-${clinicId}`}\n            style={{ width: \"250px\" }}\n            value={selectedSched}\n            onChange={(e) => {\n              const selectedTimeslot = e.target.value;\n              setSelectedSched(selectedTimeslot);\n              console.log('Selected Schedule ID:', selectedTimeslot);\n            }}\n          >\n            {/* Options for the selected clinic's timeslots */}\n            {schedules\n              .filter(schedule => schedule.clinicId === clinicId && schedule.scheduleDay === selectedDay)\n              .map(schedule => (\n                <option key={schedule.scheduleId} value={schedule.scheduleId}>\n                  {convertMilitaryToStandardTime(schedule.start)} - {convertMilitaryToStandardTime(schedule.end)}\n                </option>\n              ))}\n          </select>\n        </td>\n      </tr>\n      <tr>\n        <td style={{ width: \"150px\" }}>Date: </td>\n        <td>\n          <select\n            name=\"sched\"\n            id={`sched-${clinicId}`}\n            style={{ width: \"250px\" }}\n            value={selectedDate}\n            onChange={(e) => {\n              const selectedDateString = e.target.value;\n              // Save the date in 'yyyy-mm-dd' format to selectedDate\n              setSelectedDate(selectedDateString);\n              console.log('Selected Date:', selectedDateString);\n            }}\n          >\n            {/* Options for the selected clinic's nearest days */}\n            {schedules\n              .filter(schedule => schedule.clinicId === clinicId)\n              .flatMap(schedule => nearestDays.map(date => (\n                <option\n                  key={`${clinicId}-${date.toISOString()}`}\n                  value={date.toISOString().split('T')[0]}\n                >\n                  {date.toLocaleDateString('en-US', {\n                    year: 'numeric',\n                    month: 'long',\n                    day: 'numeric',\n                  })}\n                </option>\n              )))}\n          </select>\n        </td>\n      </tr>\n      <tr>\n        <td colSpan={2}>\n          <button style={{ marginTop: \"10px\", borderRadius: 0, width: \"100%\" }}>\n            Book an Appointment\n          </button>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n));\n  return (\n    <div>\n      <PatientNavBar />\n      <div style={{ display: \"flex\", margin: \"auto\", width: \"100vw\", justifyContent: \"center\" }}>\n        <DoctorCalendar />\n\n        <div style={{ marginLeft: \"30px\" }}>\n          <h1>Dr. {schedules[0].doctorName}</h1>\n          <h2>Specialization: {schedules[0].specialization}</h2>\n          <h3>Contact Number: {schedules[0].contactNumber}</h3>\n          <h3>Email Address: {schedules[0].docEmail}</h3>\n          <br />\n          <>{clinicTables}</>;\n\n          <h1>Existing Appointments </h1>\n          <table>\n            <tr>\n              <td rowSpan={2} width={200} style={{ border: \"1px solid lightgray\", backgroundColor: \"lightgray\", paddingLeft: \"10px\" }}>11/06/23 MONDAY <br /> 2:00-5:00 PM</td>\n              <td><Link to=\"/patresched\"><button style={{ borderRadius: 0, width: \"200px\" }}>Reschedule</button></Link></td>\n            </tr>\n            <tr><td><button className='cancel'>Cancel</button></td></tr>\n          </table>\n        </div>\n      </div>\n      <PatientFooter />\n    </div>\n  );\n};\n\nexport default SetAppointment;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}