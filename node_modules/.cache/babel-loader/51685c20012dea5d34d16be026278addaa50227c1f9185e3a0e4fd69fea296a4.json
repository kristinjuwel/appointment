{"ast":null,"code":"var _jsxFileName = \"D:\\\\3rd Year 1st Sem\\\\DocClickConnect\\\\appointment\\\\src\\\\pages\\\\DoctorPages\\\\DoctorSearch.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport \"../../styles/Search.css\";\nimport PatientNavBar from '../../components/PatientNavBar';\nimport PatientFooter from '../../components/PatientFooter';\nimport DoctorCard from '../../components/Doctors'; // Import the DoctorCard component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DoctorSearch = () => {\n  _s();\n  // Sample doctor data (you can replace it with your own data)\n  const [doctors, setDoctors] = useState([{\n    doctorId: '',\n    firstName: '',\n    lastName: '',\n    contactNumber: '',\n    specialization: '',\n    credentials: '',\n    avatar: ''\n    // clinics: [\n    //   {\n    //     clinicId: '',\n    //     clinicName: '',\n    //     address: '',\n    //     phoneNumber: '',\n    //     schedule: '',\n    //   },\n    // ]\n  }]);\n\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchAllDoctors = async () => {\n      try {\n        const response = await fetch('http://localhost:8080/allusers');\n        if (response.ok) {\n          const data = await response.json();\n          const formattedDoctors = data.map(doctorData => ({\n            doctorId: doctorData.userId,\n            firstName: `Dr. ${doctorData.user.firstName}`,\n            lastName: doctorData.user.lastName,\n            contactNumber: doctorData.user.contactNumber,\n            specialization: doctorData.specialization,\n            credentials: doctorData.credentials,\n            avatar: doctorData.user.avatar\n          }));\n          setDoctors(formattedDoctors);\n        } else {\n          setError('Failed to fetch doctors');\n        }\n      } catch (error) {\n        setError('Error while fetching doctors');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchAllDoctors();\n  }, []);\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 12\n    }, this);\n  }\n\n  //get all schedules\n\n  //set variables\n  //clinicId\n  //clinic.name\n  //clinic.address\n  //clinic.number\n  //scheduleDay\n  //slots\n  //doctorUserId\n\n  //same scheduledays are counted as one\n  //same clinicId counted as one\n  //filter through doctorUserId\n  //display clinicname, address number & doctoravatar\n  const [searchInput, setSearchInput] = useState('');\n  const handleSearchInputChange = e => {\n    setSearchInput(e.target.value);\n  };\n  const handleSearch = () => {\n    // Perform the search logic based on the searchInput\n    console.log('Searching for:', searchInput);\n    // Update the UI or trigger the necessary actions based on the search result\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"search-container\",\n    id: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(PatientNavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"info-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search-box\",\n        style: {\n          position: 'sticky'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"search-input\",\n          placeholder: \"Find the doctor you need..\",\n          value: searchInput,\n          onChange: handleSearchInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"search-button\",\n          onClick: handleSearch,\n          children: \"Search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"block\",\n          alignItems: \"center\",\n          width: \"90%\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"doctor-grid\",\n          children: doctors.map((doctor, index) => /*#__PURE__*/_jsxDEV(DoctorCard, {\n            doctor: doctor\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PatientFooter, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n};\n_s(DoctorSearch, \"ZA5imEiOMMDQsF4CwGb2W+nVDys=\");\n_c = DoctorSearch;\nexport default DoctorSearch;\nvar _c;\n$RefreshReg$(_c, \"DoctorSearch\");","map":{"version":3,"names":["React","useState","useEffect","PatientNavBar","PatientFooter","DoctorCard","jsxDEV","_jsxDEV","DoctorSearch","_s","doctors","setDoctors","doctorId","firstName","lastName","contactNumber","specialization","credentials","avatar","isLoading","setIsLoading","error","setError","fetchAllDoctors","response","fetch","ok","data","json","formattedDoctors","map","doctorData","userId","user","children","fileName","_jsxFileName","lineNumber","columnNumber","searchInput","setSearchInput","handleSearchInputChange","e","target","value","handleSearch","console","log","className","id","style","position","type","placeholder","onChange","onClick","display","alignItems","width","doctor","index","_c","$RefreshReg$"],"sources":["D:/3rd Year 1st Sem/DocClickConnect/appointment/src/pages/DoctorPages/DoctorSearch.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport \"../../styles/Search.css\";\r\nimport PatientNavBar from '../../components/PatientNavBar';\r\nimport PatientFooter from '../../components/PatientFooter';\r\nimport DoctorCard from '../../components/Doctors'; // Import the DoctorCard component\r\n\r\n\r\nconst DoctorSearch = () => {\r\n  // Sample doctor data (you can replace it with your own data)\r\n  const [doctors, setDoctors] = useState([\r\n    {\r\n      doctorId: '',\r\n      firstName: '',\r\n      lastName: '',\r\n      contactNumber: '',\r\n      specialization: '',\r\n      credentials: '',\r\n      avatar:'',\r\n      // clinics: [\r\n      //   {\r\n      //     clinicId: '',\r\n      //     clinicName: '',\r\n      //     address: '',\r\n      //     phoneNumber: '',\r\n      //     schedule: '',\r\n      //   },\r\n      // ]\r\n    }\r\n  ]);\r\n\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n\r\n  useEffect(() => {\r\n    const fetchAllDoctors = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:8080/allusers');\r\n\r\n        if (response.ok) {\r\n          const data = await response.json();\r\n          const formattedDoctors = data.map((doctorData) => ({\r\n            doctorId: doctorData.userId,\r\n            firstName: `Dr. ${doctorData.user.firstName}`,\r\n            lastName: doctorData.user.lastName,\r\n            contactNumber: doctorData.user.contactNumber,\r\n            specialization: doctorData.specialization,\r\n            credentials: doctorData.credentials,\r\n            avatar: doctorData.user.avatar\r\n          }));\r\n\r\n          setDoctors(formattedDoctors);\r\n        } else {\r\n          setError('Failed to fetch doctors');\r\n        }\r\n      } catch (error) {\r\n        setError('Error while fetching doctors');\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchAllDoctors();\r\n  }, []);\r\n\r\n  \r\n\r\n  if (isLoading) {\r\n    return <p>Loading...</p>;\r\n  }\r\n\r\n  if (error) {\r\n    return <p>Error: {error}</p>;\r\n  }\r\n\r\n  //get all schedules\r\n\r\n  //set variables\r\n  //clinicId\r\n  //clinic.name\r\n  //clinic.address\r\n  //clinic.number\r\n  //scheduleDay\r\n  //slots\r\n  //doctorUserId\r\n\r\n  //same scheduledays are counted as one\r\n  //same clinicId counted as one\r\n  //filter through doctorUserId\r\n  //display clinicname, address number & doctoravatar\r\n  const [searchInput, setSearchInput] = useState('');\r\n\r\n  const handleSearchInputChange = (e) => {\r\n    setSearchInput(e.target.value);\r\n  };\r\n\r\n  const handleSearch = () => {\r\n    // Perform the search logic based on the searchInput\r\n    console.log('Searching for:', searchInput);\r\n    // Update the UI or trigger the necessary actions based on the search result\r\n  };\r\n  return (\r\n    <div className=\"search-container\" id=\"container\">\r\n      <PatientNavBar />\r\n      <div className=\"info-container\">\r\n      <div className=\"search-box\" style={{ position: 'sticky' }}>\r\n      <input\r\n        type=\"text\"\r\n        className=\"search-input\"\r\n        placeholder=\"Find the doctor you need..\"\r\n        value={searchInput}\r\n        onChange={handleSearchInputChange}\r\n      />\r\n      <button className=\"search-button\" onClick={handleSearch}>\r\n        Search\r\n      </button>\r\n    </div>\r\n        <br />\r\n        <div style={{ display: \"block\", alignItems: \"center\", width: \"90%\" }}>\r\n          <div className=\"doctor-grid\">\r\n            {doctors.map((doctor, index) => (\r\n              <DoctorCard key={index} doctor={doctor} />\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <PatientFooter />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DoctorSearch;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}