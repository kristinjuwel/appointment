{"ast":null,"code":"var _jsxFileName = \"D:\\\\3rd Year 1st Sem\\\\DocClickConnect\\\\appointment\\\\src\\\\pages\\\\AppointmentPages\\\\DoctorResched.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport DoctorNavbar from '../../components/DoctorNavbar';\nimport DoctorFooter from '../../components/DoctorFooter';\nimport DoctorCalendar from '../../components/DoctorCalendar';\nimport { Calendar, dateFnsLocalizer } from 'react-big-calendar';\nimport { parse, format } from 'date-fns';\nimport startOfWeek from 'date-fns/startOfWeek';\nimport getDay from 'date-fns/getDay';\nimport addWeeks from 'date-fns/addWeeks';\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DoctorResched = () => {\n  _s();\n  const {\n    appointmentId\n  } = useParams();\n  const [rescheduleChoice, setRescheduleChoice] = useState('');\n  const [error, setError] = useState('');\n  const [rescheduleStatus, setRescheduleStatus] = useState('');\n  const [latestAppointment, setLatestAppointment] = useState([{\n    title: '',\n    clinic: '',\n    address: '',\n    number: '',\n    start: new Date(),\n    end: new Date(),\n    // 5:00 PM\n    transactionNo: '',\n    appointmentStatus: ''\n  }]);\n  const [appointments, setAppointments] = useState([{\n    title: '',\n    clinic: '',\n    address: '',\n    number: '',\n    start: new Date(),\n    end: new Date(),\n    // 5:00 PM\n    transactionNo: '',\n    appointmentStatus: ''\n  }]);\n  useEffect(() => {\n    fetch('http://localhost:8080/checkLoggedInDoctor').then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n      throw new Error('Network response was not ok');\n    }).then(data => {\n      fetch(`http://localhost:8080/appointments?doctorUserId=${data}`).then(appointmentsResponse => {\n        if (appointmentsResponse.ok) {\n          return appointmentsResponse.json();\n        }\n        throw new Error('Network response was not ok');\n      }).then(appointmentsData => {\n        const formattedAppointments = appointmentsData.map(appointment => {\n          // Extract date and time components\n          const [year, month, day] = appointment.scheduleDate.split('-').map(Number);\n          const [hours, minutes] = appointment.startTime.split(':').map(Number);\n          const [hours2, minutes2] = appointment.endTime.split(':').map(Number);\n\n          // Create Date objects for start and end times\n          const startDate = new Date(year, month - 1, day, hours, minutes);\n          const endDate = new Date(year, month - 1, day, hours2, minutes2);\n\n          // Create an appointment object\n          return {\n            title: appointment.patientName,\n            clinic: appointment.clinicName,\n            address: appointment.address,\n            number: appointment.clinic.officeNumber,\n            start: startDate,\n            end: endDate,\n            appointmentId: appointment.transactionNo,\n            appointmentStatus: appointment.status\n          };\n        });\n        setAppointments(formattedAppointments);\n      }).catch(error => {\n        // Handle errors\n        console.error(error);\n      });\n    }).catch(error => {\n      console.error('Error:', error);\n    });\n  }, []);\n  useEffect(() => {\n    const fetchAppointment = async () => {\n      try {\n        const response = await fetch(`http://localhost:8080/appointment/${appointmentId}`);\n        if (response.ok) {\n          const data = await response.json();\n\n          // Check if necessary properties are present in the data object\n          if (data && data.scheduleDate && data.startTime && data.endTime && data.doctorName && data.transactionNo && data.status) {\n            const [year, month, day] = data.scheduleDate.split('-').map(Number);\n            const [hours, minutes] = data.startTime.split(':').map(Number);\n            const [hours2, minutes2] = data.endTime.split(':').map(Number);\n\n            // Check if the extracted components are valid numbers\n            if (!isNaN(year) && !isNaN(month) && !isNaN(day) && !isNaN(hours) && !isNaN(minutes) && !isNaN(hours2) && !isNaN(minutes2)) {\n              // Create Date objects for start and end times\n              const startDate = new Date(year, month - 1, day, hours, minutes);\n              const endDate = new Date(year, month - 1, day, hours2, minutes2);\n\n              // Check if the created Date objects are valid\n              if (!isNaN(startDate.getTime()) && !isNaN(endDate.getTime())) {\n                const formattedAppointment = {\n                  title: data.patientName,\n                  clinic: data.clinicName,\n                  address: data.address,\n                  number: data.clinic.officeNumber,\n                  start: startDate,\n                  end: endDate,\n                  appointmentId: data.transactionNo,\n                  appointmentStatus: data.status\n                };\n                setLatestAppointment([formattedAppointment]);\n              } else {\n                console.error('Invalid date created. Check the date and time components.');\n              }\n            } else {\n              console.error('Invalid date/time components in the response data.');\n            }\n          } else {\n            console.error('Incomplete or missing data in the response.');\n          }\n        } else {\n          setError('Error fetching appointment');\n        }\n      } catch (error) {\n        setError('Error fetching appointment');\n      }\n    };\n    fetchAppointment();\n  }, [appointmentId]);\n  const handleRescheduleChange = event => {\n    const match = event.target.value.match(/(\\d{2})\\/(\\d{2})\\/(\\d{4})/);\n    if (!match) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Error: Invalid date format\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 14\n      }, this);\n    }\n    const [, month, day, year] = match;\n    const sourceDate = new Date(`${year}-${month}-${day}`);\n    setRescheduleChoice(`${sourceDate.getFullYear()}-${(sourceDate.getMonth() + 1).toString().padStart(2, '0')}-${sourceDate.getDate().toString().padStart(2, '0')}`);\n  };\n  const handleReschedule = async () => {\n    try {\n      const response = await fetch(`http://localhost:8080/appointment/${appointmentId}?scheduleDate=${rescheduleChoice}`, {\n        method: 'PUT'\n        // No need for headers when not sending a JSON payload\n      });\n\n      if (response.ok) {\n        setRescheduleStatus('Appointment Rescheduled Successfully!');\n        window.location.href = `/docresched/${appointmentId}`;\n      }\n      if (!response.ok) {\n        setRescheduleStatus(`Failed to update appointment: ${response.statusText}`);\n        throw new Error(`Failed to update appointment: ${response.statusText}`);\n      }\n    } catch (error) {\n      console.error('Error updating appointment:', error.message);\n      setError('Error updating appointment:', error.message);\n    }\n  };\n  const generateDateOptions = ({\n    scheduleDate\n  }) => {\n    if (!scheduleDate) {\n      console.error('Error: scheduleDate is undefined.');\n      return [];\n    }\n\n    // Convert the Date object to a string\n    const scheduleDateString = scheduleDate.toString();\n\n    // Convert the string back to a Date object\n    const startDate = new Date(scheduleDateString);\n    const dateOptions = [];\n    for (let i = 0; i < 4; i++) {\n      const optionDate = addWeeks(startDate, i);\n\n      // Format the date using date-fns\n      const formattedDate = format(optionDate, \"MM/dd/yyyy EEEE\");\n      dateOptions.push( /*#__PURE__*/_jsxDEV(\"option\", {\n        value: formattedDate,\n        children: formattedDate\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this));\n    }\n    return dateOptions;\n  };\n  const locales = {\n    \"en-US\": require(\"date-fns/locale/en-US\")\n  };\n  const localizer = dateFnsLocalizer({\n    format,\n    parse,\n    startOfWeek,\n    getDay,\n    locales\n  });\n  const CustomEvent = ({\n    event\n  }) => /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      margin: '5px 0',\n      whiteSpace: 'nowrap',\n      overflowY: 'auto',\n      maxHeight: \"55px\",\n      textOverflow: 'ellipsis'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n      style: {\n        margin: '0px 0',\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        whiteSpace: 'normal'\n      },\n      children: event.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        margin: '0px 0',\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        whiteSpace: 'normal'\n      },\n      children: [\"Clinic: \", event.clinic]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        margin: '0px 0',\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        whiteSpace: 'normal'\n      },\n      children: [\"Status: \", event.appointmentStatus]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 230,\n    columnNumber: 5\n  }, this);\n  const getBackgroundColor = status => {\n    switch (status) {\n      case 'Cancelled':\n        return '#FCA694';\n      case 'Rescheduled':\n        return '#FFB97F';\n      case 'Scheduled by Patient':\n        return '#FFFFDC';\n      case 'Approved by Doctor':\n        return '#BAFFC4';\n      default:\n        return 'lightgray';\n    }\n  };\n  const getBorderColor = status => {\n    switch (status) {\n      case 'Cancelled':\n        return '#A41D00';\n      case 'Rescheduled':\n        return '#FF7400';\n      case 'Scheduled by Patient':\n        return '#F8F547';\n      case 'Approved by Doctor':\n        return '#48DE66';\n      default:\n        return 'lightgray';\n    }\n  };\n  appointments.sort((a, b) => {\n    const statusOrder = {\n      'Cancelled': 4,\n      'Rescheduled': 3,\n      'Scheduled by Patient': 2,\n      'Approved by Doctor': 1\n    };\n    return statusOrder[a.appointmentStatus] - statusOrder[b.appointmentStatus];\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(DoctorNavbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        margin: \"auto\",\n        width: \"100vw\",\n        justifyContent: \"center\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Calendar, {\n        localizer: localizer,\n        events: appointments,\n        startAccessor: \"start\",\n        endAccessor: \"end\",\n        style: {\n          height: 700,\n          width: '70%'\n        },\n        components: {\n          event: CustomEvent // Use the custom Event component\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginLeft: \"30px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"My Appointments\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 11\n        }, this), latestAppointment.map((latestAppointment, index) => /*#__PURE__*/_jsxDEV(\"table\", {\n          children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n              children: /*#__PURE__*/_jsxDEV(\"td\", {\n                rowSpan: 2,\n                width: 200,\n                style: {\n                  border: '3px dashed',\n                  borderRadius: '10px',\n                  borderColor: getBorderColor(latestAppointment.appointmentStatus),\n                  backgroundColor: getBackgroundColor(latestAppointment.appointmentStatus),\n                  paddingLeft: '10px',\n                  width: '300px'\n                },\n                children: [latestAppointment.title, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 315,\n                  columnNumber: 49\n                }, this), latestAppointment.clinic, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 316,\n                  columnNumber: 50\n                }, this), latestAppointment.address, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 317,\n                  columnNumber: 51\n                }, this), format(latestAppointment.start, 'MM/dd/yyyy EEEE'), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 318,\n                  columnNumber: 76\n                }, this), format(latestAppointment.start, 'h:mm a'), \" - \", format(latestAppointment.end, 'h:mm a'), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 319,\n                  columnNumber: 111\n                }, this), latestAppointment.appointmentStatus, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 320,\n                  columnNumber: 61\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 303,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 301,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 323,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [\"Date:\", /*#__PURE__*/_jsxDEV(\"select\", {\n                  name: \"sched\",\n                  id: \"sched\",\n                  onChange: handleRescheduleChange,\n                  children: generateDateOptions({\n                    scheduleDate: latestAppointment.start\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 327,\n                  columnNumber: 9\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 325,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 324,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  style: {\n                    marginTop: \"10px\",\n                    borderRadius: 0,\n                    width: \"100%\"\n                  },\n                  onClick: handleReschedule,\n                  children: \"Submit\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 335,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: rescheduleStatus\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 336,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: error\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 337,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 334,\n                columnNumber: 19\n              }, this)\n            }, 2, false, {\n              fileName: _jsxFileName,\n              lineNumber: 333,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 15\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(DoctorFooter, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 282,\n    columnNumber: 5\n  }, this);\n};\n_s(DoctorResched, \"lRohGFCFLMt9xLotVq5FJu4Xei8=\", false, function () {\n  return [useParams];\n});\n_c = DoctorResched;\nexport default DoctorResched;\nvar _c;\n$RefreshReg$(_c, \"DoctorResched\");","map":{"version":3,"names":["React","useState","useEffect","useParams","DoctorNavbar","DoctorFooter","DoctorCalendar","Calendar","dateFnsLocalizer","parse","format","startOfWeek","getDay","addWeeks","jsxDEV","_jsxDEV","DoctorResched","_s","appointmentId","rescheduleChoice","setRescheduleChoice","error","setError","rescheduleStatus","setRescheduleStatus","latestAppointment","setLatestAppointment","title","clinic","address","number","start","Date","end","transactionNo","appointmentStatus","appointments","setAppointments","fetch","then","response","ok","json","Error","data","appointmentsResponse","appointmentsData","formattedAppointments","map","appointment","year","month","day","scheduleDate","split","Number","hours","minutes","startTime","hours2","minutes2","endTime","startDate","endDate","patientName","clinicName","officeNumber","status","catch","console","fetchAppointment","doctorName","isNaN","getTime","formattedAppointment","handleRescheduleChange","event","match","target","value","children","fileName","_jsxFileName","lineNumber","columnNumber","sourceDate","getFullYear","getMonth","toString","padStart","getDate","handleReschedule","method","window","location","href","statusText","message","generateDateOptions","scheduleDateString","dateOptions","i","optionDate","formattedDate","push","locales","require","localizer","CustomEvent","style","margin","whiteSpace","overflowY","maxHeight","textOverflow","overflow","getBackgroundColor","getBorderColor","sort","a","b","statusOrder","display","width","justifyContent","events","startAccessor","endAccessor","height","components","marginLeft","index","rowSpan","border","borderRadius","borderColor","backgroundColor","paddingLeft","name","id","onChange","marginTop","onClick","_c","$RefreshReg$"],"sources":["D:/3rd Year 1st Sem/DocClickConnect/appointment/src/pages/AppointmentPages/DoctorResched.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport DoctorNavbar from '../../components/DoctorNavbar';\nimport DoctorFooter from '../../components/DoctorFooter';\nimport DoctorCalendar from '../../components/DoctorCalendar';\nimport { Calendar, dateFnsLocalizer } from 'react-big-calendar';\nimport { parse, format } from 'date-fns';\n\nimport startOfWeek from 'date-fns/startOfWeek';\nimport getDay from 'date-fns/getDay';\nimport addWeeks from 'date-fns/addWeeks';\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\n\nconst DoctorResched = () => {\n  const { appointmentId } = useParams();\n  const [rescheduleChoice, setRescheduleChoice] = useState('');\n  const [error, setError] = useState('');\n  const [rescheduleStatus, setRescheduleStatus] =  useState('');\n  const [latestAppointment, setLatestAppointment] = useState([\n    {\n      title: '',\n      clinic: '',\n      address: '',\n      number: '',\n      start: new Date(),\n      end: new Date(),  // 5:00 PM\n      transactionNo: '',\n      appointmentStatus: ''\n    },\n  ]);\n  const [appointments, setAppointments] = useState([\n    {\n      title: '',\n      clinic: '',\n      address: '',\n      number: '',\n      start: new Date(),\n      end: new Date(),  // 5:00 PM\n      transactionNo: '',\n      appointmentStatus: ''\n    },\n  ]);\n\n  useEffect(() => {\n    fetch('http://localhost:8080/checkLoggedInDoctor')\n      .then((response) => {\n        if (response.ok) {\n          return response.json();\n        }\n        throw new Error('Network response was not ok');\n      })\n      .then((data) => {\n        fetch(`http://localhost:8080/appointments?doctorUserId=${data}`)\n          .then((appointmentsResponse) => {\n            if (appointmentsResponse.ok) {\n              return appointmentsResponse.json();\n            }\n            throw new Error('Network response was not ok');\n          })\n          .then((appointmentsData) => {\n            const formattedAppointments = appointmentsData.map((appointment) => {\n              // Extract date and time components\n              const [year, month, day] = appointment.scheduleDate.split('-').map(Number);\n              const [hours, minutes] = appointment.startTime.split(':').map(Number);\n              const [hours2, minutes2] = appointment.endTime.split(':').map(Number);\n\n              // Create Date objects for start and end times\n              const startDate = new Date(year, month - 1, day, hours, minutes);\n              const endDate = new Date(year, month - 1, day, hours2, minutes2);\n\n              // Create an appointment object\n              return {\n                title: appointment.patientName,\n                clinic: appointment.clinicName,\n                address: appointment.address,\n                number: appointment.clinic.officeNumber,\n                start: startDate,\n                end: endDate,\n                appointmentId: appointment.transactionNo,\n                appointmentStatus: appointment.status\n              };\n            });\n\n            setAppointments(formattedAppointments);\n          })\n          .catch((error) => {\n            // Handle errors\n            console.error(error);\n          });\n\n      })\n      .catch((error) => {\n        console.error('Error:', error);\n      });\n  }, []);\n\n  useEffect(() => {\n    const fetchAppointment = async () => {\n      try {\n        const response = await fetch(`http://localhost:8080/appointment/${appointmentId}`);\n\n        if (response.ok) {\n          const data = await response.json();\n\n          // Check if necessary properties are present in the data object\n          if (data && data.scheduleDate && data.startTime && data.endTime && data.doctorName && data.transactionNo && data.status) {\n            const [year, month, day] = data.scheduleDate.split('-').map(Number);\n            const [hours, minutes] = data.startTime.split(':').map(Number);\n            const [hours2, minutes2] = data.endTime.split(':').map(Number);\n\n            // Check if the extracted components are valid numbers\n            if (!isNaN(year) && !isNaN(month) && !isNaN(day) && !isNaN(hours) && !isNaN(minutes) && !isNaN(hours2) && !isNaN(minutes2)) {\n              // Create Date objects for start and end times\n              const startDate = new Date(year, month - 1, day, hours, minutes);\n              const endDate = new Date(year, month - 1, day, hours2, minutes2);\n\n              // Check if the created Date objects are valid\n              if (!isNaN(startDate.getTime()) && !isNaN(endDate.getTime())) {\n                const formattedAppointment = {\n                  title: data.patientName,\n                  clinic: data.clinicName,\n                  address: data.address,\n                  number: data.clinic.officeNumber,\n                  start: startDate,\n                  end: endDate,\n                  appointmentId: data.transactionNo,\n                  appointmentStatus: data.status\n                };\n\n                setLatestAppointment([formattedAppointment]);\n              } else {\n                console.error('Invalid date created. Check the date and time components.');\n              }\n            } else {\n              console.error('Invalid date/time components in the response data.');\n            }\n          } else {\n            console.error('Incomplete or missing data in the response.');\n          }\n        } else {\n          setError('Error fetching appointment');\n        }\n      } catch (error) {\n        setError('Error fetching appointment');\n      }\n    };\n\n    fetchAppointment();\n  }, [appointmentId]);\n\n  const handleRescheduleChange = (event) => {\n    const match = event.target.value.match(/(\\d{2})\\/(\\d{2})\\/(\\d{4})/);\n\n    if (!match) {\n      return <div>Error: Invalid date format</div>;\n    }\n\n    const [, month, day, year] = match;\n    const sourceDate = new Date(`${year}-${month}-${day}`);\n    setRescheduleChoice(`${sourceDate.getFullYear()}-${(sourceDate.getMonth() + 1).toString().padStart(2, '0')}-${sourceDate.getDate().toString().padStart(2, '0')}`);\n\n  };\n\n  const handleReschedule = async () => {\n    try {\n      const response = await fetch(`http://localhost:8080/appointment/${appointmentId}?scheduleDate=${rescheduleChoice}`, {\n        method: 'PUT',\n        // No need for headers when not sending a JSON payload\n      });\n      if (response.ok) {\n        setRescheduleStatus('Appointment Rescheduled Successfully!');\n        window.location.href = `/docresched/${appointmentId}`;\n      }\n      if (!response.ok) {\n        setRescheduleStatus(`Failed to update appointment: ${response.statusText}`);\n        throw new Error(`Failed to update appointment: ${response.statusText}`);\n        \n      }\n\n    } catch (error) {\n      console.error('Error updating appointment:', error.message);\n      setError('Error updating appointment:', error.message);\n    }\n  };\n\n  const generateDateOptions = ({ scheduleDate }) => {\n    if (!scheduleDate) {\n      console.error('Error: scheduleDate is undefined.');\n      return [];\n    }\n  \n    // Convert the Date object to a string\n    const scheduleDateString = scheduleDate.toString();\n    \n    // Convert the string back to a Date object\n    const startDate = new Date(scheduleDateString);\n    \n    const dateOptions = [];\n  \n    for (let i = 0; i < 4; i++) {\n      const optionDate = addWeeks(startDate, i);\n      \n      // Format the date using date-fns\n      const formattedDate = format(optionDate, \"MM/dd/yyyy EEEE\");\n  \n      dateOptions.push(\n        <option key={i} value={formattedDate}>\n          {formattedDate}\n        </option>\n      );\n    }\n  \n    return dateOptions;\n  };\n\n  const locales = {\n    \"en-US\": require(\"date-fns/locale/en-US\")\n  }\n\n  const localizer = dateFnsLocalizer({\n    format,\n    parse,\n    startOfWeek,\n    getDay,\n    locales\n  })\n\n  \n  const CustomEvent = ({ event }) => (\n    <div style={{ margin: '5px 0', whiteSpace: 'nowrap', overflowY: 'auto', maxHeight: \"55px\", textOverflow: 'ellipsis' }}>\n      <strong style={{ margin: '0px 0', overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'normal' }}>{event.title}</strong>\n      <p style={{ margin: '0px 0', overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'normal' }}>\n        Clinic: {event.clinic}\n      </p>\n      <p style={{ margin: '0px 0', overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'normal' }}>\n        Status: {event.appointmentStatus}\n      </p>\n    </div>\n  );\n\n  const getBackgroundColor = (status) => {\n    switch (status) {\n      case 'Cancelled':\n        return '#FCA694';\n      case 'Rescheduled':\n        return '#FFB97F';\n      case 'Scheduled by Patient':\n        return '#FFFFDC';\n      case 'Approved by Doctor':\n        return '#BAFFC4';\n      default:\n        return 'lightgray';\n    }\n  };\n\n  const getBorderColor = (status) => {\n    switch (status) {\n      case 'Cancelled':\n        return '#A41D00';\n      case 'Rescheduled':\n        return '#FF7400';\n      case 'Scheduled by Patient':\n        return '#F8F547';\n      case 'Approved by Doctor':\n        return '#48DE66';\n      default:\n        return 'lightgray';\n    }\n  };\n\n  appointments.sort((a, b) => {\n    const statusOrder = {\n      'Cancelled': 4,\n      'Rescheduled': 3,\n      'Scheduled by Patient': 2,\n      'Approved by Doctor': 1,\n    };\n  \n    return statusOrder[a.appointmentStatus] - statusOrder[b.appointmentStatus];\n  });\n  return (\n    <div>\n      <DoctorNavbar />\n        <div style={{ display: \"flex\", margin: \"auto\", width: \"100vw\", justifyContent: \"center\" }}>\n      <Calendar\n          localizer={localizer}\n          events={appointments}\n          startAccessor=\"start\"\n          endAccessor=\"end\"\n          style={{ height: 700, width: '70%' }}\n          components={{\n            event: CustomEvent, // Use the custom Event component\n          }}\n        />\n    \n    <div style={{ marginLeft: \"30px\" }}>\n          <h1>My Appointments</h1>\n          {latestAppointment.map((latestAppointment, index) => (\n            <table key={index}>\n              <tbody>\n                <tr >\n                  \n                  <td\n                      rowSpan={2}\n                      width={200}\n                      style={{\n                        border: '3px dashed',\n                        borderRadius: '10px', \n                        borderColor: getBorderColor(latestAppointment.appointmentStatus),\n                        backgroundColor: getBackgroundColor(latestAppointment.appointmentStatus),\n                        paddingLeft: '10px',\n                        width: '300px'            \n                      }}\n                    >\n                      {latestAppointment.title} <br />\n                      {latestAppointment.clinic} <br />\n                      {latestAppointment.address} <br />\n                      {format(latestAppointment.start, 'MM/dd/yyyy EEEE')} <br />\n                      {format(latestAppointment.start, 'h:mm a')} - {format(latestAppointment.end, 'h:mm a')} <br />\n                      {latestAppointment.appointmentStatus} <br />\n                    </td>\n                </tr>\n                <br />\n                <tr >\n                <td>\n        Date:\n        <select name=\"sched\" id=\"sched\"  onChange={handleRescheduleChange}>\n          {generateDateOptions({ scheduleDate: latestAppointment.start })}\n        </select>\n\n      </td>\n                </tr>\n                <tr key={2}>\n                  <td>\n                    <button style={{ marginTop: \"10px\", borderRadius: 0, width: \"100%\" }} onClick={handleReschedule}>Submit</button>\n                    <p>{rescheduleStatus}</p>\n                    <p>{error}</p>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          ))}\n\n        </div>\n    \n          </div>\n          <DoctorFooter />\n        </div>\n      );\n}\n\nexport default DoctorResched\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}