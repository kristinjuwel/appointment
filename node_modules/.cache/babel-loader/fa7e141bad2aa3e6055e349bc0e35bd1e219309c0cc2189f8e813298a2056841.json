{"ast":null,"code":"var _jsxFileName = \"D:\\\\3rd Year 1st Sem\\\\DocClickConnect\\\\appointment\\\\src\\\\pages\\\\PatientRegister.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './PatientRegister.css'; // Import your CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PatientRegister() {\n  _s();\n  const [formData, setFormData] = useState({\n    username: '',\n    lastName: '',\n    middleName: '',\n    firstName: '',\n    age: '',\n    sex: '',\n    birthday: '',\n    address: '',\n    contact: '',\n    email: '',\n    senior: '',\n    pwdId: '',\n    philhealthId: '',\n    hmo: '',\n    password: ''\n  });\n  const [signupMessage, setSignupMessage] = useState('');\n  const [showVerification, setShowVerification] = useState(false);\n  const handleSignup = async () => {\n    try {\n      // Check if any of the fields are empty\n      const requiredFields = ['username', 'lastName',\n      // Change 'lastname' to 'lastName'\n      'firstName',\n      // Change 'firstname' to 'firstName'\n      'age', 'sex', 'birthday', 'address', 'contact', 'email', 'password'];\n      for (const field of requiredFields) {\n        if (!formData[field]) {\n          setSignupMessage(`Please fill in the \"${field}\" field.`);\n          return;\n        }\n      }\n\n      // Validate password length\n      if (formData.password.length <= 7) {\n        setSignupMessage('Password must be at least 8 characters long.');\n        return;\n      }\n\n      // Validate email format using regular expression\n      const emailRegex = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/;\n      if (!emailRegex.test(formData.email)) {\n        setSignupMessage('Invalid email format.');\n        return;\n      }\n\n      // Make an HTTP request to your server endpoint for user registration\n      const url = 'http://localhost:8080/patients'; // Adjust the URL as needed\n\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(formData)\n      });\n      if (response.ok) {\n        // Signup successful\n        setSignupMessage('User added successfully');\n        setShowVerification(true);\n      } else {\n        // Signup failed\n        const errorMessage = await response.text();\n        setSignupMessage(`Signup failed: ${errorMessage}`);\n        // Handle the error or display an error message to the user\n      }\n    } catch (error) {\n      console.error('Error during signup:', error);\n      setSignupMessage('Error during signup. Please try again later.');\n      // Handle the error or display an error message to the user\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"reg-container\",\n    id: \"reg-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"register\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        style: {\n          color: '#0094d4'\n        },\n        children: \"Patient Register\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        action: \"#\",\n        id: \"register-form\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"reg-row\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"reg-infield\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              id: \"username\",\n              placeholder: \"*Username\",\n              name: \"username\",\n              value: formData.username,\n              onChange: e => setFormData({\n                ...formData,\n                username: e.target.value\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"reg-infield\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              id: \"lastname\",\n              placeholder: \"*Last Name\",\n              name: \"lastname\",\n              value: formData.lastName,\n              onChange: e => setFormData({\n                ...formData,\n                lastName: e.target.value\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSignup,\n        children: \"Register\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), signupMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: signupMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 27\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n}\n_s(PatientRegister, \"C+5BYvQ5BcvsGHADbx++n6J+sas=\");\n_c = PatientRegister;\nexport default PatientRegister;\nvar _c;\n$RefreshReg$(_c, \"PatientRegister\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","PatientRegister","_s","formData","setFormData","username","lastName","middleName","firstName","age","sex","birthday","address","contact","email","senior","pwdId","philhealthId","hmo","password","signupMessage","setSignupMessage","showVerification","setShowVerification","handleSignup","requiredFields","field","length","emailRegex","test","url","response","fetch","method","headers","body","JSON","stringify","ok","errorMessage","text","error","console","className","id","children","style","color","fileName","_jsxFileName","lineNumber","columnNumber","action","type","placeholder","name","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["D:/3rd Year 1st Sem/DocClickConnect/appointment/src/pages/PatientRegister.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './PatientRegister.css'; // Import your CSS file\n\nfunction PatientRegister() {\n  const [formData, setFormData] = useState({\n    username: '',\n    lastName: '',\n    middleName: '',\n    firstName: '',\n    age: '',\n    sex: '',\n    birthday: '',\n    address: '',\n    contact: '',\n    email: '',\n    senior: '',\n    pwdId: '',\n    philhealthId: '',\n    hmo: '',\n    password: '',\n  });\n\n  const [signupMessage, setSignupMessage] = useState('');\n  const [showVerification, setShowVerification] = useState(false);\n\n  const handleSignup = async () => {\n    try {\n      // Check if any of the fields are empty\n      const requiredFields = [\n        'username',\n        'lastName', // Change 'lastname' to 'lastName'\n        'firstName', // Change 'firstname' to 'firstName'\n        'age',\n        'sex',\n        'birthday',\n        'address',\n        'contact',\n        'email',\n        'password',\n      ];\n\n      for (const field of requiredFields) {\n        if (!formData[field]) {\n          setSignupMessage(`Please fill in the \"${field}\" field.`);\n          return;\n        }\n      }\n\n      // Validate password length\n      if (formData.password.length <= 7) {\n        setSignupMessage('Password must be at least 8 characters long.');\n        return;\n      }\n\n      // Validate email format using regular expression\n      const emailRegex = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/;\n      if (!emailRegex.test(formData.email)) {\n        setSignupMessage('Invalid email format.');\n        return;\n      }\n\n      // Make an HTTP request to your server endpoint for user registration\n      const url = 'http://localhost:8080/patients'; // Adjust the URL as needed\n\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(formData),\n      });\n\n      if (response.ok) {\n        // Signup successful\n        setSignupMessage('User added successfully');\n        setShowVerification(true);\n      } else {\n        // Signup failed\n        const errorMessage = await response.text();\n        setSignupMessage(`Signup failed: ${errorMessage}`);\n        // Handle the error or display an error message to the user\n      }\n    } catch (error) {\n      console.error('Error during signup:', error);\n      setSignupMessage('Error during signup. Please try again later.');\n      // Handle the error or display an error message to the user\n    }\n  };\n\n  return (\n    <div className=\"reg-container\" id=\"reg-container\">\n      <div className=\"register\">\n        <h1 style={{ color: '#0094d4' }}>Patient Register</h1>\n        <form action=\"#\" id=\"register-form\">\n          <div className=\"reg-row\">\n            <div className=\"reg-infield\">\n              <input\n                type=\"text\"\n                id=\"username\"\n                placeholder=\"*Username\"\n                name=\"username\"\n                value={formData.username}\n                onChange={(e) => setFormData({ ...formData, username: e.target.value })}\n              />\n            </div>\n            <div className=\"reg-infield\">\n              <input\n                type=\"text\"\n                id=\"lastname\"\n                placeholder=\"*Last Name\"\n                name=\"lastname\"\n                value={formData.lastName}\n                onChange={(e) => setFormData({ ...formData, lastName: e.target.value })}\n              />\n            </div>\n          </div>\n          {/* Rest of your form inputs */}\n        </form>\n        <button onClick={handleSignup}>Register</button>\n        {signupMessage && <p>{signupMessage}</p>}\n      </div>\n    </div>\n  );\n}\n\nexport default PatientRegister;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}