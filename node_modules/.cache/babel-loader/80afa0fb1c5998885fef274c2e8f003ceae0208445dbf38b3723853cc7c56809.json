{"ast":null,"code":"var _jsxFileName = \"D:\\\\3rd Year 1st Sem\\\\DocClickConnect\\\\appointment\\\\src\\\\pages\\\\PatientVerification.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom'; // Use this if you want to redirect after verification\nimport './PatientVerification.css'; // Style your verification page\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PatientVerification() {\n  _s();\n  const [verificationCode, setVerificationCode] = useState('');\n  const [verificationError, setVerificationError] = useState('');\n  const history = useHistory();\n  const handleVerificationSubmit = async e => {\n    e.preventDefault();\n\n    // TODO: Send the verification code to your backend for verification\n    try {\n      // Replace with an API call to verify the code\n      const response = await fetch('/api/verify', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: 'user@example.com',\n          otp: verificationCode\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        // Verification successful\n        history.push('/login'); // Redirect to login page or any other page\n      } else {\n        // Verification failed, handle the error\n        setVerificationError(data.error || 'Verification failed.');\n      }\n    } catch (error) {\n      console.error('Error verifying code:', error);\n      setVerificationError('An error occurred while verifying the code.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"verification-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Patient Verification\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Enter the verification code sent to your email:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleVerificationSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Verification Code\",\n        value: verificationCode,\n        onChange: e => setVerificationCode(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Verify\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), verificationError && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: verificationError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 29\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n_s(PatientVerification, \"J78C9GiaovidqVt1ew/vlzG+T1s=\", false, function () {\n  return [useHistory];\n});\n_c = PatientVerification;\nexport default PatientVerification;\nvar _c;\n$RefreshReg$(_c, \"PatientVerification\");","map":{"version":3,"names":["React","useState","useHistory","jsxDEV","_jsxDEV","PatientVerification","_s","verificationCode","setVerificationCode","verificationError","setVerificationError","history","handleVerificationSubmit","e","preventDefault","response","fetch","method","headers","body","JSON","stringify","email","otp","data","json","ok","push","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","value","onChange","target","required","_c","$RefreshReg$"],"sources":["D:/3rd Year 1st Sem/DocClickConnect/appointment/src/pages/PatientVerification.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useHistory } from 'react-router-dom'; // Use this if you want to redirect after verification\r\nimport './PatientVerification.css'; // Style your verification page\r\n\r\nfunction PatientVerification() {\r\n  const [verificationCode, setVerificationCode] = useState('');\r\n  const [verificationError, setVerificationError] = useState('');\r\n\r\n  const history = useHistory();\r\n\r\n  const handleVerificationSubmit = async (e) => {\r\n    e.preventDefault();\r\n    \r\n    // TODO: Send the verification code to your backend for verification\r\n    try {\r\n      // Replace with an API call to verify the code\r\n      const response = await fetch('/api/verify', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ email: 'user@example.com', otp: verificationCode }),\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (response.ok) {\r\n        // Verification successful\r\n        history.push('/login'); // Redirect to login page or any other page\r\n      } else {\r\n        // Verification failed, handle the error\r\n        setVerificationError(data.error || 'Verification failed.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error verifying code:', error);\r\n      setVerificationError('An error occurred while verifying the code.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"verification-container\">\r\n      <h2>Patient Verification</h2>\r\n      <p>Enter the verification code sent to your email:</p>\r\n      <form onSubmit={handleVerificationSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Verification Code\"\r\n          value={verificationCode}\r\n          onChange={(e) => setVerificationCode(e.target.value)}\r\n          required\r\n        />\r\n        <button type=\"submit\">Verify</button>\r\n      </form>\r\n      {verificationError && <div className=\"error\">{verificationError}</div>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PatientVerification;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}