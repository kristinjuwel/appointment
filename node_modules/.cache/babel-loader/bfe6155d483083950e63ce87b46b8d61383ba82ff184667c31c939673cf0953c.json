{"ast":null,"code":"var _jsxFileName = \"D:\\\\3rd Year 1st Sem\\\\DocClickConnect\\\\appointment\\\\src\\\\pages\\\\DoctorPages\\\\DoctorSearch.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport \"../../styles/Search.css\";\nimport PatientNavBar from '../../components/PatientNavBar';\nimport PatientFooter from '../../components/PatientFooter';\nimport DoctorCard from '../../components/Doctors'; // Import the DoctorCard component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DoctorSearch = () => {\n  _s();\n  const [searchQuery, setSearchQuery] = useState('');\n  const [doctors, setDoctors] = useState([{\n    doctorId: '',\n    firstName: '',\n    lastName: '',\n    contactNumber: '',\n    specialization: '',\n    credentials: '',\n    avatar: ''\n  }]);\n  const [searchDoctors, setSearchDoctors] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchAllDoctors = async () => {\n      try {\n        const response = await fetch('http://localhost:8080/allusers');\n        if (response.ok) {\n          const data = await response.json();\n          const formattedDoctors = data.map(doctorData => ({\n            doctorId: doctorData.userId,\n            firstName: `Dr. ${doctorData.user.firstName}`,\n            lastName: doctorData.user.lastName,\n            contactNumber: doctorData.user.contactNumber,\n            specialization: doctorData.specialization,\n            credentials: doctorData.credentials,\n            avatar: doctorData.user.avatar\n          }));\n          setDoctors(formattedDoctors);\n        } else {\n          setError('Failed to fetch doctors');\n        }\n      } catch (error) {\n        setError('Error while fetching doctors');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchAllDoctors();\n  }, []);\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 12\n    }, this);\n  }\n  const handleSearchChange = e => {\n    const inputValue = e.target.value.toLowerCase();\n\n    // If the search query is empty, show all doctors\n    if (inputValue === \"\") {\n      setDoctors(doctors);\n      setSearchDoctors(doctors);\n    } else {\n      // Filter the original array based on the current input value\n      const filteredDoctors = doctors.filter(doctor => `${doctor.firstName} ${doctor.lastName} ${doctor.specialization}`.toLowerCase().includes(inputValue));\n\n      // Update the state with the filtered doctors\n      setSearchDoctors(filteredDoctors);\n    }\n\n    // Update the search query state\n    setSearchQuery(inputValue);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"search-container\",\n    id: \"search-container\",\n    children: [/*#__PURE__*/_jsxDEV(PatientNavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"info-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search-box\",\n        style: {\n          position: 'sticky'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"search-input\",\n          placeholder: \"Find the doctor you need..\",\n          value: searchQuery,\n          onChange: handleSearchChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"search-button\",\n          onClick: handleSearchChange,\n          children: \"Search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"block\",\n          width: \"90%\",\n          marginLeft: \"12%\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"doctor-grid\",\n          children: searchDoctors.map((doctor, index) => /*#__PURE__*/_jsxDEV(DoctorCard, {\n            doctor: doctor\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PatientFooter, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n_s(DoctorSearch, \"C/k/g2CG6+hblOSNe7ldXs1OWNs=\");\n_c = DoctorSearch;\nexport default DoctorSearch;\nvar _c;\n$RefreshReg$(_c, \"DoctorSearch\");","map":{"version":3,"names":["React","useState","useEffect","PatientNavBar","PatientFooter","DoctorCard","jsxDEV","_jsxDEV","DoctorSearch","_s","searchQuery","setSearchQuery","doctors","setDoctors","doctorId","firstName","lastName","contactNumber","specialization","credentials","avatar","searchDoctors","setSearchDoctors","isLoading","setIsLoading","error","setError","fetchAllDoctors","response","fetch","ok","data","json","formattedDoctors","map","doctorData","userId","user","children","fileName","_jsxFileName","lineNumber","columnNumber","handleSearchChange","e","inputValue","target","value","toLowerCase","filteredDoctors","filter","doctor","includes","className","id","style","position","type","placeholder","onChange","onClick","display","width","marginLeft","index","_c","$RefreshReg$"],"sources":["D:/3rd Year 1st Sem/DocClickConnect/appointment/src/pages/DoctorPages/DoctorSearch.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport \"../../styles/Search.css\";\r\nimport PatientNavBar from '../../components/PatientNavBar';\r\nimport PatientFooter from '../../components/PatientFooter';\r\nimport DoctorCard from '../../components/Doctors'; // Import the DoctorCard component\r\n\r\n\r\nconst DoctorSearch = () => {\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [doctors, setDoctors] = useState([\r\n    {\r\n      doctorId: '',\r\n      firstName: '',\r\n      lastName: '',\r\n      contactNumber: '',\r\n      specialization: '',\r\n      credentials: '',\r\n      avatar:''\r\n    }\r\n  ]);\r\n  const [searchDoctors, setSearchDoctors] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n\r\n  useEffect(() => {\r\n    const fetchAllDoctors = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:8080/allusers');\r\n\r\n        if (response.ok) {\r\n          const data = await response.json();\r\n          const formattedDoctors = data.map((doctorData) => ({\r\n            doctorId: doctorData.userId,\r\n            firstName: `Dr. ${doctorData.user.firstName}`,\r\n            lastName: doctorData.user.lastName,\r\n            contactNumber: doctorData.user.contactNumber,\r\n            specialization: doctorData.specialization,\r\n            credentials: doctorData.credentials,\r\n            avatar: doctorData.user.avatar\r\n          }));\r\n\r\n          setDoctors(formattedDoctors);\r\n        } else {\r\n          setError('Failed to fetch doctors');\r\n        }\r\n      } catch (error) {\r\n        setError('Error while fetching doctors');\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchAllDoctors();\r\n  }, []);\r\n\r\n  \r\n\r\n  if (isLoading) {\r\n    return <p>Loading...</p>;\r\n  }\r\n\r\n  if (error) {\r\n    return <p>Error: {error}</p>;\r\n  }\r\n\r\n  const handleSearchChange = (e) => {\r\n    const inputValue = e.target.value.toLowerCase();\r\n  \r\n    // If the search query is empty, show all doctors\r\n    if (inputValue === \"\") {\r\n      setDoctors(doctors);\r\n      setSearchDoctors(doctors);\r\n    } else {\r\n      // Filter the original array based on the current input value\r\n      const filteredDoctors = doctors.filter(\r\n        (doctor) =>\r\n          `${doctor.firstName} ${doctor.lastName} ${doctor.specialization}`.toLowerCase().includes(inputValue)\r\n      );\r\n  \r\n      // Update the state with the filtered doctors\r\n      setSearchDoctors(filteredDoctors);\r\n    }\r\n  \r\n    // Update the search query state\r\n    setSearchQuery(inputValue);\r\n  };\r\n  \r\n  \r\n  return (\r\n    <div className='search-container' id=\"search-container\">\r\n      <PatientNavBar />\r\n      <div className=\"info-container\">\r\n        <div className=\"search-box\" style={{ position: 'sticky' }}>\r\n        <input\r\n          type=\"text\"\r\n          className=\"search-input\"\r\n          placeholder=\"Find the doctor you need..\"\r\n          value={searchQuery}\r\n          onChange={handleSearchChange}\r\n        />\r\n        {/* Render the filtered list or handle it in your main component */}\r\n        <button className=\"search-button\" onClick={handleSearchChange}>\r\n          Search\r\n        </button>\r\n      </div>\r\n        <br />\r\n        <div style={{ display: \"block\", width: \"90%\", marginLeft: \"12%\"}}>\r\n          <div className=\"doctor-grid\">\r\n            {searchDoctors.map((doctor, index) => (\r\n              <DoctorCard key={index} doctor={doctor} />\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <PatientFooter />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DoctorSearch;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}